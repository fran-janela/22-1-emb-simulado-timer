
OLED1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000075fc  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  004075fc  004075fc  000175fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009d0  20400000  00407604  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000304  204009d0  00407fd4  000209d0  2**2
                  ALLOC
  4 .stack        00002004  20400cd4  004082d8  000209d0  2**0
                  ALLOC
  5 .heap         00000200  20402cd8  0040a2dc  000209d0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209d0  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209fe  2**0
                  CONTENTS, READONLY
  8 .debug_info   0001ab3c  00000000  00000000  00020a57  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00003be2  00000000  00000000  0003b593  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00006bc6  00000000  00000000  0003f175  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000a30  00000000  00000000  00045d3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000ab8  00000000  00000000  0004676b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00021ecb  00000000  00000000  00047223  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000fe6b  00000000  00000000  000690ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0009090c  00000000  00000000  00078f59  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00002374  00000000  00000000  00109868  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	d8 2c 40 20 91 14 40 00 8d 14 40 00 8d 14 40 00     .,@ ..@...@...@.
  400010:	8d 14 40 00 8d 14 40 00 8d 14 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	8d 14 40 00 8d 14 40 00 00 00 00 00 8d 14 40 00     ..@...@.......@.
  40003c:	8d 14 40 00 8d 14 40 00 8d 14 40 00 bd 17 40 00     ..@...@...@...@.
  40004c:	8d 14 40 00 8d 14 40 00 8d 14 40 00 8d 14 40 00     ..@...@...@...@.
  40005c:	8d 14 40 00 8d 14 40 00 00 00 00 00 f1 0f 40 00     ..@...@.......@.
  40006c:	05 10 40 00 19 10 40 00 8d 14 40 00 8d 14 40 00     ..@...@...@...@.
  40007c:	8d 14 40 00 2d 10 40 00 41 10 40 00 8d 14 40 00     ..@.-.@.A.@...@.
  40008c:	8d 14 40 00 8d 14 40 00 8d 14 40 00 8d 14 40 00     ..@...@...@...@.
  40009c:	8d 14 40 00 95 17 40 00 8d 14 40 00 8d 14 40 00     ..@...@...@...@.
  4000ac:	8d 14 40 00 8d 14 40 00 8d 14 40 00 8d 14 40 00     ..@...@...@...@.
  4000bc:	8d 14 40 00 8d 14 40 00 8d 14 40 00 8d 14 40 00     ..@...@...@...@.
  4000cc:	8d 14 40 00 00 00 00 00 8d 14 40 00 00 00 00 00     ..@.......@.....
  4000dc:	8d 14 40 00 8d 14 40 00 8d 14 40 00 8d 14 40 00     ..@...@...@...@.
  4000ec:	8d 14 40 00 8d 14 40 00 8d 14 40 00 8d 14 40 00     ..@...@...@...@.
  4000fc:	8d 14 40 00 8d 14 40 00 8d 14 40 00 8d 14 40 00     ..@...@...@...@.
  40010c:	8d 14 40 00 8d 14 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 8d 14 40 00 8d 14 40 00 8d 14 40 00     ......@...@...@.
  40012c:	8d 14 40 00 8d 14 40 00 00 00 00 00 8d 14 40 00     ..@...@.......@.
  40013c:	8d 14 40 00                                         ..@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204009d0 	.word	0x204009d0
  40015c:	00000000 	.word	0x00000000
  400160:	00407604 	.word	0x00407604

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	00407604 	.word	0x00407604
  4001a0:	204009d4 	.word	0x204009d4
  4001a4:	00407604 	.word	0x00407604
  4001a8:	00000000 	.word	0x00000000

004001ac <rtc_set_hour_mode>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_mode 1 for 12-hour mode, 0 for 24-hour mode.
 */
void rtc_set_hour_mode(Rtc *p_rtc, uint32_t ul_mode)
{
	if (ul_mode) {
  4001ac:	b921      	cbnz	r1, 4001b8 <rtc_set_hour_mode+0xc>
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
	} else {
		p_rtc->RTC_MR &= (~RTC_MR_HRMOD);
  4001ae:	6843      	ldr	r3, [r0, #4]
  4001b0:	f023 0301 	bic.w	r3, r3, #1
  4001b4:	6043      	str	r3, [r0, #4]
  4001b6:	4770      	bx	lr
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
  4001b8:	6843      	ldr	r3, [r0, #4]
  4001ba:	f043 0301 	orr.w	r3, r3, #1
  4001be:	6043      	str	r3, [r0, #4]
  4001c0:	4770      	bx	lr

004001c2 <rtc_enable_interrupt>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_sources Interrupts to be enabled.
 */
void rtc_enable_interrupt(Rtc *p_rtc, uint32_t ul_sources)
{
	p_rtc->RTC_IER = ul_sources;
  4001c2:	6201      	str	r1, [r0, #32]
  4001c4:	4770      	bx	lr

004001c6 <rtc_get_time>:
 * \param pul_minute Current minute.
 * \param pul_second Current second.
 */
void rtc_get_time(Rtc *p_rtc, uint32_t *pul_hour, uint32_t *pul_minute,
		uint32_t *pul_second)
{
  4001c6:	b430      	push	{r4, r5}
	uint32_t ul_time;
	uint32_t ul_temp;

	/* Get the current RTC time (multiple reads are necessary to insure a stable value). */
	ul_time = p_rtc->RTC_TIMR;
  4001c8:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  4001ca:	6884      	ldr	r4, [r0, #8]
  4001cc:	42a5      	cmp	r5, r4
  4001ce:	d003      	beq.n	4001d8 <rtc_get_time+0x12>
		ul_time = p_rtc->RTC_TIMR;
  4001d0:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  4001d2:	6884      	ldr	r4, [r0, #8]
  4001d4:	42ac      	cmp	r4, r5
  4001d6:	d1fb      	bne.n	4001d0 <rtc_get_time+0xa>
	}

	/* Hour */
	if (pul_hour) {
  4001d8:	b161      	cbz	r1, 4001f4 <rtc_get_time+0x2e>
		ul_temp = (ul_time & RTC_TIMR_HOUR_Msk) >> RTC_TIMR_HOUR_Pos;
		*pul_hour = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  4001da:	f3c4 5001 	ubfx	r0, r4, #20, #2
  4001de:	eb00 0580 	add.w	r5, r0, r0, lsl #2
  4001e2:	f3c4 4003 	ubfx	r0, r4, #16, #4
  4001e6:	eb00 0045 	add.w	r0, r0, r5, lsl #1

		if ((ul_time & RTC_TIMR_AMPM) == RTC_TIMR_AMPM) {
  4001ea:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
			*pul_hour += 12;
  4001ee:	bf18      	it	ne
  4001f0:	300c      	addne	r0, #12
  4001f2:	6008      	str	r0, [r1, #0]
		}
	}

	/* Minute */
	if (pul_minute) {
  4001f4:	b142      	cbz	r2, 400208 <rtc_get_time+0x42>
		ul_temp = (ul_time & RTC_TIMR_MIN_Msk) >> RTC_TIMR_MIN_Pos;
		*pul_minute = (ul_temp >> BCD_SHIFT) * BCD_FACTOR +  (ul_temp & BCD_MASK);
  4001f6:	f3c4 3102 	ubfx	r1, r4, #12, #3
  4001fa:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  4001fe:	f3c4 2003 	ubfx	r0, r4, #8, #4
  400202:	eb00 0141 	add.w	r1, r0, r1, lsl #1
  400206:	6011      	str	r1, [r2, #0]
	}

	/* Second */
	if (pul_second) {
  400208:	b143      	cbz	r3, 40021c <rtc_get_time+0x56>
		ul_temp = (ul_time & RTC_TIMR_SEC_Msk) >> RTC_TIMR_SEC_Pos;
		*pul_second = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40020a:	f3c4 1202 	ubfx	r2, r4, #4, #3
  40020e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  400212:	f004 040f 	and.w	r4, r4, #15
  400216:	eb04 0442 	add.w	r4, r4, r2, lsl #1
  40021a:	601c      	str	r4, [r3, #0]
	}
}
  40021c:	bc30      	pop	{r4, r5}
  40021e:	4770      	bx	lr

00400220 <rtc_set_time>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_time(Rtc *p_rtc, uint32_t ul_hour, uint32_t ul_minute,
		uint32_t ul_second)
{
  400220:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t ul_time = 0;

	/* If 12-hour mode, set AMPM bit */
	if ((p_rtc->RTC_MR & RTC_MR_HRMOD) == RTC_MR_HRMOD) {
  400222:	6844      	ldr	r4, [r0, #4]
		if (ul_hour > 12) {
  400224:	f014 0f01 	tst.w	r4, #1
  400228:	d005      	beq.n	400236 <rtc_set_time+0x16>
  40022a:	290c      	cmp	r1, #12
  40022c:	d903      	bls.n	400236 <rtc_set_time+0x16>
			ul_hour -= 12;
  40022e:	390c      	subs	r1, #12
			ul_time |= RTC_TIMR_AMPM;
  400230:	f44f 0780 	mov.w	r7, #4194304	; 0x400000
  400234:	e000      	b.n	400238 <rtc_set_time+0x18>
	uint32_t ul_time = 0;
  400236:	2700      	movs	r7, #0
	/* Minute */
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);

	/* Second */
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  400238:	4c1c      	ldr	r4, [pc, #112]	; (4002ac <rtc_set_time+0x8c>)
  40023a:	fba4 5603 	umull	r5, r6, r4, r3
  40023e:	08f6      	lsrs	r6, r6, #3
			((ul_second % BCD_FACTOR) << RTC_TIMR_SEC_Pos);
  400240:	eb06 0586 	add.w	r5, r6, r6, lsl #2
  400244:	eba3 0345 	sub.w	r3, r3, r5, lsl #1
  400248:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
  40024c:	fba4 6502 	umull	r6, r5, r4, r2
  400250:	08ed      	lsrs	r5, r5, #3
  400252:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);
  400256:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  40025a:	eba2 0545 	sub.w	r5, r2, r5, lsl #1
  40025e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  400262:	433b      	orrs	r3, r7
	ul_time |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
  400264:	fba4 4201 	umull	r4, r2, r4, r1
  400268:	08d2      	lsrs	r2, r2, #3
  40026a:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
			((ul_hour % BCD_FACTOR) << RTC_TIMR_HOUR_Pos);
  40026e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  400272:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  400276:	ea43 4101 	orr.w	r1, r3, r1, lsl #16

	/* Update time register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
  40027a:	6983      	ldr	r3, [r0, #24]
  40027c:	f013 0f04 	tst.w	r3, #4
  400280:	d0fb      	beq.n	40027a <rtc_set_time+0x5a>
	p_rtc->RTC_CR |= RTC_CR_UPDTIM;
  400282:	6803      	ldr	r3, [r0, #0]
  400284:	f043 0301 	orr.w	r3, r3, #1
  400288:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  40028a:	6983      	ldr	r3, [r0, #24]
  40028c:	f013 0f01 	tst.w	r3, #1
  400290:	d0fb      	beq.n	40028a <rtc_set_time+0x6a>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  400292:	2301      	movs	r3, #1
  400294:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_TIMR = ul_time;
  400296:	6081      	str	r1, [r0, #8]
	p_rtc->RTC_CR &= (~RTC_CR_UPDTIM);
  400298:	6803      	ldr	r3, [r0, #0]
  40029a:	f023 0301 	bic.w	r3, r3, #1
  40029e:	6003      	str	r3, [r0, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVTIM);
  4002a0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  4002a2:	f000 0001 	and.w	r0, r0, #1
  4002a6:	bcf0      	pop	{r4, r5, r6, r7}
  4002a8:	4770      	bx	lr
  4002aa:	bf00      	nop
  4002ac:	cccccccd 	.word	0xcccccccd

004002b0 <rtc_get_date>:
 * \param pul_day Current day.
 * \param pul_week Current day in current week.
 */
void rtc_get_date(Rtc *p_rtc, uint32_t *pul_year, uint32_t *pul_month,
		uint32_t *pul_day, uint32_t *pul_week)
{
  4002b0:	b4f0      	push	{r4, r5, r6, r7}
  4002b2:	9e04      	ldr	r6, [sp, #16]
	uint32_t ul_date;
	uint32_t ul_cent;
	uint32_t ul_temp;

	/* Get the current date (multiple reads are necessary to insure a stable value). */
	ul_date = p_rtc->RTC_CALR;
  4002b4:	68c5      	ldr	r5, [r0, #12]
	while (ul_date != p_rtc->RTC_CALR) {
  4002b6:	68c4      	ldr	r4, [r0, #12]
  4002b8:	42a5      	cmp	r5, r4
  4002ba:	d003      	beq.n	4002c4 <rtc_get_date+0x14>
		ul_date = p_rtc->RTC_CALR;
  4002bc:	68c5      	ldr	r5, [r0, #12]
	while (ul_date != p_rtc->RTC_CALR) {
  4002be:	68c4      	ldr	r4, [r0, #12]
  4002c0:	42ac      	cmp	r4, r5
  4002c2:	d1fb      	bne.n	4002bc <rtc_get_date+0xc>
	}

	/* Retrieve year */
	if (pul_year) {
  4002c4:	b199      	cbz	r1, 4002ee <rtc_get_date+0x3e>
		ul_temp = (ul_date & RTC_CALR_CENT_Msk) >> RTC_CALR_CENT_Pos;
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
		ul_temp = (ul_date & RTC_CALR_YEAR_Msk) >> RTC_CALR_YEAR_Pos;
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  4002c6:	f3c4 3003 	ubfx	r0, r4, #12, #4
  4002ca:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4002ce:	f3c4 2703 	ubfx	r7, r4, #8, #4
  4002d2:	eb07 0740 	add.w	r7, r7, r0, lsl #1
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  4002d6:	f3c4 1002 	ubfx	r0, r4, #4, #3
  4002da:	eb00 0580 	add.w	r5, r0, r0, lsl #2
  4002de:	f004 000f 	and.w	r0, r4, #15
  4002e2:	eb00 0045 	add.w	r0, r0, r5, lsl #1
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  4002e6:	2564      	movs	r5, #100	; 0x64
  4002e8:	fb05 7000 	mla	r0, r5, r0, r7
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
  4002ec:	6008      	str	r0, [r1, #0]
	}

	/* Retrieve month */
	if (pul_month) {
  4002ee:	b142      	cbz	r2, 400302 <rtc_get_date+0x52>
		ul_temp = (ul_date & RTC_CALR_MONTH_Msk) >> RTC_CALR_MONTH_Pos;
		*pul_month = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  4002f0:	f3c4 5000 	ubfx	r0, r4, #20, #1
  4002f4:	0081      	lsls	r1, r0, #2
  4002f6:	4408      	add	r0, r1
  4002f8:	f3c4 4103 	ubfx	r1, r4, #16, #4
  4002fc:	eb01 0140 	add.w	r1, r1, r0, lsl #1
  400300:	6011      	str	r1, [r2, #0]
	}

	/* Retrieve day */
	if (pul_day) {
  400302:	b143      	cbz	r3, 400316 <rtc_get_date+0x66>
		ul_temp = (ul_date & RTC_CALR_DATE_Msk) >> RTC_CALR_DATE_Pos;
		*pul_day = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  400304:	f3c4 7201 	ubfx	r2, r4, #28, #2
  400308:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  40030c:	f3c4 6103 	ubfx	r1, r4, #24, #4
  400310:	eb01 0242 	add.w	r2, r1, r2, lsl #1
  400314:	601a      	str	r2, [r3, #0]
	}

	/* Retrieve week */
	if (pul_week) {
  400316:	b116      	cbz	r6, 40031e <rtc_get_date+0x6e>
		*pul_week = ((ul_date & RTC_CALR_DAY_Msk) >> RTC_CALR_DAY_Pos);
  400318:	f3c4 5442 	ubfx	r4, r4, #21, #3
  40031c:	6034      	str	r4, [r6, #0]
	}
}
  40031e:	bcf0      	pop	{r4, r5, r6, r7}
  400320:	4770      	bx	lr
	...

00400324 <rtc_set_date>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_date(Rtc *p_rtc, uint32_t ul_year, uint32_t ul_month,
		uint32_t ul_day, uint32_t ul_week)
{
  400324:	b470      	push	{r4, r5, r6}

	/* Week */
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);

	/* Day */
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400326:	4d2a      	ldr	r5, [pc, #168]	; (4003d0 <rtc_set_date+0xac>)
  400328:	fba5 4603 	umull	r4, r6, r5, r3
  40032c:	08f6      	lsrs	r6, r6, #3
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);
  40032e:	9c03      	ldr	r4, [sp, #12]
  400330:	0564      	lsls	r4, r4, #21
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400332:	ea44 7406 	orr.w	r4, r4, r6, lsl #28
			((ul_day % BCD_FACTOR) << RTC_CALR_DATE_Pos);
  400336:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  40033a:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  40033e:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
	ul_date |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
  400342:	fba5 6402 	umull	r6, r4, r5, r2
  400346:	08e4      	lsrs	r4, r4, #3
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400348:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
			((ul_month % BCD_FACTOR) << RTC_CALR_MONTH_Pos);
  40034c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  400350:	eba2 0244 	sub.w	r2, r2, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400354:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
	ul_date |= ((ul_year / BCD_FACTOR / BCD_FACTOR / BCD_FACTOR) <<
  400358:	4b1e      	ldr	r3, [pc, #120]	; (4003d4 <rtc_set_date+0xb0>)
  40035a:	fba3 4301 	umull	r4, r3, r3, r1
  40035e:	099b      	lsrs	r3, r3, #6
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400360:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
			((ul_year / BCD_FACTOR / BCD_FACTOR) % BCD_FACTOR) <<  RTC_CALR_CENT_Pos);
  400364:	4b1c      	ldr	r3, [pc, #112]	; (4003d8 <rtc_set_date+0xb4>)
  400366:	fba3 4301 	umull	r4, r3, r3, r1
  40036a:	095b      	lsrs	r3, r3, #5
  40036c:	fba5 6403 	umull	r6, r4, r5, r3
  400370:	08e4      	lsrs	r4, r4, #3
  400372:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  400376:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  40037a:	431a      	orrs	r2, r3
			((ul_year % BCD_FACTOR) << RTC_CALR_YEAR_Pos);
  40037c:	fba5 4301 	umull	r4, r3, r5, r1
  400380:	08db      	lsrs	r3, r3, #3
  400382:	eb03 0483 	add.w	r4, r3, r3, lsl #2
  400386:	eba1 0144 	sub.w	r1, r1, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  40038a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	ul_date |= (((ul_year / BCD_FACTOR) % BCD_FACTOR) <<
  40038e:	fba5 1503 	umull	r1, r5, r5, r3
  400392:	08ed      	lsrs	r5, r5, #3
  400394:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  400398:	eba3 0545 	sub.w	r5, r3, r5, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  40039c:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

	/* Update calendar register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
  4003a0:	6983      	ldr	r3, [r0, #24]
  4003a2:	f013 0f04 	tst.w	r3, #4
  4003a6:	d0fb      	beq.n	4003a0 <rtc_set_date+0x7c>
	p_rtc->RTC_CR |= RTC_CR_UPDCAL;
  4003a8:	6803      	ldr	r3, [r0, #0]
  4003aa:	f043 0302 	orr.w	r3, r3, #2
  4003ae:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  4003b0:	6983      	ldr	r3, [r0, #24]
  4003b2:	f013 0f01 	tst.w	r3, #1
  4003b6:	d0fb      	beq.n	4003b0 <rtc_set_date+0x8c>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  4003b8:	2301      	movs	r3, #1
  4003ba:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_CALR = ul_date;
  4003bc:	60c2      	str	r2, [r0, #12]
	p_rtc->RTC_CR &= (~RTC_CR_UPDCAL);
  4003be:	6803      	ldr	r3, [r0, #0]
  4003c0:	f023 0302 	bic.w	r3, r3, #2
  4003c4:	6003      	str	r3, [r0, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVCAL);
  4003c6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  4003c8:	f000 0002 	and.w	r0, r0, #2
  4003cc:	bc70      	pop	{r4, r5, r6}
  4003ce:	4770      	bx	lr
  4003d0:	cccccccd 	.word	0xcccccccd
  4003d4:	10624dd3 	.word	0x10624dd3
  4003d8:	51eb851f 	.word	0x51eb851f

004003dc <rtc_get_status>:
 *
 * \return Status of the RTC.
 */
uint32_t rtc_get_status(Rtc *p_rtc)
{
	return (p_rtc->RTC_SR);
  4003dc:	6980      	ldr	r0, [r0, #24]
}
  4003de:	4770      	bx	lr

004003e0 <rtc_clear_status>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_clear Some flag bits which will be cleared.
 */
void rtc_clear_status(Rtc *p_rtc, uint32_t ul_clear)
{
	p_rtc->RTC_SCCR = ul_clear;
  4003e0:	61c1      	str	r1, [r0, #28]
  4003e2:	4770      	bx	lr

004003e4 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  4003e4:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  4003e6:	4b07      	ldr	r3, [pc, #28]	; (400404 <spi_enable_clock+0x20>)
  4003e8:	4298      	cmp	r0, r3
  4003ea:	d003      	beq.n	4003f4 <spi_enable_clock+0x10>
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  4003ec:	4b06      	ldr	r3, [pc, #24]	; (400408 <spi_enable_clock+0x24>)
  4003ee:	4298      	cmp	r0, r3
  4003f0:	d004      	beq.n	4003fc <spi_enable_clock+0x18>
  4003f2:	bd08      	pop	{r3, pc}
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4003f4:	2015      	movs	r0, #21
  4003f6:	4b05      	ldr	r3, [pc, #20]	; (40040c <spi_enable_clock+0x28>)
  4003f8:	4798      	blx	r3
  4003fa:	bd08      	pop	{r3, pc}
  4003fc:	202a      	movs	r0, #42	; 0x2a
  4003fe:	4b03      	ldr	r3, [pc, #12]	; (40040c <spi_enable_clock+0x28>)
  400400:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  400402:	e7f6      	b.n	4003f2 <spi_enable_clock+0xe>
  400404:	40008000 	.word	0x40008000
  400408:	40058000 	.word	0x40058000
  40040c:	00401175 	.word	0x00401175

00400410 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  400410:	6843      	ldr	r3, [r0, #4]
  400412:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  400416:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  400418:	6843      	ldr	r3, [r0, #4]
  40041a:	0409      	lsls	r1, r1, #16
  40041c:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  400420:	4319      	orrs	r1, r3
  400422:	6041      	str	r1, [r0, #4]
  400424:	4770      	bx	lr

00400426 <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  400426:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  400428:	f643 2499 	movw	r4, #15001	; 0x3a99
  40042c:	6905      	ldr	r5, [r0, #16]
  40042e:	f015 0f02 	tst.w	r5, #2
  400432:	d103      	bne.n	40043c <spi_write+0x16>
		if (!timeout--) {
  400434:	3c01      	subs	r4, #1
  400436:	d1f9      	bne.n	40042c <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
  400438:	2001      	movs	r0, #1
  40043a:	e00c      	b.n	400456 <spi_write+0x30>
 *
 * \return 1 for Variable mode, 0 for fixed mode.
 */
static inline uint32_t spi_get_peripheral_select_mode(Spi *p_spi)
{
	if (p_spi->SPI_MR & SPI_MR_PS) {
  40043c:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  40043e:	f014 0f02 	tst.w	r4, #2
  400442:	d006      	beq.n	400452 <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  400444:	0412      	lsls	r2, r2, #16
  400446:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  40044a:	4311      	orrs	r1, r2
		if (uc_last) {
  40044c:	b10b      	cbz	r3, 400452 <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
  40044e:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  400452:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  400454:	2000      	movs	r0, #0
}
  400456:	bc30      	pop	{r4, r5}
  400458:	4770      	bx	lr

0040045a <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  40045a:	b932      	cbnz	r2, 40046a <spi_set_clock_polarity+0x10>
  40045c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  400460:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400462:	f023 0301 	bic.w	r3, r3, #1
  400466:	6303      	str	r3, [r0, #48]	; 0x30
  400468:	4770      	bx	lr
  40046a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  40046e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400470:	f043 0301 	orr.w	r3, r3, #1
  400474:	6303      	str	r3, [r0, #48]	; 0x30
  400476:	4770      	bx	lr

00400478 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  400478:	b932      	cbnz	r2, 400488 <spi_set_clock_phase+0x10>
  40047a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  40047e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400480:	f023 0302 	bic.w	r3, r3, #2
  400484:	6303      	str	r3, [r0, #48]	; 0x30
  400486:	4770      	bx	lr
  400488:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  40048c:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40048e:	f043 0302 	orr.w	r3, r3, #2
  400492:	6303      	str	r3, [r0, #48]	; 0x30
  400494:	4770      	bx	lr

00400496 <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  400496:	2a04      	cmp	r2, #4
  400498:	d003      	beq.n	4004a2 <spi_configure_cs_behavior+0xc>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  40049a:	b16a      	cbz	r2, 4004b8 <spi_configure_cs_behavior+0x22>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  40049c:	2a08      	cmp	r2, #8
  40049e:	d016      	beq.n	4004ce <spi_configure_cs_behavior+0x38>
  4004a0:	4770      	bx	lr
  4004a2:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  4004a6:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4004a8:	f023 0308 	bic.w	r3, r3, #8
  4004ac:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  4004ae:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4004b0:	f043 0304 	orr.w	r3, r3, #4
  4004b4:	6303      	str	r3, [r0, #48]	; 0x30
  4004b6:	4770      	bx	lr
  4004b8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  4004bc:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4004be:	f023 0308 	bic.w	r3, r3, #8
  4004c2:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  4004c4:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4004c6:	f023 0304 	bic.w	r3, r3, #4
  4004ca:	6303      	str	r3, [r0, #48]	; 0x30
  4004cc:	4770      	bx	lr
  4004ce:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  4004d2:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4004d4:	f043 0308 	orr.w	r3, r3, #8
  4004d8:	6303      	str	r3, [r0, #48]	; 0x30
	}
}
  4004da:	e7e1      	b.n	4004a0 <spi_configure_cs_behavior+0xa>

004004dc <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  4004dc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  4004e0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4004e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  4004e6:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  4004e8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4004ea:	431a      	orrs	r2, r3
  4004ec:	630a      	str	r2, [r1, #48]	; 0x30
  4004ee:	4770      	bx	lr

004004f0 <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  4004f0:	1e43      	subs	r3, r0, #1
  4004f2:	4419      	add	r1, r3
  4004f4:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  4004f8:	1e43      	subs	r3, r0, #1
  4004fa:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  4004fc:	bf94      	ite	ls
  4004fe:	b200      	sxthls	r0, r0
		return -1;
  400500:	f04f 30ff 	movhi.w	r0, #4294967295
}
  400504:	4770      	bx	lr

00400506 <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
  400506:	b17a      	cbz	r2, 400528 <spi_set_baudrate_div+0x22>
{
  400508:	b410      	push	{r4}
  40050a:	4614      	mov	r4, r2
  40050c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  400510:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  400512:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  400516:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  400518:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  40051a:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  40051e:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  400520:	2000      	movs	r0, #0
}
  400522:	f85d 4b04 	ldr.w	r4, [sp], #4
  400526:	4770      	bx	lr
        return -1;
  400528:	f04f 30ff 	mov.w	r0, #4294967295
  40052c:	4770      	bx	lr

0040052e <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  40052e:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400530:	0189      	lsls	r1, r1, #6
  400532:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  400534:	2402      	movs	r4, #2
  400536:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  400538:	f04f 31ff 	mov.w	r1, #4294967295
  40053c:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  40053e:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  400540:	605a      	str	r2, [r3, #4]
}
  400542:	f85d 4b04 	ldr.w	r4, [sp], #4
  400546:	4770      	bx	lr

00400548 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  400548:	0189      	lsls	r1, r1, #6
  40054a:	2305      	movs	r3, #5
  40054c:	5043      	str	r3, [r0, r1]
  40054e:	4770      	bx	lr

00400550 <tc_stop>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
  400550:	0189      	lsls	r1, r1, #6
  400552:	2302      	movs	r3, #2
  400554:	5043      	str	r3, [r0, r1]
  400556:	4770      	bx	lr

00400558 <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  400558:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  40055c:	61ca      	str	r2, [r1, #28]
  40055e:	4770      	bx	lr

00400560 <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400560:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
  400564:	624a      	str	r2, [r1, #36]	; 0x24
  400566:	4770      	bx	lr

00400568 <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400568:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
  40056c:	6a08      	ldr	r0, [r1, #32]
}
  40056e:	4770      	bx	lr

00400570 <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  400570:	b4f0      	push	{r4, r5, r6, r7}
  400572:	b086      	sub	sp, #24
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400574:	2402      	movs	r4, #2
  400576:	9401      	str	r4, [sp, #4]
  400578:	2408      	movs	r4, #8
  40057a:	9402      	str	r4, [sp, #8]
  40057c:	2420      	movs	r4, #32
  40057e:	9403      	str	r4, [sp, #12]
  400580:	2480      	movs	r4, #128	; 0x80
  400582:	9404      	str	r4, [sp, #16]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  400584:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  400586:	0be4      	lsrs	r4, r4, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400588:	9405      	str	r4, [sp, #20]
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
  40058a:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
  40058e:	d814      	bhi.n	4005ba <tc_find_mck_divisor+0x4a>
  400590:	0c4c      	lsrs	r4, r1, #17
			return 0;
		} else if (ul_freq >= ul_low) {
  400592:	42a0      	cmp	r0, r4
  400594:	d217      	bcs.n	4005c6 <tc_find_mck_divisor+0x56>
  400596:	2501      	movs	r5, #1
		ul_high = ul_mck / divisors[ul_index];
  400598:	af01      	add	r7, sp, #4
  40059a:	f857 4025 	ldr.w	r4, [r7, r5, lsl #2]
  40059e:	fbb1 f4f4 	udiv	r4, r1, r4
		ul_low  = ul_high / TC_DIV_FACTOR;
  4005a2:	0c26      	lsrs	r6, r4, #16
		if (ul_freq > ul_high) {
  4005a4:	4284      	cmp	r4, r0
  4005a6:	d30a      	bcc.n	4005be <tc_find_mck_divisor+0x4e>
		} else if (ul_freq >= ul_low) {
  4005a8:	4286      	cmp	r6, r0
  4005aa:	d90d      	bls.n	4005c8 <tc_find_mck_divisor+0x58>
			ul_index++) {
  4005ac:	3501      	adds	r5, #1
	for (ul_index = 0;
  4005ae:	2d05      	cmp	r5, #5
  4005b0:	d1f3      	bne.n	40059a <tc_find_mck_divisor+0x2a>
			break;
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
  4005b2:	2000      	movs	r0, #0
	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
}
  4005b4:	b006      	add	sp, #24
  4005b6:	bcf0      	pop	{r4, r5, r6, r7}
  4005b8:	4770      	bx	lr
			return 0;
  4005ba:	2000      	movs	r0, #0
  4005bc:	e7fa      	b.n	4005b4 <tc_find_mck_divisor+0x44>
  4005be:	2000      	movs	r0, #0
  4005c0:	e7f8      	b.n	4005b4 <tc_find_mck_divisor+0x44>
	return 1;
  4005c2:	2001      	movs	r0, #1
  4005c4:	e7f6      	b.n	4005b4 <tc_find_mck_divisor+0x44>
	for (ul_index = 0;
  4005c6:	2500      	movs	r5, #0
	if (p_uldiv) {
  4005c8:	b12a      	cbz	r2, 4005d6 <tc_find_mck_divisor+0x66>
		*p_uldiv = divisors[ul_index];
  4005ca:	a906      	add	r1, sp, #24
  4005cc:	eb01 0185 	add.w	r1, r1, r5, lsl #2
  4005d0:	f851 1c14 	ldr.w	r1, [r1, #-20]
  4005d4:	6011      	str	r1, [r2, #0]
	if (p_ultcclks) {
  4005d6:	2b00      	cmp	r3, #0
  4005d8:	d0f3      	beq.n	4005c2 <tc_find_mck_divisor+0x52>
		*p_ultcclks = ul_index;
  4005da:	601d      	str	r5, [r3, #0]
	return 1;
  4005dc:	2001      	movs	r0, #1
  4005de:	e7e9      	b.n	4005b4 <tc_find_mck_divisor+0x44>

004005e0 <gfx_mono_set_framebuffer>:
	gfx_mono_set_framebuffer(framebuffer);
\endcode
 */
void gfx_mono_set_framebuffer(uint8_t *framebuffer)
{
	fbpointer = framebuffer;
  4005e0:	4b01      	ldr	r3, [pc, #4]	; (4005e8 <gfx_mono_set_framebuffer+0x8>)
  4005e2:	6018      	str	r0, [r3, #0]
  4005e4:	4770      	bx	lr
  4005e6:	bf00      	nop
  4005e8:	204009ec 	.word	0x204009ec

004005ec <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
  4005ec:	4b02      	ldr	r3, [pc, #8]	; (4005f8 <gfx_mono_framebuffer_put_byte+0xc>)
  4005ee:	681b      	ldr	r3, [r3, #0]
  4005f0:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
  4005f4:	5442      	strb	r2, [r0, r1]
  4005f6:	4770      	bx	lr
  4005f8:	204009ec 	.word	0x204009ec

004005fc <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
  4005fc:	4b02      	ldr	r3, [pc, #8]	; (400608 <gfx_mono_framebuffer_get_byte+0xc>)
  4005fe:	681b      	ldr	r3, [r3, #0]
  400600:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
}
  400604:	5c40      	ldrb	r0, [r0, r1]
  400606:	4770      	bx	lr
  400608:	204009ec 	.word	0x204009ec

0040060c <gfx_mono_generic_draw_horizontal_line>:
 * \param[in]  length     Length of the line in pixels.
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_horizontal_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
  40060c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t page;
	uint8_t pixelmask;
	uint8_t temp;

	/* Clip line length if too long */
	if (x + length > GFX_MONO_LCD_WIDTH) {
  400610:	1884      	adds	r4, r0, r2
  400612:	2c80      	cmp	r4, #128	; 0x80
  400614:	dd02      	ble.n	40061c <gfx_mono_generic_draw_horizontal_line+0x10>
		length = GFX_MONO_LCD_WIDTH - x;
  400616:	f1c0 0480 	rsb	r4, r0, #128	; 0x80
  40061a:	b2e2      	uxtb	r2, r4
	}

	page = y / 8;
	pixelmask = (1 << (y - (page * 8)));

	if (length == 0) {
  40061c:	b322      	cbz	r2, 400668 <gfx_mono_generic_draw_horizontal_line+0x5c>
	page = y / 8;
  40061e:	08cd      	lsrs	r5, r1, #3
	pixelmask = (1 << (y - (page * 8)));
  400620:	eba1 01c5 	sub.w	r1, r1, r5, lsl #3
  400624:	2601      	movs	r6, #1
  400626:	fa06 f101 	lsl.w	r1, r6, r1
  40062a:	b2ce      	uxtb	r6, r1
		/* Nothing to do. Move along. */
		return;
	}

	switch (color) {
  40062c:	2b01      	cmp	r3, #1
  40062e:	d01d      	beq.n	40066c <gfx_mono_generic_draw_horizontal_line+0x60>
  400630:	2b00      	cmp	r3, #0
  400632:	d035      	beq.n	4006a0 <gfx_mono_generic_draw_horizontal_line+0x94>
  400634:	2b02      	cmp	r3, #2
  400636:	d117      	bne.n	400668 <gfx_mono_generic_draw_horizontal_line+0x5c>
  400638:	3801      	subs	r0, #1
  40063a:	b2c7      	uxtb	r7, r0
  40063c:	19d4      	adds	r4, r2, r7
  40063e:	b2e4      	uxtb	r4, r4
		}
		break;

	case GFX_PIXEL_XOR:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
  400640:	f8df a090 	ldr.w	sl, [pc, #144]	; 4006d4 <gfx_mono_generic_draw_horizontal_line+0xc8>
			temp ^= pixelmask;
			gfx_mono_put_byte(page, x + length, temp);
  400644:	f04f 0900 	mov.w	r9, #0
  400648:	f8df 808c 	ldr.w	r8, [pc, #140]	; 4006d8 <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  40064c:	4621      	mov	r1, r4
  40064e:	4628      	mov	r0, r5
  400650:	47d0      	blx	sl
			temp ^= pixelmask;
  400652:	ea86 0200 	eor.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  400656:	464b      	mov	r3, r9
  400658:	b2d2      	uxtb	r2, r2
  40065a:	4621      	mov	r1, r4
  40065c:	4628      	mov	r0, r5
  40065e:	47c0      	blx	r8
  400660:	3c01      	subs	r4, #1
  400662:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  400664:	42bc      	cmp	r4, r7
  400666:	d1f1      	bne.n	40064c <gfx_mono_generic_draw_horizontal_line+0x40>
  400668:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40066c:	3801      	subs	r0, #1
  40066e:	b2c7      	uxtb	r7, r0
  400670:	19d4      	adds	r4, r2, r7
  400672:	b2e4      	uxtb	r4, r4
			temp = gfx_mono_get_byte(page, x + length);
  400674:	f8df a05c 	ldr.w	sl, [pc, #92]	; 4006d4 <gfx_mono_generic_draw_horizontal_line+0xc8>
			gfx_mono_put_byte(page, x + length, temp);
  400678:	f04f 0900 	mov.w	r9, #0
  40067c:	f8df 8058 	ldr.w	r8, [pc, #88]	; 4006d8 <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  400680:	4621      	mov	r1, r4
  400682:	4628      	mov	r0, r5
  400684:	47d0      	blx	sl
			temp |= pixelmask;
  400686:	ea46 0200 	orr.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  40068a:	464b      	mov	r3, r9
  40068c:	b2d2      	uxtb	r2, r2
  40068e:	4621      	mov	r1, r4
  400690:	4628      	mov	r0, r5
  400692:	47c0      	blx	r8
  400694:	3c01      	subs	r4, #1
  400696:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  400698:	42bc      	cmp	r4, r7
  40069a:	d1f1      	bne.n	400680 <gfx_mono_generic_draw_horizontal_line+0x74>
  40069c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4006a0:	3801      	subs	r0, #1
  4006a2:	b2c7      	uxtb	r7, r0
  4006a4:	19d4      	adds	r4, r2, r7
  4006a6:	b2e4      	uxtb	r4, r4
			temp = gfx_mono_get_byte(page, x + length);
  4006a8:	f8df 8028 	ldr.w	r8, [pc, #40]	; 4006d4 <gfx_mono_generic_draw_horizontal_line+0xc8>
			temp &= ~pixelmask;
  4006ac:	43ce      	mvns	r6, r1
			gfx_mono_put_byte(page, x + length, temp);
  4006ae:	f8df 9028 	ldr.w	r9, [pc, #40]	; 4006d8 <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  4006b2:	4621      	mov	r1, r4
  4006b4:	4628      	mov	r0, r5
  4006b6:	47c0      	blx	r8
			temp &= ~pixelmask;
  4006b8:	ea06 0200 	and.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  4006bc:	2300      	movs	r3, #0
  4006be:	b2d2      	uxtb	r2, r2
  4006c0:	4621      	mov	r1, r4
  4006c2:	4628      	mov	r0, r5
  4006c4:	47c8      	blx	r9
  4006c6:	3c01      	subs	r4, #1
  4006c8:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  4006ca:	42bc      	cmp	r4, r7
  4006cc:	d1f1      	bne.n	4006b2 <gfx_mono_generic_draw_horizontal_line+0xa6>
  4006ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4006d2:	bf00      	nop
  4006d4:	0040090d 	.word	0x0040090d
  4006d8:	00400809 	.word	0x00400809

004006dc <gfx_mono_generic_draw_filled_rect>:
 * \param[in]  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
  4006dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4006e0:	f89d 7020 	ldrb.w	r7, [sp, #32]
	if (height == 0) {
  4006e4:	b18b      	cbz	r3, 40070a <gfx_mono_generic_draw_filled_rect+0x2e>
  4006e6:	461c      	mov	r4, r3
  4006e8:	4690      	mov	r8, r2
  4006ea:	4606      	mov	r6, r0
  4006ec:	1e4d      	subs	r5, r1, #1
  4006ee:	b2ed      	uxtb	r5, r5
  4006f0:	442c      	add	r4, r5
  4006f2:	b2e4      	uxtb	r4, r4
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
  4006f4:	f8df 9018 	ldr.w	r9, [pc, #24]	; 400710 <gfx_mono_generic_draw_filled_rect+0x34>
  4006f8:	463b      	mov	r3, r7
  4006fa:	4642      	mov	r2, r8
  4006fc:	4621      	mov	r1, r4
  4006fe:	4630      	mov	r0, r6
  400700:	47c8      	blx	r9
  400702:	3c01      	subs	r4, #1
  400704:	b2e4      	uxtb	r4, r4
	while (height-- > 0) {
  400706:	42ac      	cmp	r4, r5
  400708:	d1f6      	bne.n	4006f8 <gfx_mono_generic_draw_filled_rect+0x1c>
  40070a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40070e:	bf00      	nop
  400710:	0040060d 	.word	0x0040060d

00400714 <gfx_mono_draw_char>:
 * \param[in] y        Y coordinate on screen.
 * \param[in] font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
  400714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400718:	b083      	sub	sp, #12
  40071a:	4604      	mov	r4, r0
  40071c:	4688      	mov	r8, r1
  40071e:	4691      	mov	r9, r2
  400720:	469b      	mov	fp, r3
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
  400722:	7a5b      	ldrb	r3, [r3, #9]
  400724:	f89b 2008 	ldrb.w	r2, [fp, #8]
  400728:	2100      	movs	r1, #0
  40072a:	9100      	str	r1, [sp, #0]
  40072c:	4649      	mov	r1, r9
  40072e:	4640      	mov	r0, r8
  400730:	4d21      	ldr	r5, [pc, #132]	; (4007b8 <gfx_mono_draw_char+0xa4>)
  400732:	47a8      	blx	r5
			GFX_PIXEL_CLR);

	switch (font->type) {
  400734:	f89b 3000 	ldrb.w	r3, [fp]
  400738:	b113      	cbz	r3, 400740 <gfx_mono_draw_char+0x2c>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
  40073a:	b003      	add	sp, #12
  40073c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
  400740:	f89b 2008 	ldrb.w	r2, [fp, #8]
  400744:	08d3      	lsrs	r3, r2, #3
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
  400746:	f012 0f07 	tst.w	r2, #7
		char_row_size++;
  40074a:	bf18      	it	ne
  40074c:	3301      	addne	r3, #1
	glyph_data_offset = char_row_size * font->height *
  40074e:	f89b a009 	ldrb.w	sl, [fp, #9]
			((uint8_t)ch - font->first_char);
  400752:	f89b 700a 	ldrb.w	r7, [fp, #10]
  400756:	1be7      	subs	r7, r4, r7
	glyph_data_offset = char_row_size * font->height *
  400758:	fb17 f70a 	smulbb	r7, r7, sl
  40075c:	fb17 f703 	smulbb	r7, r7, r3
	glyph_data = font->data.progmem + glyph_data_offset;
  400760:	f8db 3004 	ldr.w	r3, [fp, #4]
  400764:	fa13 f787 	uxtah	r7, r3, r7
  400768:	e01f      	b.n	4007aa <gfx_mono_draw_char+0x96>
			glyph_byte <<= 1;
  40076a:	0064      	lsls	r4, r4, #1
  40076c:	b2e4      	uxtb	r4, r4
  40076e:	3501      	adds	r5, #1
		for (i = 0; i < pixelsToDraw; i++) {
  400770:	b2eb      	uxtb	r3, r5
  400772:	429e      	cmp	r6, r3
  400774:	d910      	bls.n	400798 <gfx_mono_draw_char+0x84>
  400776:	b2eb      	uxtb	r3, r5
  400778:	eb08 0003 	add.w	r0, r8, r3
  40077c:	b2c0      	uxtb	r0, r0
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
  40077e:	f013 0f07 	tst.w	r3, #7
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
  400782:	bf08      	it	eq
  400784:	f817 4b01 	ldrbeq.w	r4, [r7], #1
			if ((glyph_byte & 0x80)) {
  400788:	f014 0f80 	tst.w	r4, #128	; 0x80
  40078c:	d0ed      	beq.n	40076a <gfx_mono_draw_char+0x56>
				gfx_mono_draw_pixel(inc_x, inc_y,
  40078e:	2201      	movs	r2, #1
  400790:	4649      	mov	r1, r9
  400792:	4b0a      	ldr	r3, [pc, #40]	; (4007bc <gfx_mono_draw_char+0xa8>)
  400794:	4798      	blx	r3
  400796:	e7e8      	b.n	40076a <gfx_mono_draw_char+0x56>
		inc_y += 1;
  400798:	f109 0901 	add.w	r9, r9, #1
  40079c:	fa5f f989 	uxtb.w	r9, r9
		rows_left--;
  4007a0:	f10a 3aff 	add.w	sl, sl, #4294967295
	} while (rows_left > 0);
  4007a4:	f01a 0aff 	ands.w	sl, sl, #255	; 0xff
  4007a8:	d0c7      	beq.n	40073a <gfx_mono_draw_char+0x26>
		uint8_t pixelsToDraw = font->width;
  4007aa:	f89b 6008 	ldrb.w	r6, [fp, #8]
		for (i = 0; i < pixelsToDraw; i++) {
  4007ae:	2e00      	cmp	r6, #0
  4007b0:	d0f2      	beq.n	400798 <gfx_mono_draw_char+0x84>
  4007b2:	2500      	movs	r5, #0
  4007b4:	462c      	mov	r4, r5
  4007b6:	e7de      	b.n	400776 <gfx_mono_draw_char+0x62>
  4007b8:	004006dd 	.word	0x004006dd
  4007bc:	004008a9 	.word	0x004008a9

004007c0 <gfx_mono_draw_string>:
 * \param[in] y         Y coordinate on screen.
 * \param[in] font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
  4007c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4007c4:	4604      	mov	r4, r0
  4007c6:	4690      	mov	r8, r2
  4007c8:	461d      	mov	r5, r3
  4007ca:	4689      	mov	r9, r1
			x = start_of_string_position_x;
			y += font->height + 1;
		} else if (*str == '\r') {
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
  4007cc:	4f0d      	ldr	r7, [pc, #52]	; (400804 <gfx_mono_draw_string+0x44>)
			x = start_of_string_position_x;
  4007ce:	460e      	mov	r6, r1
  4007d0:	e008      	b.n	4007e4 <gfx_mono_draw_string+0x24>
			y += font->height + 1;
  4007d2:	7a6a      	ldrb	r2, [r5, #9]
  4007d4:	3201      	adds	r2, #1
  4007d6:	4442      	add	r2, r8
  4007d8:	fa5f f882 	uxtb.w	r8, r2
			x = start_of_string_position_x;
  4007dc:	46b1      	mov	r9, r6
			x += font->width;
		}
	} while (*(++str));
  4007de:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  4007e2:	b16b      	cbz	r3, 400800 <gfx_mono_draw_string+0x40>
		if (*str == '\n') {
  4007e4:	7820      	ldrb	r0, [r4, #0]
  4007e6:	280a      	cmp	r0, #10
  4007e8:	d0f3      	beq.n	4007d2 <gfx_mono_draw_string+0x12>
		} else if (*str == '\r') {
  4007ea:	280d      	cmp	r0, #13
  4007ec:	d0f7      	beq.n	4007de <gfx_mono_draw_string+0x1e>
			gfx_mono_draw_char(*str, x, y, font);
  4007ee:	462b      	mov	r3, r5
  4007f0:	4642      	mov	r2, r8
  4007f2:	4649      	mov	r1, r9
  4007f4:	47b8      	blx	r7
			x += font->width;
  4007f6:	7a2b      	ldrb	r3, [r5, #8]
  4007f8:	4499      	add	r9, r3
  4007fa:	fa5f f989 	uxtb.w	r9, r9
  4007fe:	e7ee      	b.n	4007de <gfx_mono_draw_string+0x1e>
}
  400800:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400804:	00400715 	.word	0x00400715

00400808 <gfx_mono_ssd1306_put_byte>:
	gfx_mono_ssd1306_put_byte(0, 0, 0xFF, false);
\endcode
  */
 void gfx_mono_ssd1306_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data, bool force)
{
  400808:	b570      	push	{r4, r5, r6, lr}
  40080a:	4604      	mov	r4, r0
  40080c:	460d      	mov	r5, r1
  40080e:	4616      	mov	r6, r2
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	if (!force && data == gfx_mono_framebuffer_get_byte(page, column)) {
  400810:	b91b      	cbnz	r3, 40081a <gfx_mono_ssd1306_put_byte+0x12>
  400812:	4b0d      	ldr	r3, [pc, #52]	; (400848 <gfx_mono_ssd1306_put_byte+0x40>)
  400814:	4798      	blx	r3
  400816:	42b0      	cmp	r0, r6
  400818:	d015      	beq.n	400846 <gfx_mono_ssd1306_put_byte+0x3e>
		return;
	}
	gfx_mono_framebuffer_put_byte(page, column, data);
  40081a:	4632      	mov	r2, r6
  40081c:	4629      	mov	r1, r5
  40081e:	4620      	mov	r0, r4
  400820:	4b0a      	ldr	r3, [pc, #40]	; (40084c <gfx_mono_ssd1306_put_byte+0x44>)
  400822:	4798      	blx	r3
 * \param address the page address
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
  400824:	f004 000f 	and.w	r0, r4, #15
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  400828:	f040 00b0 	orr.w	r0, r0, #176	; 0xb0
  40082c:	4c08      	ldr	r4, [pc, #32]	; (400850 <gfx_mono_ssd1306_put_byte+0x48>)
  40082e:	47a0      	blx	r4
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_MSB(address >> 4));
  400830:	f3c5 1002 	ubfx	r0, r5, #4, #3
  400834:	f040 0010 	orr.w	r0, r0, #16
  400838:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_LSB(address & 0x0F));
  40083a:	f005 000f 	and.w	r0, r5, #15
  40083e:	47a0      	blx	r4
#endif

	ssd1306_set_page_address(page);
	ssd1306_set_column_address(column);

	ssd1306_write_data(data);
  400840:	4630      	mov	r0, r6
  400842:	4b04      	ldr	r3, [pc, #16]	; (400854 <gfx_mono_ssd1306_put_byte+0x4c>)
  400844:	4798      	blx	r3
  400846:	bd70      	pop	{r4, r5, r6, pc}
  400848:	004005fd 	.word	0x004005fd
  40084c:	004005ed 	.word	0x004005ed
  400850:	00400919 	.word	0x00400919
  400854:	00400b39 	.word	0x00400b39

00400858 <gfx_mono_ssd1306_init>:
{
  400858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	gfx_mono_set_framebuffer(framebuffer);
  40085c:	480d      	ldr	r0, [pc, #52]	; (400894 <gfx_mono_ssd1306_init+0x3c>)
  40085e:	4b0e      	ldr	r3, [pc, #56]	; (400898 <gfx_mono_ssd1306_init+0x40>)
  400860:	4798      	blx	r3
	ssd1306_init();
  400862:	4b0e      	ldr	r3, [pc, #56]	; (40089c <gfx_mono_ssd1306_init+0x44>)
  400864:	4798      	blx	r3
 */
static inline void ssd1306_set_display_start_line_address(uint8_t address)
{
	// Make sure address is 6 bits
	address &= 0x3F;
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(address));
  400866:	2040      	movs	r0, #64	; 0x40
  400868:	4b0d      	ldr	r3, [pc, #52]	; (4008a0 <gfx_mono_ssd1306_init+0x48>)
  40086a:	4798      	blx	r3
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  40086c:	2500      	movs	r5, #0
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
  40086e:	f04f 0801 	mov.w	r8, #1
  400872:	462f      	mov	r7, r5
  400874:	4e0b      	ldr	r6, [pc, #44]	; (4008a4 <gfx_mono_ssd1306_init+0x4c>)
{
  400876:	2400      	movs	r4, #0
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
  400878:	4643      	mov	r3, r8
  40087a:	463a      	mov	r2, r7
  40087c:	b2e1      	uxtb	r1, r4
  40087e:	4628      	mov	r0, r5
  400880:	47b0      	blx	r6
  400882:	3401      	adds	r4, #1
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
  400884:	2c80      	cmp	r4, #128	; 0x80
  400886:	d1f7      	bne.n	400878 <gfx_mono_ssd1306_init+0x20>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  400888:	3501      	adds	r5, #1
  40088a:	b2ed      	uxtb	r5, r5
  40088c:	2d04      	cmp	r5, #4
  40088e:	d1f2      	bne.n	400876 <gfx_mono_ssd1306_init+0x1e>
  400890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400894:	204009f0 	.word	0x204009f0
  400898:	004005e1 	.word	0x004005e1
  40089c:	00400959 	.word	0x00400959
  4008a0:	00400919 	.word	0x00400919
  4008a4:	00400809 	.word	0x00400809

004008a8 <gfx_mono_ssd1306_draw_pixel>:
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
  4008a8:	09c3      	lsrs	r3, r0, #7
  4008aa:	d12a      	bne.n	400902 <gfx_mono_ssd1306_draw_pixel+0x5a>
  4008ac:	291f      	cmp	r1, #31
  4008ae:	d828      	bhi.n	400902 <gfx_mono_ssd1306_draw_pixel+0x5a>
{
  4008b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4008b4:	4614      	mov	r4, r2
  4008b6:	4605      	mov	r5, r0
	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
  4008b8:	08ce      	lsrs	r6, r1, #3
	pixel_mask = (1 << (y - (page * 8)));
  4008ba:	eba1 01c6 	sub.w	r1, r1, r6, lsl #3
  4008be:	2201      	movs	r2, #1
  4008c0:	fa02 f701 	lsl.w	r7, r2, r1
  4008c4:	fa5f f887 	uxtb.w	r8, r7
\endcode
 */
uint8_t gfx_mono_ssd1306_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
  4008c8:	4601      	mov	r1, r0
  4008ca:	4630      	mov	r0, r6
  4008cc:	4b0d      	ldr	r3, [pc, #52]	; (400904 <gfx_mono_ssd1306_draw_pixel+0x5c>)
  4008ce:	4798      	blx	r3
  4008d0:	4602      	mov	r2, r0
	switch (color) {
  4008d2:	2c01      	cmp	r4, #1
  4008d4:	d009      	beq.n	4008ea <gfx_mono_ssd1306_draw_pixel+0x42>
  4008d6:	b164      	cbz	r4, 4008f2 <gfx_mono_ssd1306_draw_pixel+0x4a>
  4008d8:	2c02      	cmp	r4, #2
  4008da:	d00e      	beq.n	4008fa <gfx_mono_ssd1306_draw_pixel+0x52>
	gfx_mono_put_byte(page, x, pixel_value);
  4008dc:	2300      	movs	r3, #0
  4008de:	4629      	mov	r1, r5
  4008e0:	4630      	mov	r0, r6
  4008e2:	4c09      	ldr	r4, [pc, #36]	; (400908 <gfx_mono_ssd1306_draw_pixel+0x60>)
  4008e4:	47a0      	blx	r4
  4008e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pixel_value |= pixel_mask;
  4008ea:	ea48 0200 	orr.w	r2, r8, r0
  4008ee:	b2d2      	uxtb	r2, r2
		break;
  4008f0:	e7f4      	b.n	4008dc <gfx_mono_ssd1306_draw_pixel+0x34>
		pixel_value &= ~pixel_mask;
  4008f2:	ea20 0207 	bic.w	r2, r0, r7
  4008f6:	b2d2      	uxtb	r2, r2
		break;
  4008f8:	e7f0      	b.n	4008dc <gfx_mono_ssd1306_draw_pixel+0x34>
		pixel_value ^= pixel_mask;
  4008fa:	ea88 0200 	eor.w	r2, r8, r0
  4008fe:	b2d2      	uxtb	r2, r2
		break;
  400900:	e7ec      	b.n	4008dc <gfx_mono_ssd1306_draw_pixel+0x34>
  400902:	4770      	bx	lr
  400904:	004005fd 	.word	0x004005fd
  400908:	00400809 	.word	0x00400809

0040090c <gfx_mono_ssd1306_get_byte>:
{
  40090c:	b508      	push	{r3, lr}
	return gfx_mono_framebuffer_get_byte(page, column);
  40090e:	4b01      	ldr	r3, [pc, #4]	; (400914 <gfx_mono_ssd1306_get_byte+0x8>)
  400910:	4798      	blx	r3
	ssd1306_set_column_address(column);

	return ssd1306_read_data();

#endif
}
  400912:	bd08      	pop	{r3, pc}
  400914:	004005fd 	.word	0x004005fd

00400918 <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
void ssd1306_write_command(uint8_t command)
{
  400918:	b538      	push	{r3, r4, r5, lr}
  40091a:	4605      	mov	r5, r0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40091c:	2208      	movs	r2, #8
  40091e:	4b09      	ldr	r3, [pc, #36]	; (400944 <ssd1306_write_command+0x2c>)
  400920:	635a      	str	r2, [r3, #52]	; 0x34
	ioport_set_pin_level(SSD1306_DC_PIN, false);
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  400922:	4c09      	ldr	r4, [pc, #36]	; (400948 <ssd1306_write_command+0x30>)
  400924:	2101      	movs	r1, #1
  400926:	4620      	mov	r0, r4
  400928:	4b08      	ldr	r3, [pc, #32]	; (40094c <ssd1306_write_command+0x34>)
  40092a:	4798      	blx	r3
	spi_write(SPI0, command, 1, 1);
  40092c:	2301      	movs	r3, #1
  40092e:	461a      	mov	r2, r3
  400930:	4629      	mov	r1, r5
  400932:	4620      	mov	r0, r4
  400934:	4c06      	ldr	r4, [pc, #24]	; (400950 <ssd1306_write_command+0x38>)
  400936:	47a0      	blx	r4
	delay_us(10);
  400938:	f44f 70fd 	mov.w	r0, #506	; 0x1fa
  40093c:	4b05      	ldr	r3, [pc, #20]	; (400954 <ssd1306_write_command+0x3c>)
  40093e:	4798      	blx	r3
  400940:	bd38      	pop	{r3, r4, r5, pc}
  400942:	bf00      	nop
  400944:	400e1000 	.word	0x400e1000
  400948:	40008000 	.word	0x40008000
  40094c:	00400411 	.word	0x00400411
  400950:	00400427 	.word	0x00400427
  400954:	20400001 	.word	0x20400001

00400958 <ssd1306_init>:
{
  400958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40095c:	4d66      	ldr	r5, [pc, #408]	; (400af8 <ssd1306_init+0x1a0>)
  40095e:	f44f 3600 	mov.w	r6, #131072	; 0x20000
  400962:	612e      	str	r6, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400964:	f8c5 60a0 	str.w	r6, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400968:	4b64      	ldr	r3, [pc, #400]	; (400afc <ssd1306_init+0x1a4>)
  40096a:	2708      	movs	r7, #8
  40096c:	611f      	str	r7, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40096e:	f8c3 70a0 	str.w	r7, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400972:	666e      	str	r6, [r5, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400974:	f8c5 6090 	str.w	r6, [r5, #144]	; 0x90
		base->PIO_MDDR = mask;
  400978:	656e      	str	r6, [r5, #84]	; 0x54
		base->PIO_IFDR = mask;
  40097a:	626e      	str	r6, [r5, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40097c:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400980:	6f2a      	ldr	r2, [r5, #112]	; 0x70
  400982:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  400986:	672a      	str	r2, [r5, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400988:	6f6a      	ldr	r2, [r5, #116]	; 0x74
  40098a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  40098e:	676a      	str	r2, [r5, #116]	; 0x74
		base->PIO_PUER = mask;
  400990:	665f      	str	r7, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400992:	f8c3 7090 	str.w	r7, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400996:	655f      	str	r7, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400998:	625f      	str	r7, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40099a:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40099e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4009a0:	f022 0208 	bic.w	r2, r2, #8
  4009a4:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4009a6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4009a8:	f022 0208 	bic.w	r2, r2, #8
  4009ac:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  4009ae:	601f      	str	r7, [r3, #0]
  4009b0:	602e      	str	r6, [r5, #0]
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4009b2:	631f      	str	r7, [r3, #48]	; 0x30
  4009b4:	632e      	str	r6, [r5, #48]	; 0x30
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  4009b6:	f8df 817c 	ldr.w	r8, [pc, #380]	; 400b34 <ssd1306_init+0x1dc>
  4009ba:	2300      	movs	r3, #0
  4009bc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  4009c0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4009c4:	4640      	mov	r0, r8
  4009c6:	4c4e      	ldr	r4, [pc, #312]	; (400b00 <ssd1306_init+0x1a8>)
  4009c8:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  4009ca:	2300      	movs	r3, #0
  4009cc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4009d0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4009d4:	4640      	mov	r0, r8
  4009d6:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  4009d8:	2300      	movs	r3, #0
  4009da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  4009de:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4009e2:	4640      	mov	r0, r8
  4009e4:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  4009e6:	2300      	movs	r3, #0
  4009e8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  4009ec:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4009f0:	4640      	mov	r0, r8
  4009f2:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  4009f4:	2300      	movs	r3, #0
  4009f6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4009fa:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4009fe:	4640      	mov	r0, r8
  400a00:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  400a02:	2300      	movs	r3, #0
  400a04:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400a08:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400a0c:	4640      	mov	r0, r8
  400a0e:	47a0      	blx	r4
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  400a10:	4c3c      	ldr	r4, [pc, #240]	; (400b04 <ssd1306_init+0x1ac>)
  400a12:	f04f 0902 	mov.w	r9, #2
  400a16:	f8c4 9000 	str.w	r9, [r4]
	p_spi->SPI_CR = SPI_CR_SWRST;
  400a1a:	f04f 0880 	mov.w	r8, #128	; 0x80
  400a1e:	f8c4 8000 	str.w	r8, [r4]
	p_spi->SPI_MR |= SPI_MR_MSTR;
  400a22:	6863      	ldr	r3, [r4, #4]
  400a24:	f043 0301 	orr.w	r3, r3, #1
  400a28:	6063      	str	r3, [r4, #4]
		spi_configure_cs_behavior(SPI0, 1, SPI_CS_KEEP_LOW);
  400a2a:	463a      	mov	r2, r7
  400a2c:	2101      	movs	r1, #1
  400a2e:	4620      	mov	r0, r4
  400a30:	4b35      	ldr	r3, [pc, #212]	; (400b08 <ssd1306_init+0x1b0>)
  400a32:	4798      	blx	r3
		spi_set_clock_polarity(SPI0, 1, 0);
  400a34:	2200      	movs	r2, #0
  400a36:	2101      	movs	r1, #1
  400a38:	4620      	mov	r0, r4
  400a3a:	4b34      	ldr	r3, [pc, #208]	; (400b0c <ssd1306_init+0x1b4>)
  400a3c:	4798      	blx	r3
		spi_set_clock_phase(SPI0, 1, 0);
  400a3e:	2200      	movs	r2, #0
  400a40:	2101      	movs	r1, #1
  400a42:	4620      	mov	r0, r4
  400a44:	4b32      	ldr	r3, [pc, #200]	; (400b10 <ssd1306_init+0x1b8>)
  400a46:	4798      	blx	r3
	p_spi->SPI_MR &= (~SPI_MR_PS);
  400a48:	6863      	ldr	r3, [r4, #4]
  400a4a:	f023 0302 	bic.w	r3, r3, #2
  400a4e:	6063      	str	r3, [r4, #4]
		spi_set_bits_per_transfer(SPI0, 1, SPI_CSR_BITS_8_BIT);
  400a50:	2200      	movs	r2, #0
  400a52:	2101      	movs	r1, #1
  400a54:	4620      	mov	r0, r4
  400a56:	4b2f      	ldr	r3, [pc, #188]	; (400b14 <ssd1306_init+0x1bc>)
  400a58:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  400a5a:	6863      	ldr	r3, [r4, #4]
  400a5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  400a60:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  400a62:	6863      	ldr	r3, [r4, #4]
  400a64:	f043 0310 	orr.w	r3, r3, #16
  400a68:	6063      	str	r3, [r4, #4]
		int div = spi_calc_baudrate_div(2000000, sysclk_get_peripheral_hz());
  400a6a:	492b      	ldr	r1, [pc, #172]	; (400b18 <ssd1306_init+0x1c0>)
  400a6c:	482b      	ldr	r0, [pc, #172]	; (400b1c <ssd1306_init+0x1c4>)
  400a6e:	4b2c      	ldr	r3, [pc, #176]	; (400b20 <ssd1306_init+0x1c8>)
  400a70:	4798      	blx	r3
		spi_set_baudrate_div(SPI0,1, div);
  400a72:	b2c2      	uxtb	r2, r0
  400a74:	2101      	movs	r1, #1
  400a76:	4620      	mov	r0, r4
  400a78:	4b2a      	ldr	r3, [pc, #168]	; (400b24 <ssd1306_init+0x1cc>)
  400a7a:	4798      	blx	r3
		spi_enable_clock(SPI0);
  400a7c:	4620      	mov	r0, r4
  400a7e:	4b2a      	ldr	r3, [pc, #168]	; (400b28 <ssd1306_init+0x1d0>)
  400a80:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
  400a82:	2301      	movs	r3, #1
  400a84:	6023      	str	r3, [r4, #0]
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400a86:	636e      	str	r6, [r5, #52]	; 0x34
	delay_cycles(delay_10us); // At lest 10us
  400a88:	f640 30b8 	movw	r0, #3000	; 0xbb8
  400a8c:	4c27      	ldr	r4, [pc, #156]	; (400b2c <ssd1306_init+0x1d4>)
  400a8e:	47a0      	blx	r4
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400a90:	632e      	str	r6, [r5, #48]	; 0x30
	delay_cycles(delay_10us); // At lest 10us
  400a92:	f640 30b8 	movw	r0, #3000	; 0xbb8
  400a96:	47a0      	blx	r4
  400a98:	632e      	str	r6, [r5, #48]	; 0x30
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO);
  400a9a:	20a8      	movs	r0, #168	; 0xa8
  400a9c:	4c24      	ldr	r4, [pc, #144]	; (400b30 <ssd1306_init+0x1d8>)
  400a9e:	47a0      	blx	r4
	ssd1306_write_command(0x1F);
  400aa0:	201f      	movs	r0, #31
  400aa2:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET);
  400aa4:	20d3      	movs	r0, #211	; 0xd3
  400aa6:	47a0      	blx	r4
	ssd1306_write_command(0x00);
  400aa8:	2000      	movs	r0, #0
  400aaa:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(0x00));
  400aac:	2040      	movs	r0, #64	; 0x40
  400aae:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL127_SEG0);
  400ab0:	20a1      	movs	r0, #161	; 0xa1
  400ab2:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN);
  400ab4:	20c8      	movs	r0, #200	; 0xc8
  400ab6:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS);
  400ab8:	20da      	movs	r0, #218	; 0xda
  400aba:	47a0      	blx	r4
	ssd1306_write_command(0x02);
  400abc:	4648      	mov	r0, r9
  400abe:	47a0      	blx	r4
 *
 * \retval contrast the contrast value written to the OLED controller
 */
static inline uint8_t ssd1306_set_contrast(uint8_t contrast)
{
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0);
  400ac0:	2081      	movs	r0, #129	; 0x81
  400ac2:	47a0      	blx	r4
	ssd1306_write_command(contrast);
  400ac4:	208f      	movs	r0, #143	; 0x8f
  400ac6:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON);
  400ac8:	20a4      	movs	r0, #164	; 0xa4
  400aca:	47a0      	blx	r4
 * This function will disable invert on all pixels on the OLED
 *
 */
static inline void ssd1306_display_invert_disable(void)
{
	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY);
  400acc:	20a6      	movs	r0, #166	; 0xa6
  400ace:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO);
  400ad0:	20d5      	movs	r0, #213	; 0xd5
  400ad2:	47a0      	blx	r4
	ssd1306_write_command(0x80);
  400ad4:	4640      	mov	r0, r8
  400ad6:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING);
  400ad8:	208d      	movs	r0, #141	; 0x8d
  400ada:	47a0      	blx	r4
	ssd1306_write_command(0x14);
  400adc:	2014      	movs	r0, #20
  400ade:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL);
  400ae0:	20db      	movs	r0, #219	; 0xdb
  400ae2:	47a0      	blx	r4
	ssd1306_write_command(0x40); // Default => 0x20 (0.77*VCC)
  400ae4:	2040      	movs	r0, #64	; 0x40
  400ae6:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD);
  400ae8:	20d9      	movs	r0, #217	; 0xd9
  400aea:	47a0      	blx	r4
	ssd1306_write_command(0xF1);
  400aec:	20f1      	movs	r0, #241	; 0xf1
  400aee:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
  400af0:	20af      	movs	r0, #175	; 0xaf
  400af2:	47a0      	blx	r4
  400af4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400af8:	400e1200 	.word	0x400e1200
  400afc:	400e1000 	.word	0x400e1000
  400b00:	00400e55 	.word	0x00400e55
  400b04:	40008000 	.word	0x40008000
  400b08:	00400497 	.word	0x00400497
  400b0c:	0040045b 	.word	0x0040045b
  400b10:	00400479 	.word	0x00400479
  400b14:	004004dd 	.word	0x004004dd
  400b18:	08f0d180 	.word	0x08f0d180
  400b1c:	001e8480 	.word	0x001e8480
  400b20:	004004f1 	.word	0x004004f1
  400b24:	00400507 	.word	0x00400507
  400b28:	004003e5 	.word	0x004003e5
  400b2c:	20400001 	.word	0x20400001
  400b30:	00400919 	.word	0x00400919
  400b34:	400e1400 	.word	0x400e1400

00400b38 <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
void ssd1306_write_data(uint8_t data)
{
  400b38:	b538      	push	{r3, r4, r5, lr}
  400b3a:	4605      	mov	r5, r0
  400b3c:	2208      	movs	r2, #8
  400b3e:	4b09      	ldr	r3, [pc, #36]	; (400b64 <ssd1306_write_data+0x2c>)
  400b40:	631a      	str	r2, [r3, #48]	; 0x30
	ioport_set_pin_level(SSD1306_DC_PIN, true);
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  400b42:	4c09      	ldr	r4, [pc, #36]	; (400b68 <ssd1306_write_data+0x30>)
  400b44:	2101      	movs	r1, #1
  400b46:	4620      	mov	r0, r4
  400b48:	4b08      	ldr	r3, [pc, #32]	; (400b6c <ssd1306_write_data+0x34>)
  400b4a:	4798      	blx	r3
	spi_write(SPI0, data, 1, 1);
  400b4c:	2301      	movs	r3, #1
  400b4e:	461a      	mov	r2, r3
  400b50:	4629      	mov	r1, r5
  400b52:	4620      	mov	r0, r4
  400b54:	4c06      	ldr	r4, [pc, #24]	; (400b70 <ssd1306_write_data+0x38>)
  400b56:	47a0      	blx	r4
	delay_us(10);
  400b58:	f44f 70fd 	mov.w	r0, #506	; 0x1fa
  400b5c:	4b05      	ldr	r3, [pc, #20]	; (400b74 <ssd1306_write_data+0x3c>)
  400b5e:	4798      	blx	r3
  400b60:	bd38      	pop	{r3, r4, r5, pc}
  400b62:	bf00      	nop
  400b64:	400e1000 	.word	0x400e1000
  400b68:	40008000 	.word	0x40008000
  400b6c:	00400411 	.word	0x00400411
  400b70:	00400427 	.word	0x00400427
  400b74:	20400001 	.word	0x20400001

00400b78 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400b78:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400b7a:	4810      	ldr	r0, [pc, #64]	; (400bbc <sysclk_init+0x44>)
  400b7c:	4b10      	ldr	r3, [pc, #64]	; (400bc0 <sysclk_init+0x48>)
  400b7e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400b80:	213e      	movs	r1, #62	; 0x3e
  400b82:	2000      	movs	r0, #0
  400b84:	4b0f      	ldr	r3, [pc, #60]	; (400bc4 <sysclk_init+0x4c>)
  400b86:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400b88:	4c0f      	ldr	r4, [pc, #60]	; (400bc8 <sysclk_init+0x50>)
  400b8a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400b8c:	2800      	cmp	r0, #0
  400b8e:	d0fc      	beq.n	400b8a <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400b90:	4b0e      	ldr	r3, [pc, #56]	; (400bcc <sysclk_init+0x54>)
  400b92:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400b94:	4a0e      	ldr	r2, [pc, #56]	; (400bd0 <sysclk_init+0x58>)
  400b96:	4b0f      	ldr	r3, [pc, #60]	; (400bd4 <sysclk_init+0x5c>)
  400b98:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  400b9a:	4c0f      	ldr	r4, [pc, #60]	; (400bd8 <sysclk_init+0x60>)
  400b9c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400b9e:	2800      	cmp	r0, #0
  400ba0:	d0fc      	beq.n	400b9c <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  400ba2:	2002      	movs	r0, #2
  400ba4:	4b0d      	ldr	r3, [pc, #52]	; (400bdc <sysclk_init+0x64>)
  400ba6:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400ba8:	2000      	movs	r0, #0
  400baa:	4b0d      	ldr	r3, [pc, #52]	; (400be0 <sysclk_init+0x68>)
  400bac:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400bae:	4b0d      	ldr	r3, [pc, #52]	; (400be4 <sysclk_init+0x6c>)
  400bb0:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400bb2:	4802      	ldr	r0, [pc, #8]	; (400bbc <sysclk_init+0x44>)
  400bb4:	4b02      	ldr	r3, [pc, #8]	; (400bc0 <sysclk_init+0x48>)
  400bb6:	4798      	blx	r3
  400bb8:	bd10      	pop	{r4, pc}
  400bba:	bf00      	nop
  400bbc:	11e1a300 	.word	0x11e1a300
  400bc0:	00401665 	.word	0x00401665
  400bc4:	004010f1 	.word	0x004010f1
  400bc8:	00401145 	.word	0x00401145
  400bcc:	00401155 	.word	0x00401155
  400bd0:	20183f01 	.word	0x20183f01
  400bd4:	400e0600 	.word	0x400e0600
  400bd8:	00401165 	.word	0x00401165
  400bdc:	00401055 	.word	0x00401055
  400be0:	0040108d 	.word	0x0040108d
  400be4:	00401559 	.word	0x00401559

00400be8 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  400be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400bea:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400bee:	4b48      	ldr	r3, [pc, #288]	; (400d10 <board_init+0x128>)
  400bf0:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  400bf2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400bf6:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  400bfa:	4b46      	ldr	r3, [pc, #280]	; (400d14 <board_init+0x12c>)
  400bfc:	2200      	movs	r2, #0
  400bfe:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  400c02:	695a      	ldr	r2, [r3, #20]
  400c04:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  400c08:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  400c0a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400c0e:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  400c12:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  400c16:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  400c1a:	f007 0007 	and.w	r0, r7, #7
  400c1e:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  400c20:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  400c24:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  400c28:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  400c2c:	f3bf 8f4f 	dsb	sy
  400c30:	f04f 34ff 	mov.w	r4, #4294967295
  400c34:	fa04 fc00 	lsl.w	ip, r4, r0
  400c38:	fa06 f000 	lsl.w	r0, r6, r0
  400c3c:	fa04 f40e 	lsl.w	r4, r4, lr
  400c40:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  400c44:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  400c46:	463a      	mov	r2, r7
  400c48:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  400c4a:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  400c4e:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  400c52:	3a01      	subs	r2, #1
  400c54:	4423      	add	r3, r4
  400c56:	f1b2 3fff 	cmp.w	r2, #4294967295
  400c5a:	d1f6      	bne.n	400c4a <board_init+0x62>
        } while(sets--);
  400c5c:	3e01      	subs	r6, #1
  400c5e:	4460      	add	r0, ip
  400c60:	f1b6 3fff 	cmp.w	r6, #4294967295
  400c64:	d1ef      	bne.n	400c46 <board_init+0x5e>
  400c66:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  400c6a:	4b2a      	ldr	r3, [pc, #168]	; (400d14 <board_init+0x12c>)
  400c6c:	695a      	ldr	r2, [r3, #20]
  400c6e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  400c72:	615a      	str	r2, [r3, #20]
  400c74:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400c78:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400c7c:	4a26      	ldr	r2, [pc, #152]	; (400d18 <board_init+0x130>)
  400c7e:	4927      	ldr	r1, [pc, #156]	; (400d1c <board_init+0x134>)
  400c80:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400c82:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  400c86:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  400c88:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400c8c:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400c90:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  400c94:	f022 0201 	bic.w	r2, r2, #1
  400c98:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  400c9c:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  400ca0:	f022 0201 	bic.w	r2, r2, #1
  400ca4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  400ca8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400cac:	f3bf 8f6f 	isb	sy
  400cb0:	200a      	movs	r0, #10
  400cb2:	4c1b      	ldr	r4, [pc, #108]	; (400d20 <board_init+0x138>)
  400cb4:	47a0      	blx	r4
  400cb6:	200b      	movs	r0, #11
  400cb8:	47a0      	blx	r4
  400cba:	200c      	movs	r0, #12
  400cbc:	47a0      	blx	r4
  400cbe:	2010      	movs	r0, #16
  400cc0:	47a0      	blx	r4
  400cc2:	2011      	movs	r0, #17
  400cc4:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400cc6:	4b17      	ldr	r3, [pc, #92]	; (400d24 <board_init+0x13c>)
  400cc8:	f44f 7280 	mov.w	r2, #256	; 0x100
  400ccc:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400cce:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400cd2:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400cd4:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  400cd8:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400cdc:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400cde:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400ce2:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400ce4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400ce8:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  400cea:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  400cec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  400cf0:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400cf2:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400cf6:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400cf8:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400cfa:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400cfe:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400d00:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400d04:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  400d08:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  400d0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400d0e:	bf00      	nop
  400d10:	400e1850 	.word	0x400e1850
  400d14:	e000ed00 	.word	0xe000ed00
  400d18:	400e0c00 	.word	0x400e0c00
  400d1c:	5a00080c 	.word	0x5a00080c
  400d20:	00401175 	.word	0x00401175
  400d24:	400e1200 	.word	0x400e1200

00400d28 <pio_set_debounce_filter>:
void pio_set_debounce_filter(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_cut_off)
{
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
  400d28:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
  400d2c:	0053      	lsls	r3, r2, #1
  400d2e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400d32:	fbb2 f2f3 	udiv	r2, r2, r3
  400d36:	3a01      	subs	r2, #1
  400d38:	f3c2 020d 	ubfx	r2, r2, #0, #14
  400d3c:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
  400d40:	4770      	bx	lr

00400d42 <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  400d42:	6301      	str	r1, [r0, #48]	; 0x30
  400d44:	4770      	bx	lr

00400d46 <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  400d46:	6341      	str	r1, [r0, #52]	; 0x34
  400d48:	4770      	bx	lr

00400d4a <pio_get>:
uint32_t pio_get(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
	uint32_t ul_reg;

	if ((ul_type == PIO_OUTPUT_0) || (ul_type == PIO_OUTPUT_1)) {
  400d4a:	f021 6100 	bic.w	r1, r1, #134217728	; 0x8000000
  400d4e:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400d52:	d105      	bne.n	400d60 <pio_get+0x16>
		ul_reg = p_pio->PIO_ODSR;
  400d54:	6b83      	ldr	r3, [r0, #56]	; 0x38
	} else {
		ul_reg = p_pio->PIO_PDSR;
	}

	if ((ul_reg & ul_mask) == 0) {
  400d56:	4213      	tst	r3, r2
		return 0;
	} else {
		return 1;
	}
}
  400d58:	bf14      	ite	ne
  400d5a:	2001      	movne	r0, #1
  400d5c:	2000      	moveq	r0, #0
  400d5e:	4770      	bx	lr
		ul_reg = p_pio->PIO_PDSR;
  400d60:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
  400d62:	e7f8      	b.n	400d56 <pio_get+0xc>

00400d64 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400d64:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400d66:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400d6a:	d03a      	beq.n	400de2 <pio_set_peripheral+0x7e>
  400d6c:	d813      	bhi.n	400d96 <pio_set_peripheral+0x32>
  400d6e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400d72:	d025      	beq.n	400dc0 <pio_set_peripheral+0x5c>
  400d74:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400d78:	d10a      	bne.n	400d90 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400d7a:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400d7c:	4313      	orrs	r3, r2
  400d7e:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400d80:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400d82:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400d84:	400b      	ands	r3, r1
  400d86:	ea23 0302 	bic.w	r3, r3, r2
  400d8a:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400d8c:	6042      	str	r2, [r0, #4]
  400d8e:	4770      	bx	lr
	switch (ul_type) {
  400d90:	2900      	cmp	r1, #0
  400d92:	d1fb      	bne.n	400d8c <pio_set_peripheral+0x28>
  400d94:	4770      	bx	lr
  400d96:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400d9a:	d021      	beq.n	400de0 <pio_set_peripheral+0x7c>
  400d9c:	d809      	bhi.n	400db2 <pio_set_peripheral+0x4e>
  400d9e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400da2:	d1f3      	bne.n	400d8c <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  400da4:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400da6:	4313      	orrs	r3, r2
  400da8:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400daa:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400dac:	4313      	orrs	r3, r2
  400dae:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400db0:	e7ec      	b.n	400d8c <pio_set_peripheral+0x28>
	switch (ul_type) {
  400db2:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400db6:	d013      	beq.n	400de0 <pio_set_peripheral+0x7c>
  400db8:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400dbc:	d010      	beq.n	400de0 <pio_set_peripheral+0x7c>
  400dbe:	e7e5      	b.n	400d8c <pio_set_peripheral+0x28>
{
  400dc0:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  400dc2:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400dc4:	6f04      	ldr	r4, [r0, #112]	; 0x70
  400dc6:	43d3      	mvns	r3, r2
  400dc8:	4021      	ands	r1, r4
  400dca:	461c      	mov	r4, r3
  400dcc:	4019      	ands	r1, r3
  400dce:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400dd0:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400dd2:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400dd4:	400b      	ands	r3, r1
  400dd6:	4023      	ands	r3, r4
  400dd8:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  400dda:	6042      	str	r2, [r0, #4]
}
  400ddc:	f85d 4b04 	ldr.w	r4, [sp], #4
  400de0:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  400de2:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400de4:	6f01      	ldr	r1, [r0, #112]	; 0x70
  400de6:	400b      	ands	r3, r1
  400de8:	ea23 0302 	bic.w	r3, r3, r2
  400dec:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400dee:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400df0:	4313      	orrs	r3, r2
  400df2:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400df4:	e7ca      	b.n	400d8c <pio_set_peripheral+0x28>

00400df6 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400df6:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400df8:	f012 0f01 	tst.w	r2, #1
  400dfc:	d10d      	bne.n	400e1a <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  400dfe:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400e00:	f012 0f0a 	tst.w	r2, #10
  400e04:	d00b      	beq.n	400e1e <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  400e06:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  400e08:	f012 0f02 	tst.w	r2, #2
  400e0c:	d109      	bne.n	400e22 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  400e0e:	f012 0f08 	tst.w	r2, #8
  400e12:	d008      	beq.n	400e26 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  400e14:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  400e18:	e005      	b.n	400e26 <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  400e1a:	6641      	str	r1, [r0, #100]	; 0x64
  400e1c:	e7f0      	b.n	400e00 <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  400e1e:	6241      	str	r1, [r0, #36]	; 0x24
  400e20:	e7f2      	b.n	400e08 <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  400e22:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  400e26:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  400e28:	6001      	str	r1, [r0, #0]
  400e2a:	4770      	bx	lr

00400e2c <pio_set_output>:
{
  400e2c:	b410      	push	{r4}
  400e2e:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  400e30:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400e32:	b94c      	cbnz	r4, 400e48 <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  400e34:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  400e36:	b14b      	cbz	r3, 400e4c <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  400e38:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  400e3a:	b94a      	cbnz	r2, 400e50 <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  400e3c:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  400e3e:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  400e40:	6001      	str	r1, [r0, #0]
}
  400e42:	f85d 4b04 	ldr.w	r4, [sp], #4
  400e46:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  400e48:	6641      	str	r1, [r0, #100]	; 0x64
  400e4a:	e7f4      	b.n	400e36 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  400e4c:	6541      	str	r1, [r0, #84]	; 0x54
  400e4e:	e7f4      	b.n	400e3a <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  400e50:	6301      	str	r1, [r0, #48]	; 0x30
  400e52:	e7f4      	b.n	400e3e <pio_set_output+0x12>

00400e54 <pio_configure>:
{
  400e54:	b570      	push	{r4, r5, r6, lr}
  400e56:	b082      	sub	sp, #8
  400e58:	4605      	mov	r5, r0
  400e5a:	4616      	mov	r6, r2
  400e5c:	461c      	mov	r4, r3
	switch (ul_type) {
  400e5e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400e62:	d014      	beq.n	400e8e <pio_configure+0x3a>
  400e64:	d90a      	bls.n	400e7c <pio_configure+0x28>
  400e66:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400e6a:	d024      	beq.n	400eb6 <pio_configure+0x62>
  400e6c:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400e70:	d021      	beq.n	400eb6 <pio_configure+0x62>
  400e72:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400e76:	d017      	beq.n	400ea8 <pio_configure+0x54>
		return 0;
  400e78:	2000      	movs	r0, #0
  400e7a:	e01a      	b.n	400eb2 <pio_configure+0x5e>
	switch (ul_type) {
  400e7c:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400e80:	d005      	beq.n	400e8e <pio_configure+0x3a>
  400e82:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400e86:	d002      	beq.n	400e8e <pio_configure+0x3a>
  400e88:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400e8c:	d1f4      	bne.n	400e78 <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  400e8e:	4632      	mov	r2, r6
  400e90:	4628      	mov	r0, r5
  400e92:	4b11      	ldr	r3, [pc, #68]	; (400ed8 <pio_configure+0x84>)
  400e94:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400e96:	f014 0f01 	tst.w	r4, #1
  400e9a:	d102      	bne.n	400ea2 <pio_configure+0x4e>
		p_pio->PIO_PUDR = ul_mask;
  400e9c:	662e      	str	r6, [r5, #96]	; 0x60
	return 1;
  400e9e:	2001      	movs	r0, #1
  400ea0:	e007      	b.n	400eb2 <pio_configure+0x5e>
		p_pio->PIO_PUER = ul_mask;
  400ea2:	666e      	str	r6, [r5, #100]	; 0x64
	return 1;
  400ea4:	2001      	movs	r0, #1
  400ea6:	e004      	b.n	400eb2 <pio_configure+0x5e>
		pio_set_input(p_pio, ul_mask, ul_attribute);
  400ea8:	461a      	mov	r2, r3
  400eaa:	4631      	mov	r1, r6
  400eac:	4b0b      	ldr	r3, [pc, #44]	; (400edc <pio_configure+0x88>)
  400eae:	4798      	blx	r3
	return 1;
  400eb0:	2001      	movs	r0, #1
}
  400eb2:	b002      	add	sp, #8
  400eb4:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  400eb6:	f004 0301 	and.w	r3, r4, #1
  400eba:	9300      	str	r3, [sp, #0]
  400ebc:	f3c4 0380 	ubfx	r3, r4, #2, #1
  400ec0:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400ec4:	bf14      	ite	ne
  400ec6:	2200      	movne	r2, #0
  400ec8:	2201      	moveq	r2, #1
  400eca:	4631      	mov	r1, r6
  400ecc:	4628      	mov	r0, r5
  400ece:	4c04      	ldr	r4, [pc, #16]	; (400ee0 <pio_configure+0x8c>)
  400ed0:	47a0      	blx	r4
	return 1;
  400ed2:	2001      	movs	r0, #1
		break;
  400ed4:	e7ed      	b.n	400eb2 <pio_configure+0x5e>
  400ed6:	bf00      	nop
  400ed8:	00400d65 	.word	0x00400d65
  400edc:	00400df7 	.word	0x00400df7
  400ee0:	00400e2d 	.word	0x00400e2d

00400ee4 <pio_get_output_data_status>:
	if ((p_pio->PIO_ODSR & ul_mask) == 0) {
  400ee4:	6b83      	ldr	r3, [r0, #56]	; 0x38
  400ee6:	420b      	tst	r3, r1
}
  400ee8:	bf14      	ite	ne
  400eea:	2001      	movne	r0, #1
  400eec:	2000      	moveq	r0, #0
  400eee:	4770      	bx	lr

00400ef0 <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
  400ef0:	f012 0f10 	tst.w	r2, #16
  400ef4:	d012      	beq.n	400f1c <pio_configure_interrupt+0x2c>
		p_pio->PIO_AIMER = ul_mask;
  400ef6:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
  400efa:	f012 0f20 	tst.w	r2, #32
  400efe:	d007      	beq.n	400f10 <pio_configure_interrupt+0x20>
			p_pio->PIO_REHLSR = ul_mask;
  400f00:	f8c0 10d4 	str.w	r1, [r0, #212]	; 0xd4
		if (ul_attr & PIO_IT_EDGE) {
  400f04:	f012 0f40 	tst.w	r2, #64	; 0x40
  400f08:	d005      	beq.n	400f16 <pio_configure_interrupt+0x26>
			p_pio->PIO_ESR = ul_mask;
  400f0a:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
  400f0e:	4770      	bx	lr
			p_pio->PIO_FELLSR = ul_mask;
  400f10:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
  400f14:	e7f6      	b.n	400f04 <pio_configure_interrupt+0x14>
			p_pio->PIO_LSR = ul_mask;
  400f16:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
  400f1a:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
  400f1c:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  400f20:	4770      	bx	lr

00400f22 <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
  400f22:	6401      	str	r1, [r0, #64]	; 0x40
  400f24:	4770      	bx	lr

00400f26 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400f26:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400f28:	4770      	bx	lr

00400f2a <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400f2a:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400f2c:	4770      	bx	lr
	...

00400f30 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400f30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400f34:	4604      	mov	r4, r0
  400f36:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400f38:	4b0e      	ldr	r3, [pc, #56]	; (400f74 <pio_handler_process+0x44>)
  400f3a:	4798      	blx	r3
  400f3c:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400f3e:	4620      	mov	r0, r4
  400f40:	4b0d      	ldr	r3, [pc, #52]	; (400f78 <pio_handler_process+0x48>)
  400f42:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400f44:	4005      	ands	r5, r0
  400f46:	d013      	beq.n	400f70 <pio_handler_process+0x40>
  400f48:	4c0c      	ldr	r4, [pc, #48]	; (400f7c <pio_handler_process+0x4c>)
  400f4a:	f104 0660 	add.w	r6, r4, #96	; 0x60
  400f4e:	e003      	b.n	400f58 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400f50:	42b4      	cmp	r4, r6
  400f52:	d00d      	beq.n	400f70 <pio_handler_process+0x40>
  400f54:	3410      	adds	r4, #16
		while (status != 0) {
  400f56:	b15d      	cbz	r5, 400f70 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  400f58:	6820      	ldr	r0, [r4, #0]
  400f5a:	4540      	cmp	r0, r8
  400f5c:	d1f8      	bne.n	400f50 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400f5e:	6861      	ldr	r1, [r4, #4]
  400f60:	4229      	tst	r1, r5
  400f62:	d0f5      	beq.n	400f50 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400f64:	68e3      	ldr	r3, [r4, #12]
  400f66:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  400f68:	6863      	ldr	r3, [r4, #4]
  400f6a:	ea25 0503 	bic.w	r5, r5, r3
  400f6e:	e7ef      	b.n	400f50 <pio_handler_process+0x20>
  400f70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400f74:	00400f27 	.word	0x00400f27
  400f78:	00400f2b 	.word	0x00400f2b
  400f7c:	20400bf0 	.word	0x20400bf0

00400f80 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  400f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  400f82:	4c18      	ldr	r4, [pc, #96]	; (400fe4 <pio_handler_set+0x64>)
  400f84:	6826      	ldr	r6, [r4, #0]
  400f86:	2e06      	cmp	r6, #6
  400f88:	d82a      	bhi.n	400fe0 <pio_handler_set+0x60>
  400f8a:	f04f 0c00 	mov.w	ip, #0
  400f8e:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400f90:	4f15      	ldr	r7, [pc, #84]	; (400fe8 <pio_handler_set+0x68>)
  400f92:	e004      	b.n	400f9e <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  400f94:	3401      	adds	r4, #1
  400f96:	b2e4      	uxtb	r4, r4
  400f98:	46a4      	mov	ip, r4
  400f9a:	42a6      	cmp	r6, r4
  400f9c:	d309      	bcc.n	400fb2 <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
  400f9e:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400fa0:	0125      	lsls	r5, r4, #4
  400fa2:	597d      	ldr	r5, [r7, r5]
  400fa4:	428d      	cmp	r5, r1
  400fa6:	d1f5      	bne.n	400f94 <pio_handler_set+0x14>
  400fa8:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  400fac:	686d      	ldr	r5, [r5, #4]
  400fae:	4295      	cmp	r5, r2
  400fb0:	d1f0      	bne.n	400f94 <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  400fb2:	4d0d      	ldr	r5, [pc, #52]	; (400fe8 <pio_handler_set+0x68>)
  400fb4:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  400fb8:	eb05 040e 	add.w	r4, r5, lr
  400fbc:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  400fc0:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  400fc2:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  400fc4:	9906      	ldr	r1, [sp, #24]
  400fc6:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  400fc8:	3601      	adds	r6, #1
  400fca:	4566      	cmp	r6, ip
  400fcc:	d005      	beq.n	400fda <pio_handler_set+0x5a>
  400fce:	4611      	mov	r1, r2
		gs_ul_nb_sources++;
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  400fd0:	461a      	mov	r2, r3
  400fd2:	4b06      	ldr	r3, [pc, #24]	; (400fec <pio_handler_set+0x6c>)
  400fd4:	4798      	blx	r3

	return 0;
  400fd6:	2000      	movs	r0, #0
  400fd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		gs_ul_nb_sources++;
  400fda:	4902      	ldr	r1, [pc, #8]	; (400fe4 <pio_handler_set+0x64>)
  400fdc:	600e      	str	r6, [r1, #0]
  400fde:	e7f6      	b.n	400fce <pio_handler_set+0x4e>
		return 1;
  400fe0:	2001      	movs	r0, #1
}
  400fe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400fe4:	20400c60 	.word	0x20400c60
  400fe8:	20400bf0 	.word	0x20400bf0
  400fec:	00400ef1 	.word	0x00400ef1

00400ff0 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400ff0:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  400ff2:	210a      	movs	r1, #10
  400ff4:	4801      	ldr	r0, [pc, #4]	; (400ffc <PIOA_Handler+0xc>)
  400ff6:	4b02      	ldr	r3, [pc, #8]	; (401000 <PIOA_Handler+0x10>)
  400ff8:	4798      	blx	r3
  400ffa:	bd08      	pop	{r3, pc}
  400ffc:	400e0e00 	.word	0x400e0e00
  401000:	00400f31 	.word	0x00400f31

00401004 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  401004:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  401006:	210b      	movs	r1, #11
  401008:	4801      	ldr	r0, [pc, #4]	; (401010 <PIOB_Handler+0xc>)
  40100a:	4b02      	ldr	r3, [pc, #8]	; (401014 <PIOB_Handler+0x10>)
  40100c:	4798      	blx	r3
  40100e:	bd08      	pop	{r3, pc}
  401010:	400e1000 	.word	0x400e1000
  401014:	00400f31 	.word	0x00400f31

00401018 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  401018:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  40101a:	210c      	movs	r1, #12
  40101c:	4801      	ldr	r0, [pc, #4]	; (401024 <PIOC_Handler+0xc>)
  40101e:	4b02      	ldr	r3, [pc, #8]	; (401028 <PIOC_Handler+0x10>)
  401020:	4798      	blx	r3
  401022:	bd08      	pop	{r3, pc}
  401024:	400e1200 	.word	0x400e1200
  401028:	00400f31 	.word	0x00400f31

0040102c <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  40102c:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  40102e:	2110      	movs	r1, #16
  401030:	4801      	ldr	r0, [pc, #4]	; (401038 <PIOD_Handler+0xc>)
  401032:	4b02      	ldr	r3, [pc, #8]	; (40103c <PIOD_Handler+0x10>)
  401034:	4798      	blx	r3
  401036:	bd08      	pop	{r3, pc}
  401038:	400e1400 	.word	0x400e1400
  40103c:	00400f31 	.word	0x00400f31

00401040 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  401040:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  401042:	2111      	movs	r1, #17
  401044:	4801      	ldr	r0, [pc, #4]	; (40104c <PIOE_Handler+0xc>)
  401046:	4b02      	ldr	r3, [pc, #8]	; (401050 <PIOE_Handler+0x10>)
  401048:	4798      	blx	r3
  40104a:	bd08      	pop	{r3, pc}
  40104c:	400e1600 	.word	0x400e1600
  401050:	00400f31 	.word	0x00400f31

00401054 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  401054:	2803      	cmp	r0, #3
  401056:	d011      	beq.n	40107c <pmc_mck_set_division+0x28>
  401058:	2804      	cmp	r0, #4
  40105a:	d012      	beq.n	401082 <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  40105c:	2802      	cmp	r0, #2
  40105e:	bf0c      	ite	eq
  401060:	f44f 7180 	moveq.w	r1, #256	; 0x100
  401064:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  401066:	4a08      	ldr	r2, [pc, #32]	; (401088 <pmc_mck_set_division+0x34>)
  401068:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40106a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  40106e:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  401070:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  401072:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401074:	f013 0f08 	tst.w	r3, #8
  401078:	d0fb      	beq.n	401072 <pmc_mck_set_division+0x1e>
}
  40107a:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  40107c:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  401080:	e7f1      	b.n	401066 <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  401082:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  401086:	e7ee      	b.n	401066 <pmc_mck_set_division+0x12>
  401088:	400e0600 	.word	0x400e0600

0040108c <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  40108c:	4a17      	ldr	r2, [pc, #92]	; (4010ec <pmc_switch_mck_to_pllack+0x60>)
  40108e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401090:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  401094:	4318      	orrs	r0, r3
  401096:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401098:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40109a:	f013 0f08 	tst.w	r3, #8
  40109e:	d10a      	bne.n	4010b6 <pmc_switch_mck_to_pllack+0x2a>
  4010a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4010a4:	4911      	ldr	r1, [pc, #68]	; (4010ec <pmc_switch_mck_to_pllack+0x60>)
  4010a6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4010a8:	f012 0f08 	tst.w	r2, #8
  4010ac:	d103      	bne.n	4010b6 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4010ae:	3b01      	subs	r3, #1
  4010b0:	d1f9      	bne.n	4010a6 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  4010b2:	2001      	movs	r0, #1
  4010b4:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4010b6:	4a0d      	ldr	r2, [pc, #52]	; (4010ec <pmc_switch_mck_to_pllack+0x60>)
  4010b8:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4010ba:	f023 0303 	bic.w	r3, r3, #3
  4010be:	f043 0302 	orr.w	r3, r3, #2
  4010c2:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4010c4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4010c6:	f013 0f08 	tst.w	r3, #8
  4010ca:	d10a      	bne.n	4010e2 <pmc_switch_mck_to_pllack+0x56>
  4010cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4010d0:	4906      	ldr	r1, [pc, #24]	; (4010ec <pmc_switch_mck_to_pllack+0x60>)
  4010d2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4010d4:	f012 0f08 	tst.w	r2, #8
  4010d8:	d105      	bne.n	4010e6 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4010da:	3b01      	subs	r3, #1
  4010dc:	d1f9      	bne.n	4010d2 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  4010de:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4010e0:	4770      	bx	lr
	return 0;
  4010e2:	2000      	movs	r0, #0
  4010e4:	4770      	bx	lr
  4010e6:	2000      	movs	r0, #0
  4010e8:	4770      	bx	lr
  4010ea:	bf00      	nop
  4010ec:	400e0600 	.word	0x400e0600

004010f0 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4010f0:	b9a0      	cbnz	r0, 40111c <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4010f2:	480e      	ldr	r0, [pc, #56]	; (40112c <pmc_switch_mainck_to_xtal+0x3c>)
  4010f4:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4010f6:	0209      	lsls	r1, r1, #8
  4010f8:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4010fa:	4a0d      	ldr	r2, [pc, #52]	; (401130 <pmc_switch_mainck_to_xtal+0x40>)
  4010fc:	401a      	ands	r2, r3
  4010fe:	4b0d      	ldr	r3, [pc, #52]	; (401134 <pmc_switch_mainck_to_xtal+0x44>)
  401100:	4313      	orrs	r3, r2
  401102:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401104:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  401106:	4602      	mov	r2, r0
  401108:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40110a:	f013 0f01 	tst.w	r3, #1
  40110e:	d0fb      	beq.n	401108 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  401110:	4a06      	ldr	r2, [pc, #24]	; (40112c <pmc_switch_mainck_to_xtal+0x3c>)
  401112:	6a11      	ldr	r1, [r2, #32]
  401114:	4b08      	ldr	r3, [pc, #32]	; (401138 <pmc_switch_mainck_to_xtal+0x48>)
  401116:	430b      	orrs	r3, r1
  401118:	6213      	str	r3, [r2, #32]
  40111a:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40111c:	4903      	ldr	r1, [pc, #12]	; (40112c <pmc_switch_mainck_to_xtal+0x3c>)
  40111e:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  401120:	4a06      	ldr	r2, [pc, #24]	; (40113c <pmc_switch_mainck_to_xtal+0x4c>)
  401122:	401a      	ands	r2, r3
  401124:	4b06      	ldr	r3, [pc, #24]	; (401140 <pmc_switch_mainck_to_xtal+0x50>)
  401126:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401128:	620b      	str	r3, [r1, #32]
  40112a:	4770      	bx	lr
  40112c:	400e0600 	.word	0x400e0600
  401130:	ffc8fffc 	.word	0xffc8fffc
  401134:	00370001 	.word	0x00370001
  401138:	01370000 	.word	0x01370000
  40113c:	fec8fffc 	.word	0xfec8fffc
  401140:	01370002 	.word	0x01370002

00401144 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  401144:	4b02      	ldr	r3, [pc, #8]	; (401150 <pmc_osc_is_ready_mainck+0xc>)
  401146:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401148:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  40114c:	4770      	bx	lr
  40114e:	bf00      	nop
  401150:	400e0600 	.word	0x400e0600

00401154 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  401154:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401158:	4b01      	ldr	r3, [pc, #4]	; (401160 <pmc_disable_pllack+0xc>)
  40115a:	629a      	str	r2, [r3, #40]	; 0x28
  40115c:	4770      	bx	lr
  40115e:	bf00      	nop
  401160:	400e0600 	.word	0x400e0600

00401164 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  401164:	4b02      	ldr	r3, [pc, #8]	; (401170 <pmc_is_locked_pllack+0xc>)
  401166:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401168:	f000 0002 	and.w	r0, r0, #2
  40116c:	4770      	bx	lr
  40116e:	bf00      	nop
  401170:	400e0600 	.word	0x400e0600

00401174 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  401174:	283f      	cmp	r0, #63	; 0x3f
  401176:	d81e      	bhi.n	4011b6 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  401178:	281f      	cmp	r0, #31
  40117a:	d80c      	bhi.n	401196 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  40117c:	4b11      	ldr	r3, [pc, #68]	; (4011c4 <pmc_enable_periph_clk+0x50>)
  40117e:	699a      	ldr	r2, [r3, #24]
  401180:	2301      	movs	r3, #1
  401182:	4083      	lsls	r3, r0
  401184:	4393      	bics	r3, r2
  401186:	d018      	beq.n	4011ba <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  401188:	2301      	movs	r3, #1
  40118a:	fa03 f000 	lsl.w	r0, r3, r0
  40118e:	4b0d      	ldr	r3, [pc, #52]	; (4011c4 <pmc_enable_periph_clk+0x50>)
  401190:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  401192:	2000      	movs	r0, #0
  401194:	4770      	bx	lr
		ul_id -= 32;
  401196:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  401198:	4b0a      	ldr	r3, [pc, #40]	; (4011c4 <pmc_enable_periph_clk+0x50>)
  40119a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  40119e:	2301      	movs	r3, #1
  4011a0:	4083      	lsls	r3, r0
  4011a2:	4393      	bics	r3, r2
  4011a4:	d00b      	beq.n	4011be <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  4011a6:	2301      	movs	r3, #1
  4011a8:	fa03 f000 	lsl.w	r0, r3, r0
  4011ac:	4b05      	ldr	r3, [pc, #20]	; (4011c4 <pmc_enable_periph_clk+0x50>)
  4011ae:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  4011b2:	2000      	movs	r0, #0
  4011b4:	4770      	bx	lr
		return 1;
  4011b6:	2001      	movs	r0, #1
  4011b8:	4770      	bx	lr
	return 0;
  4011ba:	2000      	movs	r0, #0
  4011bc:	4770      	bx	lr
  4011be:	2000      	movs	r0, #0
}
  4011c0:	4770      	bx	lr
  4011c2:	bf00      	nop
  4011c4:	400e0600 	.word	0x400e0600

004011c8 <pmc_set_flash_in_wait_mode>:
 *
 * \param ul_flash_state PMC_WAIT_MODE_FLASH_STANDBY flash in standby mode,
 * PMC_WAIT_MODE_FLASH_DEEP_POWERDOWN flash in deep power down mode.
 */
void pmc_set_flash_in_wait_mode(uint32_t ul_flash_state)
{
  4011c8:	4770      	bx	lr
	...

004011cc <pmc_enable_waitmode>:
void pmc_enable_waitmode(void)
{
	uint32_t i;

	/* Flash in wait mode */
	i = PMC->PMC_FSMR;
  4011cc:	4a10      	ldr	r2, [pc, #64]	; (401210 <pmc_enable_waitmode+0x44>)
  4011ce:	6f13      	ldr	r3, [r2, #112]	; 0x70
	i &= ~PMC_FSMR_FLPM_Msk;
  4011d0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
#if !(SAMV71 || SAMV70 || SAME70 || SAMS70)
	i |= ul_flash_in_wait_mode;
#else
	i |= PMC_WAIT_MODE_FLASH_IDLE;
  4011d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
#endif
	PMC->PMC_FSMR = i;
  4011d8:	6713      	str	r3, [r2, #112]	; 0x70

	/* Set the WAITMODE bit = 1 */
	PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_WAITMODE;
  4011da:	6a11      	ldr	r1, [r2, #32]
  4011dc:	4b0d      	ldr	r3, [pc, #52]	; (401214 <pmc_enable_waitmode+0x48>)
  4011de:	430b      	orrs	r3, r1
  4011e0:	6213      	str	r3, [r2, #32]

	/* Waiting for Master Clock Ready MCKRDY = 1 */
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4011e2:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4011e4:	f013 0f08 	tst.w	r3, #8
  4011e8:	d0fb      	beq.n	4011e2 <pmc_enable_waitmode+0x16>
  4011ea:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
  __ASM volatile ("nop");
  4011ee:	bf00      	nop

	/* Waiting for MOSCRCEN bit cleared is strongly recommended
	 * to ensure that the core will not execute undesired instructions
	 */
	for (i = 0; i < 500; i++) {
  4011f0:	3b01      	subs	r3, #1
  4011f2:	d1fc      	bne.n	4011ee <pmc_enable_waitmode+0x22>
		__NOP();
	}
	while (!(PMC->CKGR_MOR & CKGR_MOR_MOSCRCEN));
  4011f4:	4a06      	ldr	r2, [pc, #24]	; (401210 <pmc_enable_waitmode+0x44>)
  4011f6:	6a13      	ldr	r3, [r2, #32]
  4011f8:	f013 0f08 	tst.w	r3, #8
  4011fc:	d0fb      	beq.n	4011f6 <pmc_enable_waitmode+0x2a>

#if (!SAMG)
	/* Restore Flash in idle mode */
	i = PMC->PMC_FSMR;
  4011fe:	4a04      	ldr	r2, [pc, #16]	; (401210 <pmc_enable_waitmode+0x44>)
  401200:	6f13      	ldr	r3, [r2, #112]	; 0x70
	i &= ~PMC_FSMR_FLPM_Msk;
  401202:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
	i |= PMC_WAIT_MODE_FLASH_IDLE;
  401206:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
	PMC->PMC_FSMR = i;
  40120a:	6713      	str	r3, [r2, #112]	; 0x70
  40120c:	4770      	bx	lr
  40120e:	bf00      	nop
  401210:	400e0600 	.word	0x400e0600
  401214:	00370004 	.word	0x00370004

00401218 <pmc_sleep>:
static volatile bool b_is_sleep_clock_used = false;
/** Callback invoked once when clocks are restored */
static pmc_callback_wakeup_clocks_restored_t callback_clocks_restored = NULL;

void pmc_sleep(int sleep_mode)
{
  401218:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	switch (sleep_mode) {
  40121c:	1e43      	subs	r3, r0, #1
  40121e:	2b04      	cmp	r3, #4
  401220:	f200 8107 	bhi.w	401432 <pmc_sleep+0x21a>
  401224:	e8df f013 	tbh	[pc, r3, lsl #1]
  401228:	00050005 	.word	0x00050005
  40122c:	00150015 	.word	0x00150015
  401230:	00f6      	.short	0x00f6
	case SAM_PM_SMODE_SLEEP_WFI:
	case SAM_PM_SMODE_SLEEP_WFE:
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG || SAMV71 || SAMV70 || SAMS70 || SAME70)
		SCB->SCR &= (uint32_t)~SCR_SLEEPDEEP;
  401232:	4a81      	ldr	r2, [pc, #516]	; (401438 <pmc_sleep+0x220>)
  401234:	6913      	ldr	r3, [r2, #16]
  401236:	f023 0304 	bic.w	r3, r3, #4
  40123a:	6113      	str	r3, [r2, #16]
		cpu_irq_enable();
  40123c:	2201      	movs	r2, #1
  40123e:	4b7f      	ldr	r3, [pc, #508]	; (40143c <pmc_sleep+0x224>)
  401240:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  401242:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  401246:	b662      	cpsie	i
  __ASM volatile ("dsb");
  401248:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("wfi");
  40124c:	bf30      	wfi
  40124e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401252:	4604      	mov	r4, r0
#if defined(EFC1)
		uint32_t fmr1;
#endif
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG || SAMV71 || SAMV70 || SAMS70 || SAME70)
		(sleep_mode == SAM_PM_SMODE_WAIT_FAST) ?
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_STANDBY) :
  401254:	2803      	cmp	r0, #3
  401256:	bf0c      	ite	eq
  401258:	2000      	moveq	r0, #0
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_DEEP_POWERDOWN);
  40125a:	f44f 1000 	movne.w	r0, #2097152	; 0x200000
  40125e:	4b78      	ldr	r3, [pc, #480]	; (401440 <pmc_sleep+0x228>)
  401260:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  401262:	b672      	cpsid	i
  __ASM volatile ("dmb");
  401264:	f3bf 8f5f 	dmb	sy
#endif
		cpu_irq_disable();
  401268:	2200      	movs	r2, #0
  40126a:	4b74      	ldr	r3, [pc, #464]	; (40143c <pmc_sleep+0x224>)
  40126c:	701a      	strb	r2, [r3, #0]
		b_is_sleep_clock_used = true;
  40126e:	2201      	movs	r2, #1
  401270:	4b74      	ldr	r3, [pc, #464]	; (401444 <pmc_sleep+0x22c>)
  401272:	701a      	strb	r2, [r3, #0]
	uint32_t mor  = PMC->CKGR_MOR;
  401274:	4b74      	ldr	r3, [pc, #464]	; (401448 <pmc_sleep+0x230>)
  401276:	6a1f      	ldr	r7, [r3, #32]
	uint32_t mckr = PMC->PMC_MCKR;
  401278:	6b1d      	ldr	r5, [r3, #48]	; 0x30
	uint32_t fmr  = EFC0->EEFC_FMR;
  40127a:	4a74      	ldr	r2, [pc, #464]	; (40144c <pmc_sleep+0x234>)
  40127c:	f8d2 8000 	ldr.w	r8, [r2]
		*p_pll0_setting = PMC->CKGR_PLLAR;
  401280:	6a9e      	ldr	r6, [r3, #40]	; 0x28
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor | CKGR_MOR_MOSCRCEN;
  401282:	4a73      	ldr	r2, [pc, #460]	; (401450 <pmc_sleep+0x238>)
  401284:	433a      	orrs	r2, r7
  401286:	621a      	str	r2, [r3, #32]
	if ((mckr & PMC_MCKR_CSS_Msk) > PMC_MCKR_CSS_MAIN_CLK) {
  401288:	f005 0903 	and.w	r9, r5, #3
  40128c:	f1b9 0f01 	cmp.w	r9, #1
  401290:	f240 8089 	bls.w	4013a6 <pmc_sleep+0x18e>
		mckr = (mckr & (~PMC_MCKR_CSS_Msk)) | PMC_MCKR_CSS_MAIN_CLK;
  401294:	f025 0103 	bic.w	r1, r5, #3
  401298:	f041 0101 	orr.w	r1, r1, #1
		PMC->PMC_MCKR = mckr;
  40129c:	6319      	str	r1, [r3, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40129e:	461a      	mov	r2, r3
  4012a0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4012a2:	f013 0f08 	tst.w	r3, #8
  4012a6:	d0fb      	beq.n	4012a0 <pmc_sleep+0x88>
	if (mckr & PMC_MCKR_PRES_Msk) {
  4012a8:	f011 0f70 	tst.w	r1, #112	; 0x70
  4012ac:	d008      	beq.n	4012c0 <pmc_sleep+0xa8>
		mckr = (mckr & (~PMC_MCKR_PRES_Msk));
  4012ae:	f021 0170 	bic.w	r1, r1, #112	; 0x70
		PMC->PMC_MCKR = mckr;
  4012b2:	4b65      	ldr	r3, [pc, #404]	; (401448 <pmc_sleep+0x230>)
  4012b4:	6319      	str	r1, [r3, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4012b6:	461a      	mov	r2, r3
  4012b8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4012ba:	f013 0f08 	tst.w	r3, #8
  4012be:	d0fb      	beq.n	4012b8 <pmc_sleep+0xa0>
	pmc_disable_pllack();
  4012c0:	4b64      	ldr	r3, [pc, #400]	; (401454 <pmc_sleep+0x23c>)
  4012c2:	4798      	blx	r3
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  4012c4:	4a60      	ldr	r2, [pc, #384]	; (401448 <pmc_sleep+0x230>)
  4012c6:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4012c8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  4012cc:	d0fb      	beq.n	4012c6 <pmc_sleep+0xae>
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  4012ce:	4a5e      	ldr	r2, [pc, #376]	; (401448 <pmc_sleep+0x230>)
  4012d0:	6a11      	ldr	r1, [r2, #32]
  4012d2:	4b61      	ldr	r3, [pc, #388]	; (401458 <pmc_sleep+0x240>)
  4012d4:	400b      	ands	r3, r1
  4012d6:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4012da:	6213      	str	r3, [r2, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  4012dc:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4012de:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  4012e2:	d0fb      	beq.n	4012dc <pmc_sleep+0xc4>
	EFC0->EEFC_FMR = fmr & (~EEFC_FMR_FWS_Msk);
  4012e4:	f428 6370 	bic.w	r3, r8, #3840	; 0xf00
  4012e8:	4a58      	ldr	r2, [pc, #352]	; (40144c <pmc_sleep+0x234>)
  4012ea:	6013      	str	r3, [r2, #0]
	if (disable_xtal) {
  4012ec:	2c04      	cmp	r4, #4
  4012ee:	d05c      	beq.n	4013aa <pmc_sleep+0x192>
				&fmr1,
#endif
				(sleep_mode == SAM_PM_SMODE_WAIT));

		/* Enter wait mode */
		cpu_irq_enable();
  4012f0:	4c52      	ldr	r4, [pc, #328]	; (40143c <pmc_sleep+0x224>)
  4012f2:	2301      	movs	r3, #1
  4012f4:	7023      	strb	r3, [r4, #0]
  4012f6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4012fa:	b662      	cpsie	i

		pmc_enable_waitmode();
  4012fc:	4b57      	ldr	r3, [pc, #348]	; (40145c <pmc_sleep+0x244>)
  4012fe:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
  401300:	b672      	cpsid	i
  401302:	f3bf 8f5f 	dmb	sy

		cpu_irq_disable();
  401306:	2300      	movs	r3, #0
  401308:	7023      	strb	r3, [r4, #0]
	if (CKGR_MOR_MOSCXTBY == (osc_setting & CKGR_MOR_MOSCXTBY)) {
  40130a:	f017 0f02 	tst.w	r7, #2
  40130e:	d055      	beq.n	4013bc <pmc_sleep+0x1a4>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401310:	4a4d      	ldr	r2, [pc, #308]	; (401448 <pmc_sleep+0x230>)
  401312:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  401314:	4952      	ldr	r1, [pc, #328]	; (401460 <pmc_sleep+0x248>)
  401316:	4019      	ands	r1, r3
  401318:	4b52      	ldr	r3, [pc, #328]	; (401464 <pmc_sleep+0x24c>)
  40131a:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40131c:	6213      	str	r3, [r2, #32]
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  40131e:	6a11      	ldr	r1, [r2, #32]
				| CKGR_MOR_KEY_PASSWD;
  401320:	4b51      	ldr	r3, [pc, #324]	; (401468 <pmc_sleep+0x250>)
  401322:	400b      	ands	r3, r1
  401324:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  401328:	6213      	str	r3, [r2, #32]
	if (pll0_setting & CKGR_PLLAR_MULA_Msk) {
  40132a:	4b50      	ldr	r3, [pc, #320]	; (40146c <pmc_sleep+0x254>)
  40132c:	4033      	ands	r3, r6
  40132e:	2b00      	cmp	r3, #0
  401330:	d06e      	beq.n	401410 <pmc_sleep+0x1f8>
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | pll0_setting;
  401332:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
  401336:	4b44      	ldr	r3, [pc, #272]	; (401448 <pmc_sleep+0x230>)
  401338:	629e      	str	r6, [r3, #40]	; 0x28
		pll_sr |= PMC_SR_LOCKA;
  40133a:	2102      	movs	r1, #2
	switch(mck_setting & PMC_MCKR_CSS_Msk) {
  40133c:	f1b9 0f02 	cmp.w	r9, #2
  401340:	d104      	bne.n	40134c <pmc_sleep+0x134>
		while (!(PMC->PMC_SR & PMC_SR_LOCKA));
  401342:	4a41      	ldr	r2, [pc, #260]	; (401448 <pmc_sleep+0x230>)
  401344:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401346:	f013 0f02 	tst.w	r3, #2
  40134a:	d0fb      	beq.n	401344 <pmc_sleep+0x12c>
	mckr = PMC->PMC_MCKR;
  40134c:	4a3e      	ldr	r2, [pc, #248]	; (401448 <pmc_sleep+0x230>)
  40134e:	6b13      	ldr	r3, [r2, #48]	; 0x30
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
  401350:	f023 0370 	bic.w	r3, r3, #112	; 0x70
		| (mck_setting & PMC_MCKR_PRES_Msk);
  401354:	f005 0070 	and.w	r0, r5, #112	; 0x70
  401358:	4303      	orrs	r3, r0
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
  40135a:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40135c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40135e:	f013 0f08 	tst.w	r3, #8
  401362:	d0fb      	beq.n	40135c <pmc_sleep+0x144>
	EFC0->EEFC_FMR = fmr_setting;
  401364:	4b39      	ldr	r3, [pc, #228]	; (40144c <pmc_sleep+0x234>)
  401366:	f8c3 8000 	str.w	r8, [r3]
	PMC->PMC_MCKR = mck_setting;
  40136a:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
  40136e:	631d      	str	r5, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  401370:	461a      	mov	r2, r3
  401372:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401374:	f013 0f08 	tst.w	r3, #8
  401378:	d0fb      	beq.n	401372 <pmc_sleep+0x15a>
	while (!(PMC->PMC_SR & pll_sr));
  40137a:	4a33      	ldr	r2, [pc, #204]	; (401448 <pmc_sleep+0x230>)
  40137c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40137e:	420b      	tst	r3, r1
  401380:	d0fc      	beq.n	40137c <pmc_sleep+0x164>

#if (SAM4C || SAM4CM || SAM4CP)
		/* Restore the sub-system 1 */
		PMC->PMC_SCER = cpclk_backup | PMC_SCER_CPKEY_PASSWD;
#endif
		b_is_sleep_clock_used = false;
  401382:	2200      	movs	r2, #0
  401384:	4b2f      	ldr	r3, [pc, #188]	; (401444 <pmc_sleep+0x22c>)
  401386:	701a      	strb	r2, [r3, #0]
		if (callback_clocks_restored) {
  401388:	4b39      	ldr	r3, [pc, #228]	; (401470 <pmc_sleep+0x258>)
  40138a:	681b      	ldr	r3, [r3, #0]
  40138c:	b11b      	cbz	r3, 401396 <pmc_sleep+0x17e>
			callback_clocks_restored();
  40138e:	4798      	blx	r3
			callback_clocks_restored = NULL;
  401390:	2200      	movs	r2, #0
  401392:	4b37      	ldr	r3, [pc, #220]	; (401470 <pmc_sleep+0x258>)
  401394:	601a      	str	r2, [r3, #0]
		}
		cpu_irq_enable();
  401396:	2201      	movs	r2, #1
  401398:	4b28      	ldr	r3, [pc, #160]	; (40143c <pmc_sleep+0x224>)
  40139a:	701a      	strb	r2, [r3, #0]
  40139c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4013a0:	b662      	cpsie	i
  4013a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uint32_t mckr = PMC->PMC_MCKR;
  4013a6:	4629      	mov	r1, r5
  4013a8:	e77e      	b.n	4012a8 <pmc_sleep+0x90>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4013aa:	f5a2 62c0 	sub.w	r2, r2, #1536	; 0x600
  4013ae:	6a11      	ldr	r1, [r2, #32]
  4013b0:	4b30      	ldr	r3, [pc, #192]	; (401474 <pmc_sleep+0x25c>)
  4013b2:	400b      	ands	r3, r1
  4013b4:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4013b8:	6213      	str	r3, [r2, #32]
  4013ba:	e799      	b.n	4012f0 <pmc_sleep+0xd8>
	} else if (CKGR_MOR_MOSCXTEN == (osc_setting & CKGR_MOR_MOSCXTEN)) {
  4013bc:	f017 0f01 	tst.w	r7, #1
  4013c0:	d0b3      	beq.n	40132a <pmc_sleep+0x112>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN)) {
  4013c2:	4b21      	ldr	r3, [pc, #132]	; (401448 <pmc_sleep+0x230>)
  4013c4:	6a1b      	ldr	r3, [r3, #32]
  4013c6:	f013 0f01 	tst.w	r3, #1
  4013ca:	d10b      	bne.n	4013e4 <pmc_sleep+0x1cc>
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4013cc:	491e      	ldr	r1, [pc, #120]	; (401448 <pmc_sleep+0x230>)
  4013ce:	6a0b      	ldr	r3, [r1, #32]
					CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN;
  4013d0:	4a29      	ldr	r2, [pc, #164]	; (401478 <pmc_sleep+0x260>)
  4013d2:	401a      	ands	r2, r3
  4013d4:	4b29      	ldr	r3, [pc, #164]	; (40147c <pmc_sleep+0x264>)
  4013d6:	4313      	orrs	r3, r2
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4013d8:	620b      	str	r3, [r1, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4013da:	460a      	mov	r2, r1
  4013dc:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4013de:	f013 0f01 	tst.w	r3, #1
  4013e2:	d0fb      	beq.n	4013dc <pmc_sleep+0x1c4>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
  4013e4:	4b18      	ldr	r3, [pc, #96]	; (401448 <pmc_sleep+0x230>)
  4013e6:	6a1b      	ldr	r3, [r3, #32]
  4013e8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4013ec:	d108      	bne.n	401400 <pmc_sleep+0x1e8>
			PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4013ee:	4a16      	ldr	r2, [pc, #88]	; (401448 <pmc_sleep+0x230>)
  4013f0:	6a11      	ldr	r1, [r2, #32]
  4013f2:	4b23      	ldr	r3, [pc, #140]	; (401480 <pmc_sleep+0x268>)
  4013f4:	430b      	orrs	r3, r1
  4013f6:	6213      	str	r3, [r2, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  4013f8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4013fa:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  4013fe:	d0fb      	beq.n	4013f8 <pmc_sleep+0x1e0>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  401400:	4a11      	ldr	r2, [pc, #68]	; (401448 <pmc_sleep+0x230>)
  401402:	6a11      	ldr	r1, [r2, #32]
					| CKGR_MOR_KEY_PASSWD;
  401404:	4b18      	ldr	r3, [pc, #96]	; (401468 <pmc_sleep+0x250>)
  401406:	400b      	ands	r3, r1
  401408:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  40140c:	6213      	str	r3, [r2, #32]
  40140e:	e78c      	b.n	40132a <pmc_sleep+0x112>
	uint32_t pll_sr = 0;
  401410:	2100      	movs	r1, #0
  401412:	e793      	b.n	40133c <pmc_sleep+0x124>

		break;
	}
#if (!(SAMG51 || SAMG53 || SAMG54))
	case SAM_PM_SMODE_BACKUP:
		SCB->SCR |= SCR_SLEEPDEEP;
  401414:	4a08      	ldr	r2, [pc, #32]	; (401438 <pmc_sleep+0x220>)
  401416:	6913      	ldr	r3, [r2, #16]
  401418:	f043 0304 	orr.w	r3, r3, #4
  40141c:	6113      	str	r3, [r2, #16]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAMS70 || SAME70)
		SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_VROFF_STOP_VREG;
  40141e:	4a19      	ldr	r2, [pc, #100]	; (401484 <pmc_sleep+0x26c>)
  401420:	4b19      	ldr	r3, [pc, #100]	; (401488 <pmc_sleep+0x270>)
  401422:	601a      	str	r2, [r3, #0]
		cpu_irq_enable();
  401424:	2201      	movs	r2, #1
  401426:	4b05      	ldr	r3, [pc, #20]	; (40143c <pmc_sleep+0x224>)
  401428:	701a      	strb	r2, [r3, #0]
  40142a:	f3bf 8f5f 	dmb	sy
  40142e:	b662      	cpsie	i
  __ASM volatile ("wfi");
  401430:	bf30      	wfi
  401432:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401436:	bf00      	nop
  401438:	e000ed00 	.word	0xe000ed00
  40143c:	20400018 	.word	0x20400018
  401440:	004011c9 	.word	0x004011c9
  401444:	20400c64 	.word	0x20400c64
  401448:	400e0600 	.word	0x400e0600
  40144c:	400e0c00 	.word	0x400e0c00
  401450:	00370008 	.word	0x00370008
  401454:	00401155 	.word	0x00401155
  401458:	fec8ffff 	.word	0xfec8ffff
  40145c:	004011cd 	.word	0x004011cd
  401460:	fec8fffc 	.word	0xfec8fffc
  401464:	01370002 	.word	0x01370002
  401468:	ffc8ff87 	.word	0xffc8ff87
  40146c:	07ff0000 	.word	0x07ff0000
  401470:	20400c68 	.word	0x20400c68
  401474:	ffc8fffe 	.word	0xffc8fffe
  401478:	ffc8fffc 	.word	0xffc8fffc
  40147c:	00370001 	.word	0x00370001
  401480:	01370000 	.word	0x01370000
  401484:	a5000004 	.word	0xa5000004
  401488:	400e1810 	.word	0x400e1810

0040148c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  40148c:	e7fe      	b.n	40148c <Dummy_Handler>
	...

00401490 <Reset_Handler>:
{
  401490:	b500      	push	{lr}
  401492:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  401494:	4b25      	ldr	r3, [pc, #148]	; (40152c <Reset_Handler+0x9c>)
  401496:	4a26      	ldr	r2, [pc, #152]	; (401530 <Reset_Handler+0xa0>)
  401498:	429a      	cmp	r2, r3
  40149a:	d010      	beq.n	4014be <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  40149c:	4b25      	ldr	r3, [pc, #148]	; (401534 <Reset_Handler+0xa4>)
  40149e:	4a23      	ldr	r2, [pc, #140]	; (40152c <Reset_Handler+0x9c>)
  4014a0:	429a      	cmp	r2, r3
  4014a2:	d20c      	bcs.n	4014be <Reset_Handler+0x2e>
  4014a4:	3b01      	subs	r3, #1
  4014a6:	1a9b      	subs	r3, r3, r2
  4014a8:	f023 0303 	bic.w	r3, r3, #3
  4014ac:	3304      	adds	r3, #4
  4014ae:	4413      	add	r3, r2
  4014b0:	491f      	ldr	r1, [pc, #124]	; (401530 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  4014b2:	f851 0b04 	ldr.w	r0, [r1], #4
  4014b6:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  4014ba:	429a      	cmp	r2, r3
  4014bc:	d1f9      	bne.n	4014b2 <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  4014be:	4b1e      	ldr	r3, [pc, #120]	; (401538 <Reset_Handler+0xa8>)
  4014c0:	4a1e      	ldr	r2, [pc, #120]	; (40153c <Reset_Handler+0xac>)
  4014c2:	429a      	cmp	r2, r3
  4014c4:	d20a      	bcs.n	4014dc <Reset_Handler+0x4c>
  4014c6:	3b01      	subs	r3, #1
  4014c8:	1a9b      	subs	r3, r3, r2
  4014ca:	f023 0303 	bic.w	r3, r3, #3
  4014ce:	3304      	adds	r3, #4
  4014d0:	4413      	add	r3, r2
                *pDest++ = 0;
  4014d2:	2100      	movs	r1, #0
  4014d4:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  4014d8:	4293      	cmp	r3, r2
  4014da:	d1fb      	bne.n	4014d4 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4014dc:	4a18      	ldr	r2, [pc, #96]	; (401540 <Reset_Handler+0xb0>)
  4014de:	4b19      	ldr	r3, [pc, #100]	; (401544 <Reset_Handler+0xb4>)
  4014e0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4014e4:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4014e6:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4014ea:	fab3 f383 	clz	r3, r3
  4014ee:	095b      	lsrs	r3, r3, #5
  4014f0:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4014f2:	b672      	cpsid	i
  __ASM volatile ("dmb");
  4014f4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4014f8:	2200      	movs	r2, #0
  4014fa:	4b13      	ldr	r3, [pc, #76]	; (401548 <Reset_Handler+0xb8>)
  4014fc:	701a      	strb	r2, [r3, #0]
	return flags;
  4014fe:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  401500:	4a12      	ldr	r2, [pc, #72]	; (40154c <Reset_Handler+0xbc>)
  401502:	6813      	ldr	r3, [r2, #0]
  401504:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  401508:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  40150a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40150e:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  401512:	b129      	cbz	r1, 401520 <Reset_Handler+0x90>
		cpu_irq_enable();
  401514:	2201      	movs	r2, #1
  401516:	4b0c      	ldr	r3, [pc, #48]	; (401548 <Reset_Handler+0xb8>)
  401518:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  40151a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40151e:	b662      	cpsie	i
        __libc_init_array();
  401520:	4b0b      	ldr	r3, [pc, #44]	; (401550 <Reset_Handler+0xc0>)
  401522:	4798      	blx	r3
        main();
  401524:	4b0b      	ldr	r3, [pc, #44]	; (401554 <Reset_Handler+0xc4>)
  401526:	4798      	blx	r3
  401528:	e7fe      	b.n	401528 <Reset_Handler+0x98>
  40152a:	bf00      	nop
  40152c:	20400000 	.word	0x20400000
  401530:	00407604 	.word	0x00407604
  401534:	204009d0 	.word	0x204009d0
  401538:	20400cd4 	.word	0x20400cd4
  40153c:	204009d0 	.word	0x204009d0
  401540:	e000ed00 	.word	0xe000ed00
  401544:	00400000 	.word	0x00400000
  401548:	20400018 	.word	0x20400018
  40154c:	e000ed88 	.word	0xe000ed88
  401550:	00402a51 	.word	0x00402a51
  401554:	00401c21 	.word	0x00401c21

00401558 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  401558:	4b3b      	ldr	r3, [pc, #236]	; (401648 <SystemCoreClockUpdate+0xf0>)
  40155a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40155c:	f003 0303 	and.w	r3, r3, #3
  401560:	2b01      	cmp	r3, #1
  401562:	d01d      	beq.n	4015a0 <SystemCoreClockUpdate+0x48>
  401564:	b183      	cbz	r3, 401588 <SystemCoreClockUpdate+0x30>
  401566:	2b02      	cmp	r3, #2
  401568:	d036      	beq.n	4015d8 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  40156a:	4b37      	ldr	r3, [pc, #220]	; (401648 <SystemCoreClockUpdate+0xf0>)
  40156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40156e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401572:	2b70      	cmp	r3, #112	; 0x70
  401574:	d05f      	beq.n	401636 <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  401576:	4b34      	ldr	r3, [pc, #208]	; (401648 <SystemCoreClockUpdate+0xf0>)
  401578:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40157a:	4934      	ldr	r1, [pc, #208]	; (40164c <SystemCoreClockUpdate+0xf4>)
  40157c:	f3c2 1202 	ubfx	r2, r2, #4, #3
  401580:	680b      	ldr	r3, [r1, #0]
  401582:	40d3      	lsrs	r3, r2
  401584:	600b      	str	r3, [r1, #0]
  401586:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  401588:	4b31      	ldr	r3, [pc, #196]	; (401650 <SystemCoreClockUpdate+0xf8>)
  40158a:	695b      	ldr	r3, [r3, #20]
  40158c:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401590:	bf14      	ite	ne
  401592:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  401596:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  40159a:	4b2c      	ldr	r3, [pc, #176]	; (40164c <SystemCoreClockUpdate+0xf4>)
  40159c:	601a      	str	r2, [r3, #0]
  40159e:	e7e4      	b.n	40156a <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4015a0:	4b29      	ldr	r3, [pc, #164]	; (401648 <SystemCoreClockUpdate+0xf0>)
  4015a2:	6a1b      	ldr	r3, [r3, #32]
  4015a4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4015a8:	d003      	beq.n	4015b2 <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  4015aa:	4a2a      	ldr	r2, [pc, #168]	; (401654 <SystemCoreClockUpdate+0xfc>)
  4015ac:	4b27      	ldr	r3, [pc, #156]	; (40164c <SystemCoreClockUpdate+0xf4>)
  4015ae:	601a      	str	r2, [r3, #0]
  4015b0:	e7db      	b.n	40156a <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4015b2:	4a29      	ldr	r2, [pc, #164]	; (401658 <SystemCoreClockUpdate+0x100>)
  4015b4:	4b25      	ldr	r3, [pc, #148]	; (40164c <SystemCoreClockUpdate+0xf4>)
  4015b6:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4015b8:	4b23      	ldr	r3, [pc, #140]	; (401648 <SystemCoreClockUpdate+0xf0>)
  4015ba:	6a1b      	ldr	r3, [r3, #32]
  4015bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4015c0:	2b10      	cmp	r3, #16
  4015c2:	d005      	beq.n	4015d0 <SystemCoreClockUpdate+0x78>
  4015c4:	2b20      	cmp	r3, #32
  4015c6:	d1d0      	bne.n	40156a <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  4015c8:	4a22      	ldr	r2, [pc, #136]	; (401654 <SystemCoreClockUpdate+0xfc>)
  4015ca:	4b20      	ldr	r3, [pc, #128]	; (40164c <SystemCoreClockUpdate+0xf4>)
  4015cc:	601a      	str	r2, [r3, #0]
          break;
  4015ce:	e7cc      	b.n	40156a <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  4015d0:	4a22      	ldr	r2, [pc, #136]	; (40165c <SystemCoreClockUpdate+0x104>)
  4015d2:	4b1e      	ldr	r3, [pc, #120]	; (40164c <SystemCoreClockUpdate+0xf4>)
  4015d4:	601a      	str	r2, [r3, #0]
          break;
  4015d6:	e7c8      	b.n	40156a <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4015d8:	4b1b      	ldr	r3, [pc, #108]	; (401648 <SystemCoreClockUpdate+0xf0>)
  4015da:	6a1b      	ldr	r3, [r3, #32]
  4015dc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4015e0:	d016      	beq.n	401610 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  4015e2:	4a1c      	ldr	r2, [pc, #112]	; (401654 <SystemCoreClockUpdate+0xfc>)
  4015e4:	4b19      	ldr	r3, [pc, #100]	; (40164c <SystemCoreClockUpdate+0xf4>)
  4015e6:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  4015e8:	4b17      	ldr	r3, [pc, #92]	; (401648 <SystemCoreClockUpdate+0xf0>)
  4015ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4015ec:	f003 0303 	and.w	r3, r3, #3
  4015f0:	2b02      	cmp	r3, #2
  4015f2:	d1ba      	bne.n	40156a <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4015f4:	4a14      	ldr	r2, [pc, #80]	; (401648 <SystemCoreClockUpdate+0xf0>)
  4015f6:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4015f8:	6a92      	ldr	r2, [r2, #40]	; 0x28
  4015fa:	4814      	ldr	r0, [pc, #80]	; (40164c <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4015fc:	f3c1 410a 	ubfx	r1, r1, #16, #11
  401600:	6803      	ldr	r3, [r0, #0]
  401602:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401606:	b2d2      	uxtb	r2, r2
  401608:	fbb3 f3f2 	udiv	r3, r3, r2
  40160c:	6003      	str	r3, [r0, #0]
  40160e:	e7ac      	b.n	40156a <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401610:	4a11      	ldr	r2, [pc, #68]	; (401658 <SystemCoreClockUpdate+0x100>)
  401612:	4b0e      	ldr	r3, [pc, #56]	; (40164c <SystemCoreClockUpdate+0xf4>)
  401614:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401616:	4b0c      	ldr	r3, [pc, #48]	; (401648 <SystemCoreClockUpdate+0xf0>)
  401618:	6a1b      	ldr	r3, [r3, #32]
  40161a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40161e:	2b10      	cmp	r3, #16
  401620:	d005      	beq.n	40162e <SystemCoreClockUpdate+0xd6>
  401622:	2b20      	cmp	r3, #32
  401624:	d1e0      	bne.n	4015e8 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  401626:	4a0b      	ldr	r2, [pc, #44]	; (401654 <SystemCoreClockUpdate+0xfc>)
  401628:	4b08      	ldr	r3, [pc, #32]	; (40164c <SystemCoreClockUpdate+0xf4>)
  40162a:	601a      	str	r2, [r3, #0]
          break;
  40162c:	e7dc      	b.n	4015e8 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  40162e:	4a0b      	ldr	r2, [pc, #44]	; (40165c <SystemCoreClockUpdate+0x104>)
  401630:	4b06      	ldr	r3, [pc, #24]	; (40164c <SystemCoreClockUpdate+0xf4>)
  401632:	601a      	str	r2, [r3, #0]
          break;
  401634:	e7d8      	b.n	4015e8 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  401636:	4a05      	ldr	r2, [pc, #20]	; (40164c <SystemCoreClockUpdate+0xf4>)
  401638:	6813      	ldr	r3, [r2, #0]
  40163a:	4909      	ldr	r1, [pc, #36]	; (401660 <SystemCoreClockUpdate+0x108>)
  40163c:	fba1 1303 	umull	r1, r3, r1, r3
  401640:	085b      	lsrs	r3, r3, #1
  401642:	6013      	str	r3, [r2, #0]
  401644:	4770      	bx	lr
  401646:	bf00      	nop
  401648:	400e0600 	.word	0x400e0600
  40164c:	2040001c 	.word	0x2040001c
  401650:	400e1810 	.word	0x400e1810
  401654:	00b71b00 	.word	0x00b71b00
  401658:	003d0900 	.word	0x003d0900
  40165c:	007a1200 	.word	0x007a1200
  401660:	aaaaaaab 	.word	0xaaaaaaab

00401664 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  401664:	4b16      	ldr	r3, [pc, #88]	; (4016c0 <system_init_flash+0x5c>)
  401666:	4298      	cmp	r0, r3
  401668:	d913      	bls.n	401692 <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  40166a:	4b16      	ldr	r3, [pc, #88]	; (4016c4 <system_init_flash+0x60>)
  40166c:	4298      	cmp	r0, r3
  40166e:	d915      	bls.n	40169c <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  401670:	4b15      	ldr	r3, [pc, #84]	; (4016c8 <system_init_flash+0x64>)
  401672:	4298      	cmp	r0, r3
  401674:	d916      	bls.n	4016a4 <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  401676:	4b15      	ldr	r3, [pc, #84]	; (4016cc <system_init_flash+0x68>)
  401678:	4298      	cmp	r0, r3
  40167a:	d917      	bls.n	4016ac <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  40167c:	4b14      	ldr	r3, [pc, #80]	; (4016d0 <system_init_flash+0x6c>)
  40167e:	4298      	cmp	r0, r3
  401680:	d918      	bls.n	4016b4 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  401682:	4b14      	ldr	r3, [pc, #80]	; (4016d4 <system_init_flash+0x70>)
  401684:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401686:	bf94      	ite	ls
  401688:	4a13      	ldrls	r2, [pc, #76]	; (4016d8 <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  40168a:	4a14      	ldrhi	r2, [pc, #80]	; (4016dc <system_init_flash+0x78>)
  40168c:	4b14      	ldr	r3, [pc, #80]	; (4016e0 <system_init_flash+0x7c>)
  40168e:	601a      	str	r2, [r3, #0]
  401690:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  401692:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  401696:	4b12      	ldr	r3, [pc, #72]	; (4016e0 <system_init_flash+0x7c>)
  401698:	601a      	str	r2, [r3, #0]
  40169a:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  40169c:	4a11      	ldr	r2, [pc, #68]	; (4016e4 <system_init_flash+0x80>)
  40169e:	4b10      	ldr	r3, [pc, #64]	; (4016e0 <system_init_flash+0x7c>)
  4016a0:	601a      	str	r2, [r3, #0]
  4016a2:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4016a4:	4a10      	ldr	r2, [pc, #64]	; (4016e8 <system_init_flash+0x84>)
  4016a6:	4b0e      	ldr	r3, [pc, #56]	; (4016e0 <system_init_flash+0x7c>)
  4016a8:	601a      	str	r2, [r3, #0]
  4016aa:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4016ac:	4a0f      	ldr	r2, [pc, #60]	; (4016ec <system_init_flash+0x88>)
  4016ae:	4b0c      	ldr	r3, [pc, #48]	; (4016e0 <system_init_flash+0x7c>)
  4016b0:	601a      	str	r2, [r3, #0]
  4016b2:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4016b4:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  4016b8:	4b09      	ldr	r3, [pc, #36]	; (4016e0 <system_init_flash+0x7c>)
  4016ba:	601a      	str	r2, [r3, #0]
  4016bc:	4770      	bx	lr
  4016be:	bf00      	nop
  4016c0:	015ef3bf 	.word	0x015ef3bf
  4016c4:	02bde77f 	.word	0x02bde77f
  4016c8:	041cdb3f 	.word	0x041cdb3f
  4016cc:	057bceff 	.word	0x057bceff
  4016d0:	06dac2bf 	.word	0x06dac2bf
  4016d4:	0839b67f 	.word	0x0839b67f
  4016d8:	04000500 	.word	0x04000500
  4016dc:	04000600 	.word	0x04000600
  4016e0:	400e0c00 	.word	0x400e0c00
  4016e4:	04000100 	.word	0x04000100
  4016e8:	04000200 	.word	0x04000200
  4016ec:	04000300 	.word	0x04000300

004016f0 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  4016f0:	4b0a      	ldr	r3, [pc, #40]	; (40171c <_sbrk+0x2c>)
  4016f2:	681b      	ldr	r3, [r3, #0]
  4016f4:	b153      	cbz	r3, 40170c <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  4016f6:	4b09      	ldr	r3, [pc, #36]	; (40171c <_sbrk+0x2c>)
  4016f8:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  4016fa:	181a      	adds	r2, r3, r0
  4016fc:	4908      	ldr	r1, [pc, #32]	; (401720 <_sbrk+0x30>)
  4016fe:	4291      	cmp	r1, r2
  401700:	db08      	blt.n	401714 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  401702:	4610      	mov	r0, r2
  401704:	4a05      	ldr	r2, [pc, #20]	; (40171c <_sbrk+0x2c>)
  401706:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  401708:	4618      	mov	r0, r3
  40170a:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  40170c:	4a05      	ldr	r2, [pc, #20]	; (401724 <_sbrk+0x34>)
  40170e:	4b03      	ldr	r3, [pc, #12]	; (40171c <_sbrk+0x2c>)
  401710:	601a      	str	r2, [r3, #0]
  401712:	e7f0      	b.n	4016f6 <_sbrk+0x6>
		return (caddr_t) -1;	
  401714:	f04f 30ff 	mov.w	r0, #4294967295
}
  401718:	4770      	bx	lr
  40171a:	bf00      	nop
  40171c:	20400c6c 	.word	0x20400c6c
  401720:	2045fffc 	.word	0x2045fffc
  401724:	20402ed8 	.word	0x20402ed8

00401728 <start_stop_callback>:
		flag_incrementa_sec = 0;
	}
}

void start_stop_callback(void){
	flag_start_stop = 1;
  401728:	2201      	movs	r2, #1
  40172a:	4b01      	ldr	r3, [pc, #4]	; (401730 <start_stop_callback+0x8>)
  40172c:	701a      	strb	r2, [r3, #0]
  40172e:	4770      	bx	lr
  401730:	20400c74 	.word	0x20400c74

00401734 <incrementa_min_callback>:
void incrementa_min_callback(void){
  401734:	b508      	push	{r3, lr}
	if (!pio_get(INCREMENTA_MIN_PIO, PIO_INPUT, INCREMENTA_MIN_PIO_IDX_MASK)) {
  401736:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40173a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  40173e:	4806      	ldr	r0, [pc, #24]	; (401758 <incrementa_min_callback+0x24>)
  401740:	4b06      	ldr	r3, [pc, #24]	; (40175c <incrementa_min_callback+0x28>)
  401742:	4798      	blx	r3
  401744:	b118      	cbz	r0, 40174e <incrementa_min_callback+0x1a>
		flag_incrementa_min = 0;
  401746:	2200      	movs	r2, #0
  401748:	4b05      	ldr	r3, [pc, #20]	; (401760 <incrementa_min_callback+0x2c>)
  40174a:	701a      	strb	r2, [r3, #0]
  40174c:	bd08      	pop	{r3, pc}
		flag_incrementa_min = 1;
  40174e:	2201      	movs	r2, #1
  401750:	4b03      	ldr	r3, [pc, #12]	; (401760 <incrementa_min_callback+0x2c>)
  401752:	701a      	strb	r2, [r3, #0]
  401754:	bd08      	pop	{r3, pc}
  401756:	bf00      	nop
  401758:	400e1400 	.word	0x400e1400
  40175c:	00400d4b 	.word	0x00400d4b
  401760:	20400c70 	.word	0x20400c70

00401764 <incrementa_sec_callback>:
void incrementa_sec_callback(void){
  401764:	b508      	push	{r3, lr}
	if (!pio_get(INCREMENTA_SEC_PIO, PIO_INPUT, INCREMENTA_SEC_PIO_IDX_MASK)) {
  401766:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  40176a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  40176e:	4806      	ldr	r0, [pc, #24]	; (401788 <incrementa_sec_callback+0x24>)
  401770:	4b06      	ldr	r3, [pc, #24]	; (40178c <incrementa_sec_callback+0x28>)
  401772:	4798      	blx	r3
  401774:	b118      	cbz	r0, 40177e <incrementa_sec_callback+0x1a>
		flag_incrementa_sec = 0;
  401776:	2200      	movs	r2, #0
  401778:	4b05      	ldr	r3, [pc, #20]	; (401790 <incrementa_sec_callback+0x2c>)
  40177a:	701a      	strb	r2, [r3, #0]
  40177c:	bd08      	pop	{r3, pc}
		flag_incrementa_sec = 1;
  40177e:	2201      	movs	r2, #1
  401780:	4b03      	ldr	r3, [pc, #12]	; (401790 <incrementa_sec_callback+0x2c>)
  401782:	701a      	strb	r2, [r3, #0]
  401784:	bd08      	pop	{r3, pc}
  401786:	bf00      	nop
  401788:	400e1200 	.word	0x400e1200
  40178c:	00400d4b 	.word	0x00400d4b
  401790:	20400c71 	.word	0x20400c71

00401794 <TC1_Handler>:
}

void TC1_Handler(void) {
  401794:	b500      	push	{lr}
  401796:	b083      	sub	sp, #12
	volatile uint32_t status = tc_get_status(TC0, 1);
  401798:	2101      	movs	r1, #1
  40179a:	4805      	ldr	r0, [pc, #20]	; (4017b0 <TC1_Handler+0x1c>)
  40179c:	4b05      	ldr	r3, [pc, #20]	; (4017b4 <TC1_Handler+0x20>)
  40179e:	4798      	blx	r3
  4017a0:	9001      	str	r0, [sp, #4]
	flag_tc_sec = 1;
  4017a2:	2201      	movs	r2, #1
  4017a4:	4b04      	ldr	r3, [pc, #16]	; (4017b8 <TC1_Handler+0x24>)
  4017a6:	701a      	strb	r2, [r3, #0]
}
  4017a8:	b003      	add	sp, #12
  4017aa:	f85d fb04 	ldr.w	pc, [sp], #4
  4017ae:	bf00      	nop
  4017b0:	4000c000 	.word	0x4000c000
  4017b4:	00400569 	.word	0x00400569
  4017b8:	20400c75 	.word	0x20400c75

004017bc <RTC_Handler>:


void RTC_Handler(void) {
  4017bc:	b538      	push	{r3, r4, r5, lr}
	uint32_t ul_status = rtc_get_status(RTC);
  4017be:	4812      	ldr	r0, [pc, #72]	; (401808 <RTC_Handler+0x4c>)
  4017c0:	4b12      	ldr	r3, [pc, #72]	; (40180c <RTC_Handler+0x50>)
  4017c2:	4798      	blx	r3
	
	if ((ul_status & RTC_SR_SEC) == RTC_SR_SEC) {
  4017c4:	f010 0f04 	tst.w	r0, #4
  4017c8:	d002      	beq.n	4017d0 <RTC_Handler+0x14>
		flag_rtc_sec = 1;
  4017ca:	2201      	movs	r2, #1
  4017cc:	4b10      	ldr	r3, [pc, #64]	; (401810 <RTC_Handler+0x54>)
  4017ce:	701a      	strb	r2, [r3, #0]
	}
	
	/* Time or date alarm */
	if ((ul_status & RTC_SR_ALARM) == RTC_SR_ALARM) {
  4017d0:	f010 0f02 	tst.w	r0, #2
  4017d4:	d002      	beq.n	4017dc <RTC_Handler+0x20>
		flag_rtc_alarm = 1;
  4017d6:	2201      	movs	r2, #1
  4017d8:	4b0e      	ldr	r3, [pc, #56]	; (401814 <RTC_Handler+0x58>)
  4017da:	701a      	strb	r2, [r3, #0]
	}

	rtc_clear_status(RTC, RTC_SCCR_SECCLR);
  4017dc:	4d0a      	ldr	r5, [pc, #40]	; (401808 <RTC_Handler+0x4c>)
  4017de:	2104      	movs	r1, #4
  4017e0:	4628      	mov	r0, r5
  4017e2:	4c0d      	ldr	r4, [pc, #52]	; (401818 <RTC_Handler+0x5c>)
  4017e4:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_ALRCLR);
  4017e6:	2102      	movs	r1, #2
  4017e8:	4628      	mov	r0, r5
  4017ea:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_ACKCLR);
  4017ec:	2101      	movs	r1, #1
  4017ee:	4628      	mov	r0, r5
  4017f0:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_TIMCLR);
  4017f2:	2108      	movs	r1, #8
  4017f4:	4628      	mov	r0, r5
  4017f6:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_CALCLR);
  4017f8:	2110      	movs	r1, #16
  4017fa:	4628      	mov	r0, r5
  4017fc:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_TDERRCLR);
  4017fe:	2120      	movs	r1, #32
  401800:	4628      	mov	r0, r5
  401802:	47a0      	blx	r4
  401804:	bd38      	pop	{r3, r4, r5, pc}
  401806:	bf00      	nop
  401808:	400e1860 	.word	0x400e1860
  40180c:	004003dd 	.word	0x004003dd
  401810:	20400c73 	.word	0x20400c73
  401814:	20400c72 	.word	0x20400c72
  401818:	004003e1 	.word	0x004003e1

0040181c <configure_input>:
void configure_output(Pio *p_pio, const pio_type_t ul_type, const uint32_t ul_mask, const uint32_t ul_attribute, uint32_t ul_id ){
	pmc_enable_periph_clk(ul_id);
	pio_configure(p_pio, ul_type, ul_mask, ul_attribute);
}

void configure_input(Pio *p_pio, const pio_type_t ul_type, const uint32_t ul_mask, const uint32_t ul_attribute, uint32_t ul_id){
  40181c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40181e:	4604      	mov	r4, r0
  401820:	460e      	mov	r6, r1
  401822:	4615      	mov	r5, r2
  401824:	461f      	mov	r7, r3
	pmc_enable_periph_clk(ul_id);
  401826:	9806      	ldr	r0, [sp, #24]
  401828:	4b06      	ldr	r3, [pc, #24]	; (401844 <configure_input+0x28>)
  40182a:	4798      	blx	r3
	pio_configure(p_pio, ul_type, ul_mask, ul_attribute);
  40182c:	463b      	mov	r3, r7
  40182e:	462a      	mov	r2, r5
  401830:	4631      	mov	r1, r6
  401832:	4620      	mov	r0, r4
  401834:	4e04      	ldr	r6, [pc, #16]	; (401848 <configure_input+0x2c>)
  401836:	47b0      	blx	r6
	pio_set_debounce_filter(p_pio, ul_mask, 60);
  401838:	223c      	movs	r2, #60	; 0x3c
  40183a:	4629      	mov	r1, r5
  40183c:	4620      	mov	r0, r4
  40183e:	4b03      	ldr	r3, [pc, #12]	; (40184c <configure_input+0x30>)
  401840:	4798      	blx	r3
  401842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401844:	00401175 	.word	0x00401175
  401848:	00400e55 	.word	0x00400e55
  40184c:	00400d29 	.word	0x00400d29

00401850 <configure_interruption>:
}

void configure_interruption(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask, uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t)){
  401850:	b5f0      	push	{r4, r5, r6, r7, lr}
  401852:	b083      	sub	sp, #12
  401854:	4605      	mov	r5, r0
  401856:	460c      	mov	r4, r1
  401858:	4616      	mov	r6, r2
	pio_handler_set(p_pio, ul_id, ul_mask, ul_attr, p_handler);
  40185a:	9f08      	ldr	r7, [sp, #32]
  40185c:	9700      	str	r7, [sp, #0]
  40185e:	4f11      	ldr	r7, [pc, #68]	; (4018a4 <configure_interruption+0x54>)
  401860:	47b8      	blx	r7
	pio_enable_interrupt(p_pio, ul_mask);
  401862:	4631      	mov	r1, r6
  401864:	4628      	mov	r0, r5
  401866:	4b10      	ldr	r3, [pc, #64]	; (4018a8 <configure_interruption+0x58>)
  401868:	4798      	blx	r3
	pio_get_interrupt_status(p_pio);
  40186a:	4628      	mov	r0, r5
  40186c:	4b0f      	ldr	r3, [pc, #60]	; (4018ac <configure_interruption+0x5c>)
  40186e:	4798      	blx	r3
	NVIC_EnableIRQ(ul_id);
  401870:	b262      	sxtb	r2, r4
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  401872:	0950      	lsrs	r0, r2, #5
  401874:	b2e4      	uxtb	r4, r4
  401876:	f004 011f 	and.w	r1, r4, #31
  40187a:	2301      	movs	r3, #1
  40187c:	408b      	lsls	r3, r1
  40187e:	490c      	ldr	r1, [pc, #48]	; (4018b0 <configure_interruption+0x60>)
  401880:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
  401884:	2a00      	cmp	r2, #0
  401886:	db06      	blt.n	401896 <configure_interruption+0x46>
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  401888:	4b09      	ldr	r3, [pc, #36]	; (4018b0 <configure_interruption+0x60>)
  40188a:	4413      	add	r3, r2
  40188c:	2280      	movs	r2, #128	; 0x80
  40188e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
	NVIC_SetPriority(ul_id, 4);
}
  401892:	b003      	add	sp, #12
  401894:	bdf0      	pop	{r4, r5, r6, r7, pc}
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  401896:	f004 040f 	and.w	r4, r4, #15
  40189a:	4b06      	ldr	r3, [pc, #24]	; (4018b4 <configure_interruption+0x64>)
  40189c:	2280      	movs	r2, #128	; 0x80
  40189e:	551a      	strb	r2, [r3, r4]
  4018a0:	e7f7      	b.n	401892 <configure_interruption+0x42>
  4018a2:	bf00      	nop
  4018a4:	00400f81 	.word	0x00400f81
  4018a8:	00400f23 	.word	0x00400f23
  4018ac:	00400f27 	.word	0x00400f27
  4018b0:	e000e100 	.word	0xe000e100
  4018b4:	e000ed14 	.word	0xe000ed14

004018b8 <init>:


void init(void) {
  4018b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4018bc:	b082      	sub	sp, #8
	// Initialize the board clock
	sysclk_init();
  4018be:	4b31      	ldr	r3, [pc, #196]	; (401984 <init+0xcc>)
  4018c0:	4798      	blx	r3

	// Deactivate WatchDog Timer
	WDT->WDT_MR = WDT_MR_WDDIS;
  4018c2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4018c6:	4b30      	ldr	r3, [pc, #192]	; (401988 <init+0xd0>)
  4018c8:	605a      	str	r2, [r3, #4]
	
	// LEDs OLED1
	pmc_enable_periph_clk(LED1_PIO_ID);
  4018ca:	200a      	movs	r0, #10
  4018cc:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 4019b0 <init+0xf8>
  4018d0:	47c0      	blx	r8
	pio_set_output(LED1_PIO, LED1_PIO_IDX_MASK, 1, 0, 1);
  4018d2:	4d2e      	ldr	r5, [pc, #184]	; (40198c <init+0xd4>)
  4018d4:	2401      	movs	r4, #1
  4018d6:	9400      	str	r4, [sp, #0]
  4018d8:	2300      	movs	r3, #0
  4018da:	4622      	mov	r2, r4
  4018dc:	4621      	mov	r1, r4
  4018de:	4628      	mov	r0, r5
  4018e0:	4f2b      	ldr	r7, [pc, #172]	; (401990 <init+0xd8>)
  4018e2:	47b8      	blx	r7
	pmc_enable_periph_clk(LED2_PIO_ID);
  4018e4:	200c      	movs	r0, #12
  4018e6:	47c0      	blx	r8
	pio_set_output(LED2_PIO, LED2_PIO_IDX_MASK, 1, 0, 1);
  4018e8:	4e2a      	ldr	r6, [pc, #168]	; (401994 <init+0xdc>)
  4018ea:	9400      	str	r4, [sp, #0]
  4018ec:	2300      	movs	r3, #0
  4018ee:	4622      	mov	r2, r4
  4018f0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4018f4:	4630      	mov	r0, r6
  4018f6:	47b8      	blx	r7
	pmc_enable_periph_clk(LED3_PIO_ID);
  4018f8:	200b      	movs	r0, #11
  4018fa:	47c0      	blx	r8
	pio_set_output(LED3_PIO, LED3_PIO_IDX_MASK, 1, 0, 1);
  4018fc:	9400      	str	r4, [sp, #0]
  4018fe:	2300      	movs	r3, #0
  401900:	4622      	mov	r2, r4
  401902:	2104      	movs	r1, #4
  401904:	4824      	ldr	r0, [pc, #144]	; (401998 <init+0xe0>)
  401906:	47b8      	blx	r7
	
	
	
	configure_input(INCREMENTA_MIN_PIO, PIO_INPUT, INCREMENTA_MIN_PIO_IDX_MASK, PIO_PULLUP | PIO_DEBOUNCE, INCREMENTA_MIN_PIO_ID);
  401908:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 4019b4 <init+0xfc>
  40190c:	f04f 0a10 	mov.w	sl, #16
  401910:	f8cd a000 	str.w	sl, [sp]
  401914:	2309      	movs	r3, #9
  401916:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40191a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  40191e:	4648      	mov	r0, r9
  401920:	4c1e      	ldr	r4, [pc, #120]	; (40199c <init+0xe4>)
  401922:	47a0      	blx	r4
	configure_input(INCREMENTA_SEC_PIO, PIO_INPUT, INCREMENTA_SEC_PIO_IDX_MASK, PIO_PULLUP | PIO_DEBOUNCE, INCREMENTA_SEC_PIO_ID);
  401924:	f04f 080c 	mov.w	r8, #12
  401928:	f8cd 8000 	str.w	r8, [sp]
  40192c:	2309      	movs	r3, #9
  40192e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  401932:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  401936:	4630      	mov	r0, r6
  401938:	47a0      	blx	r4
	configure_input(START_STOP_PIO, PIO_INPUT, START_STOP_PIO_IDX_MASK, PIO_PULLUP | PIO_DEBOUNCE, START_STOP_PIO_ID);
  40193a:	270a      	movs	r7, #10
  40193c:	9700      	str	r7, [sp, #0]
  40193e:	2309      	movs	r3, #9
  401940:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  401944:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  401948:	4628      	mov	r0, r5
  40194a:	47a0      	blx	r4
	
	configure_interruption(INCREMENTA_MIN_PIO, INCREMENTA_MIN_PIO_ID, INCREMENTA_MIN_PIO_IDX_MASK, PIO_IT_EDGE, incrementa_min_callback);
  40194c:	4b14      	ldr	r3, [pc, #80]	; (4019a0 <init+0xe8>)
  40194e:	9300      	str	r3, [sp, #0]
  401950:	2340      	movs	r3, #64	; 0x40
  401952:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401956:	4651      	mov	r1, sl
  401958:	4648      	mov	r0, r9
  40195a:	4c12      	ldr	r4, [pc, #72]	; (4019a4 <init+0xec>)
  40195c:	47a0      	blx	r4
	configure_interruption(INCREMENTA_SEC_PIO, INCREMENTA_SEC_PIO_ID, INCREMENTA_SEC_PIO_IDX_MASK, PIO_IT_EDGE, incrementa_sec_callback);
  40195e:	4b12      	ldr	r3, [pc, #72]	; (4019a8 <init+0xf0>)
  401960:	9300      	str	r3, [sp, #0]
  401962:	2340      	movs	r3, #64	; 0x40
  401964:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  401968:	4641      	mov	r1, r8
  40196a:	4630      	mov	r0, r6
  40196c:	47a0      	blx	r4
	configure_interruption(START_STOP_PIO, START_STOP_PIO_ID, START_STOP_PIO_IDX_MASK, PIO_IT_FALL_EDGE, start_stop_callback);
  40196e:	4b0f      	ldr	r3, [pc, #60]	; (4019ac <init+0xf4>)
  401970:	9300      	str	r3, [sp, #0]
  401972:	2350      	movs	r3, #80	; 0x50
  401974:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  401978:	4639      	mov	r1, r7
  40197a:	4628      	mov	r0, r5
  40197c:	47a0      	blx	r4
}
  40197e:	b002      	add	sp, #8
  401980:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401984:	00400b79 	.word	0x00400b79
  401988:	400e1850 	.word	0x400e1850
  40198c:	400e0e00 	.word	0x400e0e00
  401990:	00400e2d 	.word	0x00400e2d
  401994:	400e1200 	.word	0x400e1200
  401998:	400e1000 	.word	0x400e1000
  40199c:	0040181d 	.word	0x0040181d
  4019a0:	00401735 	.word	0x00401735
  4019a4:	00401851 	.word	0x00401851
  4019a8:	00401765 	.word	0x00401765
  4019ac:	00401729 	.word	0x00401729
  4019b0:	00401175 	.word	0x00401175
  4019b4:	400e1400 	.word	0x400e1400

004019b8 <pin_toggle>:

/**
* @Brief Inverte o valor do pino 0->1/ 1->0
*/
void pin_toggle(Pio *pio, uint32_t mask) {
  4019b8:	b538      	push	{r3, r4, r5, lr}
  4019ba:	4604      	mov	r4, r0
  4019bc:	460d      	mov	r5, r1
  if(pio_get_output_data_status(pio, mask))
  4019be:	4b06      	ldr	r3, [pc, #24]	; (4019d8 <pin_toggle+0x20>)
  4019c0:	4798      	blx	r3
  4019c2:	b920      	cbnz	r0, 4019ce <pin_toggle+0x16>
		pio_clear(pio, mask);
  else
		pio_set(pio,mask);
  4019c4:	4629      	mov	r1, r5
  4019c6:	4620      	mov	r0, r4
  4019c8:	4b04      	ldr	r3, [pc, #16]	; (4019dc <pin_toggle+0x24>)
  4019ca:	4798      	blx	r3
  4019cc:	bd38      	pop	{r3, r4, r5, pc}
		pio_clear(pio, mask);
  4019ce:	4629      	mov	r1, r5
  4019d0:	4620      	mov	r0, r4
  4019d2:	4b03      	ldr	r3, [pc, #12]	; (4019e0 <pin_toggle+0x28>)
  4019d4:	4798      	blx	r3
  4019d6:	bd38      	pop	{r3, r4, r5, pc}
  4019d8:	00400ee5 	.word	0x00400ee5
  4019dc:	00400d43 	.word	0x00400d43
  4019e0:	00400d47 	.word	0x00400d47

004019e4 <TC_init>:
}


void TC_init(Tc * TC, int ID_TC, int TC_CHANNEL, int freq){
  4019e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4019e8:	b085      	sub	sp, #20
  4019ea:	4606      	mov	r6, r0
  4019ec:	460c      	mov	r4, r1
  4019ee:	4617      	mov	r7, r2
  4019f0:	4698      	mov	r8, r3
	uint32_t ul_div;
	uint32_t ul_tcclks;
	uint32_t ul_sysclk = sysclk_get_cpu_hz();

	/* Configura o PMC */
	pmc_enable_periph_clk(ID_TC);
  4019f2:	4608      	mov	r0, r1
  4019f4:	4b1c      	ldr	r3, [pc, #112]	; (401a68 <TC_init+0x84>)
  4019f6:	4798      	blx	r3

	/** Configura o TC para operar em  freq hz e interrupçcão no RC compare */
	tc_find_mck_divisor(freq, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
  4019f8:	4d1c      	ldr	r5, [pc, #112]	; (401a6c <TC_init+0x88>)
  4019fa:	9500      	str	r5, [sp, #0]
  4019fc:	ab02      	add	r3, sp, #8
  4019fe:	aa03      	add	r2, sp, #12
  401a00:	4629      	mov	r1, r5
  401a02:	4640      	mov	r0, r8
  401a04:	f8df 9080 	ldr.w	r9, [pc, #128]	; 401a88 <TC_init+0xa4>
  401a08:	47c8      	blx	r9
	tc_init(TC, TC_CHANNEL, ul_tcclks | TC_CMR_CPCTRG);
  401a0a:	9a02      	ldr	r2, [sp, #8]
  401a0c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  401a10:	4639      	mov	r1, r7
  401a12:	4630      	mov	r0, r6
  401a14:	4b16      	ldr	r3, [pc, #88]	; (401a70 <TC_init+0x8c>)
  401a16:	4798      	blx	r3
	tc_write_rc(TC, TC_CHANNEL, (ul_sysclk / ul_div) / freq);
  401a18:	9a03      	ldr	r2, [sp, #12]
  401a1a:	fbb5 f2f2 	udiv	r2, r5, r2
  401a1e:	fbb2 f2f8 	udiv	r2, r2, r8
  401a22:	4639      	mov	r1, r7
  401a24:	4630      	mov	r0, r6
  401a26:	4b13      	ldr	r3, [pc, #76]	; (401a74 <TC_init+0x90>)
  401a28:	4798      	blx	r3

	/* Configura NVIC*/
  	NVIC_SetPriority(ID_TC, 4);
  401a2a:	b263      	sxtb	r3, r4
  if(IRQn < 0) {
  401a2c:	2b00      	cmp	r3, #0
  401a2e:	db13      	blt.n	401a58 <TC_init+0x74>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  401a30:	4a11      	ldr	r2, [pc, #68]	; (401a78 <TC_init+0x94>)
  401a32:	2180      	movs	r1, #128	; 0x80
  401a34:	54d1      	strb	r1, [r2, r3]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  401a36:	095b      	lsrs	r3, r3, #5
  401a38:	f004 041f 	and.w	r4, r4, #31
  401a3c:	2201      	movs	r2, #1
  401a3e:	fa02 f404 	lsl.w	r4, r2, r4
  401a42:	4a0e      	ldr	r2, [pc, #56]	; (401a7c <TC_init+0x98>)
  401a44:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
	NVIC_EnableIRQ((IRQn_Type) ID_TC);
	tc_enable_interrupt(TC, TC_CHANNEL, TC_IER_CPCS);
  401a48:	2210      	movs	r2, #16
  401a4a:	4639      	mov	r1, r7
  401a4c:	4630      	mov	r0, r6
  401a4e:	4b0c      	ldr	r3, [pc, #48]	; (401a80 <TC_init+0x9c>)
  401a50:	4798      	blx	r3
}
  401a52:	b005      	add	sp, #20
  401a54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  401a58:	f004 010f 	and.w	r1, r4, #15
  401a5c:	4a09      	ldr	r2, [pc, #36]	; (401a84 <TC_init+0xa0>)
  401a5e:	440a      	add	r2, r1
  401a60:	2180      	movs	r1, #128	; 0x80
  401a62:	7611      	strb	r1, [r2, #24]
  401a64:	e7e7      	b.n	401a36 <TC_init+0x52>
  401a66:	bf00      	nop
  401a68:	00401175 	.word	0x00401175
  401a6c:	11e1a300 	.word	0x11e1a300
  401a70:	0040052f 	.word	0x0040052f
  401a74:	00400559 	.word	0x00400559
  401a78:	e000e400 	.word	0xe000e400
  401a7c:	e000e100 	.word	0xe000e100
  401a80:	00400561 	.word	0x00400561
  401a84:	e000ecfc 	.word	0xe000ecfc
  401a88:	00400571 	.word	0x00400571

00401a8c <RTC_init>:


void RTC_init(Rtc *rtc, uint32_t id_rtc, calendar t, uint32_t irq_type) {
  401a8c:	b082      	sub	sp, #8
  401a8e:	b570      	push	{r4, r5, r6, lr}
  401a90:	b082      	sub	sp, #8
  401a92:	4605      	mov	r5, r0
  401a94:	460c      	mov	r4, r1
  401a96:	a906      	add	r1, sp, #24
  401a98:	e881 000c 	stmia.w	r1, {r2, r3}
	/* Configura o PMC */
	pmc_enable_periph_clk(ID_RTC);
  401a9c:	2002      	movs	r0, #2
  401a9e:	4b1d      	ldr	r3, [pc, #116]	; (401b14 <RTC_init+0x88>)
  401aa0:	4798      	blx	r3

	/* Default RTC configuration, 24-hour mode */
	rtc_set_hour_mode(rtc, 0);
  401aa2:	2100      	movs	r1, #0
  401aa4:	4628      	mov	r0, r5
  401aa6:	4b1c      	ldr	r3, [pc, #112]	; (401b18 <RTC_init+0x8c>)
  401aa8:	4798      	blx	r3

	/* Configura data e hora manualmente */
	rtc_set_date(rtc, t.year, t.month, t.day, t.week);
  401aaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401aac:	9300      	str	r3, [sp, #0]
  401aae:	9b08      	ldr	r3, [sp, #32]
  401ab0:	9a07      	ldr	r2, [sp, #28]
  401ab2:	9906      	ldr	r1, [sp, #24]
  401ab4:	4628      	mov	r0, r5
  401ab6:	4e19      	ldr	r6, [pc, #100]	; (401b1c <RTC_init+0x90>)
  401ab8:	47b0      	blx	r6
	rtc_set_time(rtc, t.hour, t.minute, t.second);
  401aba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  401abc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  401abe:	990a      	ldr	r1, [sp, #40]	; 0x28
  401ac0:	4628      	mov	r0, r5
  401ac2:	4e17      	ldr	r6, [pc, #92]	; (401b20 <RTC_init+0x94>)
  401ac4:	47b0      	blx	r6

	/* Configure RTC interrupts */
	NVIC_DisableIRQ(id_rtc);
  401ac6:	b262      	sxtb	r2, r4
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  401ac8:	b2e4      	uxtb	r4, r4
  401aca:	f004 011f 	and.w	r1, r4, #31
  401ace:	2301      	movs	r3, #1
  401ad0:	408b      	lsls	r3, r1
  401ad2:	0956      	lsrs	r6, r2, #5
  401ad4:	4813      	ldr	r0, [pc, #76]	; (401b24 <RTC_init+0x98>)
  401ad6:	eb00 0186 	add.w	r1, r0, r6, lsl #2
  401ada:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  401ade:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
  if(IRQn < 0) {
  401ae2:	2a00      	cmp	r2, #0
  401ae4:	db0f      	blt.n	401b06 <RTC_init+0x7a>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  401ae6:	490f      	ldr	r1, [pc, #60]	; (401b24 <RTC_init+0x98>)
  401ae8:	4411      	add	r1, r2
  401aea:	2280      	movs	r2, #128	; 0x80
  401aec:	f881 2300 	strb.w	r2, [r1, #768]	; 0x300
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  401af0:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
	NVIC_ClearPendingIRQ(id_rtc);
	NVIC_SetPriority(id_rtc, 4);
	NVIC_EnableIRQ(id_rtc);

	/* Ativa interrupcao via alarme */
	rtc_enable_interrupt(rtc,  irq_type);
  401af4:	990d      	ldr	r1, [sp, #52]	; 0x34
  401af6:	4628      	mov	r0, r5
  401af8:	4b0b      	ldr	r3, [pc, #44]	; (401b28 <RTC_init+0x9c>)
  401afa:	4798      	blx	r3
}
  401afc:	b002      	add	sp, #8
  401afe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  401b02:	b002      	add	sp, #8
  401b04:	4770      	bx	lr
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  401b06:	f004 040f 	and.w	r4, r4, #15
  401b0a:	4a08      	ldr	r2, [pc, #32]	; (401b2c <RTC_init+0xa0>)
  401b0c:	2180      	movs	r1, #128	; 0x80
  401b0e:	5511      	strb	r1, [r2, r4]
  401b10:	e7ee      	b.n	401af0 <RTC_init+0x64>
  401b12:	bf00      	nop
  401b14:	00401175 	.word	0x00401175
  401b18:	004001ad 	.word	0x004001ad
  401b1c:	00400325 	.word	0x00400325
  401b20:	00400221 	.word	0x00400221
  401b24:	e000e100 	.word	0xe000e100
  401b28:	004001c3 	.word	0x004001c3
  401b2c:	e000ed14 	.word	0xe000ed14

00401b30 <display_date>:


void display_date(uint32_t hour, uint32_t min, uint32_t sec){
  401b30:	b510      	push	{r4, lr}
  401b32:	b0a2      	sub	sp, #136	; 0x88
	char date_str[128];
	sprintf(date_str, "%02d:%02d:%02d", hour, min, sec);
  401b34:	9200      	str	r2, [sp, #0]
  401b36:	460b      	mov	r3, r1
  401b38:	4602      	mov	r2, r0
  401b3a:	4906      	ldr	r1, [pc, #24]	; (401b54 <display_date+0x24>)
  401b3c:	a802      	add	r0, sp, #8
  401b3e:	4c06      	ldr	r4, [pc, #24]	; (401b58 <display_date+0x28>)
  401b40:	47a0      	blx	r4
	gfx_mono_draw_string(date_str, 0, 0, &sysfont);
  401b42:	4b06      	ldr	r3, [pc, #24]	; (401b5c <display_date+0x2c>)
  401b44:	2200      	movs	r2, #0
  401b46:	4611      	mov	r1, r2
  401b48:	a802      	add	r0, sp, #8
  401b4a:	4c05      	ldr	r4, [pc, #20]	; (401b60 <display_date+0x30>)
  401b4c:	47a0      	blx	r4
}
  401b4e:	b022      	add	sp, #136	; 0x88
  401b50:	bd10      	pop	{r4, pc}
  401b52:	bf00      	nop
  401b54:	00407334 	.word	0x00407334
  401b58:	00402b3d 	.word	0x00402b3d
  401b5c:	2040000c 	.word	0x2040000c
  401b60:	004007c1 	.word	0x004007c1

00401b64 <display_timer>:

void display_timer(uint32_t min, uint32_t sec){
  401b64:	b510      	push	{r4, lr}
  401b66:	b0a0      	sub	sp, #128	; 0x80
	char timer_str[128];
	sprintf(timer_str, "%02d:%02d", min, sec);
  401b68:	460b      	mov	r3, r1
  401b6a:	4602      	mov	r2, r0
  401b6c:	4905      	ldr	r1, [pc, #20]	; (401b84 <display_timer+0x20>)
  401b6e:	4668      	mov	r0, sp
  401b70:	4c05      	ldr	r4, [pc, #20]	; (401b88 <display_timer+0x24>)
  401b72:	47a0      	blx	r4
	gfx_mono_draw_string(timer_str, 20, 18, &sysfont);
  401b74:	4b05      	ldr	r3, [pc, #20]	; (401b8c <display_timer+0x28>)
  401b76:	2212      	movs	r2, #18
  401b78:	2114      	movs	r1, #20
  401b7a:	4668      	mov	r0, sp
  401b7c:	4c04      	ldr	r4, [pc, #16]	; (401b90 <display_timer+0x2c>)
  401b7e:	47a0      	blx	r4
}
  401b80:	b020      	add	sp, #128	; 0x80
  401b82:	bd10      	pop	{r4, pc}
  401b84:	00407344 	.word	0x00407344
  401b88:	00402b3d 	.word	0x00402b3d
  401b8c:	2040000c 	.word	0x2040000c
  401b90:	004007c1 	.word	0x004007c1

00401b94 <start_timer>:

void start_timer(uint32_t min, uint32_t sec){
  401b94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401b98:	4680      	mov	r8, r0
  401b9a:	460f      	mov	r7, r1
	TC_init(TC0, ID_TC1, 1, 1);
  401b9c:	4c17      	ldr	r4, [pc, #92]	; (401bfc <start_timer+0x68>)
  401b9e:	2301      	movs	r3, #1
  401ba0:	461a      	mov	r2, r3
  401ba2:	2118      	movs	r1, #24
  401ba4:	4620      	mov	r0, r4
  401ba6:	4d16      	ldr	r5, [pc, #88]	; (401c00 <start_timer+0x6c>)
  401ba8:	47a8      	blx	r5
	tc_start(TC0, 1);
  401baa:	2101      	movs	r1, #1
  401bac:	4620      	mov	r0, r4
  401bae:	4b15      	ldr	r3, [pc, #84]	; (401c04 <start_timer+0x70>)
  401bb0:	4798      	blx	r3
	
	uint32_t current_min = min;
	uint32_t current_sec = sec;
	
	int counter = 0;
	while(min*60 + sec > counter){
  401bb2:	ebc8 1408 	rsb	r4, r8, r8, lsl #4
  401bb6:	eb07 0484 	add.w	r4, r7, r4, lsl #2
	int counter = 0;
  401bba:	2500      	movs	r5, #0
		if(flag_tc_sec){
  401bbc:	4e12      	ldr	r6, [pc, #72]	; (401c08 <start_timer+0x74>)
				current_sec = 59;
				current_min-=1;
			} else {
				current_sec-=1;
			}
			display_timer(current_min, current_sec);
  401bbe:	f8df 9058 	ldr.w	r9, [pc, #88]	; 401c18 <start_timer+0x84>
	while(min*60 + sec > counter){
  401bc2:	42ac      	cmp	r4, r5
  401bc4:	d00f      	beq.n	401be6 <start_timer+0x52>
		if(flag_tc_sec){
  401bc6:	7833      	ldrb	r3, [r6, #0]
  401bc8:	2b00      	cmp	r3, #0
  401bca:	d0fa      	beq.n	401bc2 <start_timer+0x2e>
			if(current_sec == 0){
  401bcc:	b94f      	cbnz	r7, 401be2 <start_timer+0x4e>
				current_min-=1;
  401bce:	f108 38ff 	add.w	r8, r8, #4294967295
				current_sec = 59;
  401bd2:	273b      	movs	r7, #59	; 0x3b
			display_timer(current_min, current_sec);
  401bd4:	4639      	mov	r1, r7
  401bd6:	4640      	mov	r0, r8
  401bd8:	47c8      	blx	r9
			flag_tc_sec = 0;
  401bda:	2300      	movs	r3, #0
  401bdc:	7033      	strb	r3, [r6, #0]
			counter++;
  401bde:	3501      	adds	r5, #1
  401be0:	e7ef      	b.n	401bc2 <start_timer+0x2e>
				current_sec-=1;
  401be2:	3f01      	subs	r7, #1
  401be4:	e7f6      	b.n	401bd4 <start_timer+0x40>
		}
	}
	pin_toggle(LED3_PIO, LED3_PIO_IDX_MASK);
  401be6:	2104      	movs	r1, #4
  401be8:	4808      	ldr	r0, [pc, #32]	; (401c0c <start_timer+0x78>)
  401bea:	4b09      	ldr	r3, [pc, #36]	; (401c10 <start_timer+0x7c>)
  401bec:	4798      	blx	r3
	tc_stop(TC0, 1);
  401bee:	2101      	movs	r1, #1
  401bf0:	4802      	ldr	r0, [pc, #8]	; (401bfc <start_timer+0x68>)
  401bf2:	4b08      	ldr	r3, [pc, #32]	; (401c14 <start_timer+0x80>)
  401bf4:	4798      	blx	r3
  401bf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401bfa:	bf00      	nop
  401bfc:	4000c000 	.word	0x4000c000
  401c00:	004019e5 	.word	0x004019e5
  401c04:	00400549 	.word	0x00400549
  401c08:	20400c75 	.word	0x20400c75
  401c0c:	400e1000 	.word	0x400e1000
  401c10:	004019b9 	.word	0x004019b9
  401c14:	00400551 	.word	0x00400551
  401c18:	00401b65 	.word	0x00401b65
  401c1c:	00000000 	.word	0x00000000

00401c20 <main>:
}

/************************************************************************/
/* Main Code	                                                        */
/************************************************************************/
int main(void){
  401c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401c24:	ed2d 8b02 	vpush	{d8}
  401c28:	b095      	sub	sp, #84	; 0x54
	board_init();
  401c2a:	4b7b      	ldr	r3, [pc, #492]	; (401e18 <main+0x1f8>)
  401c2c:	4798      	blx	r3
	delay_init();

	init();
  401c2e:	4b7b      	ldr	r3, [pc, #492]	; (401e1c <main+0x1fc>)
  401c30:	4798      	blx	r3

	gfx_mono_ssd1306_init();
  401c32:	4b7b      	ldr	r3, [pc, #492]	; (401e20 <main+0x200>)
  401c34:	4798      	blx	r3
	
	calendar rtc_initial = {2022, 4, 6, 1, 16, 0, 0};
  401c36:	ac0d      	add	r4, sp, #52	; 0x34
  401c38:	4d7a      	ldr	r5, [pc, #488]	; (401e24 <main+0x204>)
  401c3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  401c3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  401c3e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  401c42:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	RTC_init(RTC, ID_RTC, rtc_initial, RTC_SR_SEC|RTC_SR_ALARM);
  401c46:	2306      	movs	r3, #6
  401c48:	9305      	str	r3, [sp, #20]
  401c4a:	466c      	mov	r4, sp
  401c4c:	ad0f      	add	r5, sp, #60	; 0x3c
  401c4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  401c50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  401c52:	682b      	ldr	r3, [r5, #0]
  401c54:	6023      	str	r3, [r4, #0]
  401c56:	ab0d      	add	r3, sp, #52	; 0x34
  401c58:	cb0c      	ldmia	r3, {r2, r3}
  401c5a:	2102      	movs	r1, #2
  401c5c:	4872      	ldr	r0, [pc, #456]	; (401e28 <main+0x208>)
  401c5e:	4c73      	ldr	r4, [pc, #460]	; (401e2c <main+0x20c>)
  401c60:	47a0      	blx	r4
	uint32_t current_year, current_month, current_day, current_week;
	
	uint32_t timer_min = 0;
	uint32_t timer_sec = 0;
	
	display_timer(timer_min, timer_sec);
  401c62:	2100      	movs	r1, #0
  401c64:	4608      	mov	r0, r1
  401c66:	4b72      	ldr	r3, [pc, #456]	; (401e30 <main+0x210>)
  401c68:	4798      	blx	r3
	
	float acel = 1;
  401c6a:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
	uint32_t timer_sec = 0;
  401c6e:	f04f 0900 	mov.w	r9, #0
	uint32_t timer_min = 0;
  401c72:	464c      	mov	r4, r9

	while (1) {
		if (flag_rtc_sec) {
  401c74:	4d6f      	ldr	r5, [pc, #444]	; (401e34 <main+0x214>)
				}
			}
			display_timer(timer_min,timer_sec);
			delay_ms(500/acel);
		} else if (flag_start_stop){
			pin_toggle(LED1_PIO, LED1_PIO_IDX_MASK);
  401c76:	f8df b200 	ldr.w	fp, [pc, #512]	; 401e78 <main+0x258>
			delay_ms(500/acel);
  401c7a:	eddf 8a6f 	vldr	s17, [pc, #444]	; 401e38 <main+0x218>
  401c7e:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 401e7c <main+0x25c>
			rtc_get_date(RTC, &current_year, &current_month, &current_day, &current_week);
  401c82:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 401e28 <main+0x208>
  401c86:	e017      	b.n	401cb8 <main+0x98>
			timer_min = 0;
			timer_sec = 0;
			display_timer(timer_min, timer_sec);
			pin_toggle(LED1_PIO, LED1_PIO_IDX_MASK);
		} else if (flag_incrementa_min || flag_incrementa_sec){
			acel = 1; 
  401c88:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
  401c8c:	e014      	b.n	401cb8 <main+0x98>
			flag_rtc_sec = 0;
  401c8e:	2300      	movs	r3, #0
  401c90:	702b      	strb	r3, [r5, #0]
			rtc_get_date(RTC, &current_year, &current_month, &current_day, &current_week);
  401c92:	ab06      	add	r3, sp, #24
  401c94:	9300      	str	r3, [sp, #0]
  401c96:	ab07      	add	r3, sp, #28
  401c98:	aa08      	add	r2, sp, #32
  401c9a:	a909      	add	r1, sp, #36	; 0x24
  401c9c:	4650      	mov	r0, sl
  401c9e:	4e67      	ldr	r6, [pc, #412]	; (401e3c <main+0x21c>)
  401ca0:	47b0      	blx	r6
			rtc_get_time(RTC, &current_hour, &current_min, &current_sec);
  401ca2:	ab0a      	add	r3, sp, #40	; 0x28
  401ca4:	aa0b      	add	r2, sp, #44	; 0x2c
  401ca6:	a90c      	add	r1, sp, #48	; 0x30
  401ca8:	4650      	mov	r0, sl
  401caa:	4e65      	ldr	r6, [pc, #404]	; (401e40 <main+0x220>)
  401cac:	47b0      	blx	r6
			display_date(current_hour, current_min, current_sec);
  401cae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  401cb0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  401cb2:	980c      	ldr	r0, [sp, #48]	; 0x30
  401cb4:	4b63      	ldr	r3, [pc, #396]	; (401e44 <main+0x224>)
  401cb6:	4798      	blx	r3
		if (flag_rtc_sec) {
  401cb8:	782b      	ldrb	r3, [r5, #0]
  401cba:	2b00      	cmp	r3, #0
  401cbc:	d1e7      	bne.n	401c8e <main+0x6e>
		} else if (flag_incrementa_min){
  401cbe:	4b62      	ldr	r3, [pc, #392]	; (401e48 <main+0x228>)
  401cc0:	781b      	ldrb	r3, [r3, #0]
  401cc2:	2b00      	cmp	r3, #0
  401cc4:	d03a      	beq.n	401d3c <main+0x11c>
			if(timer_min < 59){
  401cc6:	2c3a      	cmp	r4, #58	; 0x3a
  401cc8:	d814      	bhi.n	401cf4 <main+0xd4>
				timer_min++;
  401cca:	3401      	adds	r4, #1
				if(acel < 10){
  401ccc:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
  401cd0:	eeb4 8ae7 	vcmpe.f32	s16, s15
  401cd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  401cd8:	d50c      	bpl.n	401cf4 <main+0xd4>
					acel +=0.1;
  401cda:	ee18 0a10 	vmov	r0, s16
  401cde:	4b5b      	ldr	r3, [pc, #364]	; (401e4c <main+0x22c>)
  401ce0:	4798      	blx	r3
  401ce2:	a34b      	add	r3, pc, #300	; (adr r3, 401e10 <main+0x1f0>)
  401ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
  401ce8:	4e59      	ldr	r6, [pc, #356]	; (401e50 <main+0x230>)
  401cea:	47b0      	blx	r6
  401cec:	4b59      	ldr	r3, [pc, #356]	; (401e54 <main+0x234>)
  401cee:	4798      	blx	r3
  401cf0:	ee08 0a10 	vmov	s16, r0
			display_timer(timer_min,timer_sec);
  401cf4:	4649      	mov	r1, r9
  401cf6:	4620      	mov	r0, r4
  401cf8:	4b4d      	ldr	r3, [pc, #308]	; (401e30 <main+0x210>)
  401cfa:	4798      	blx	r3
			delay_ms(500/acel);
  401cfc:	eec8 7a88 	vdiv.f32	s15, s17, s16
  401d00:	eef5 7a40 	vcmp.f32	s15, #0.0
  401d04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  401d08:	d014      	beq.n	401d34 <main+0x114>
  401d0a:	ee17 0a90 	vmov	r0, s15
  401d0e:	4b52      	ldr	r3, [pc, #328]	; (401e58 <main+0x238>)
  401d10:	4798      	blx	r3
  401d12:	fba0 6708 	umull	r6, r7, r0, r8
  401d16:	fb08 7701 	mla	r7, r8, r1, r7
  401d1a:	f241 722c 	movw	r2, #5932	; 0x172c
  401d1e:	2300      	movs	r3, #0
  401d20:	f241 702b 	movw	r0, #5931	; 0x172b
  401d24:	2100      	movs	r1, #0
  401d26:	1980      	adds	r0, r0, r6
  401d28:	4179      	adcs	r1, r7
  401d2a:	4e4c      	ldr	r6, [pc, #304]	; (401e5c <main+0x23c>)
  401d2c:	47b0      	blx	r6
  401d2e:	4b4c      	ldr	r3, [pc, #304]	; (401e60 <main+0x240>)
  401d30:	4798      	blx	r3
  401d32:	e7c1      	b.n	401cb8 <main+0x98>
  401d34:	2033      	movs	r0, #51	; 0x33
  401d36:	4b4a      	ldr	r3, [pc, #296]	; (401e60 <main+0x240>)
  401d38:	4798      	blx	r3
  401d3a:	e7bd      	b.n	401cb8 <main+0x98>
		} else if (flag_incrementa_sec){
  401d3c:	4b49      	ldr	r3, [pc, #292]	; (401e64 <main+0x244>)
  401d3e:	781b      	ldrb	r3, [r3, #0]
  401d40:	2b00      	cmp	r3, #0
  401d42:	d03c      	beq.n	401dbe <main+0x19e>
			if(timer_sec < 59){
  401d44:	f1b9 0f3a 	cmp.w	r9, #58	; 0x3a
  401d48:	d815      	bhi.n	401d76 <main+0x156>
				timer_sec++;
  401d4a:	f109 0901 	add.w	r9, r9, #1
				if(acel < 10){
  401d4e:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
  401d52:	eeb4 8ae7 	vcmpe.f32	s16, s15
  401d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  401d5a:	d50c      	bpl.n	401d76 <main+0x156>
					acel +=0.1;
  401d5c:	ee18 0a10 	vmov	r0, s16
  401d60:	4b3a      	ldr	r3, [pc, #232]	; (401e4c <main+0x22c>)
  401d62:	4798      	blx	r3
  401d64:	a32a      	add	r3, pc, #168	; (adr r3, 401e10 <main+0x1f0>)
  401d66:	e9d3 2300 	ldrd	r2, r3, [r3]
  401d6a:	4e39      	ldr	r6, [pc, #228]	; (401e50 <main+0x230>)
  401d6c:	47b0      	blx	r6
  401d6e:	4b39      	ldr	r3, [pc, #228]	; (401e54 <main+0x234>)
  401d70:	4798      	blx	r3
  401d72:	ee08 0a10 	vmov	s16, r0
			display_timer(timer_min,timer_sec);
  401d76:	4649      	mov	r1, r9
  401d78:	4620      	mov	r0, r4
  401d7a:	4b2d      	ldr	r3, [pc, #180]	; (401e30 <main+0x210>)
  401d7c:	4798      	blx	r3
			delay_ms(500/acel);
  401d7e:	eec8 7a88 	vdiv.f32	s15, s17, s16
  401d82:	eef5 7a40 	vcmp.f32	s15, #0.0
  401d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  401d8a:	d014      	beq.n	401db6 <main+0x196>
  401d8c:	ee17 0a90 	vmov	r0, s15
  401d90:	4b31      	ldr	r3, [pc, #196]	; (401e58 <main+0x238>)
  401d92:	4798      	blx	r3
  401d94:	fba0 6708 	umull	r6, r7, r0, r8
  401d98:	fb08 7701 	mla	r7, r8, r1, r7
  401d9c:	f241 722c 	movw	r2, #5932	; 0x172c
  401da0:	2300      	movs	r3, #0
  401da2:	f241 702b 	movw	r0, #5931	; 0x172b
  401da6:	2100      	movs	r1, #0
  401da8:	1980      	adds	r0, r0, r6
  401daa:	4179      	adcs	r1, r7
  401dac:	4e2b      	ldr	r6, [pc, #172]	; (401e5c <main+0x23c>)
  401dae:	47b0      	blx	r6
  401db0:	4b2b      	ldr	r3, [pc, #172]	; (401e60 <main+0x240>)
  401db2:	4798      	blx	r3
  401db4:	e780      	b.n	401cb8 <main+0x98>
  401db6:	2033      	movs	r0, #51	; 0x33
  401db8:	4b29      	ldr	r3, [pc, #164]	; (401e60 <main+0x240>)
  401dba:	4798      	blx	r3
  401dbc:	e77c      	b.n	401cb8 <main+0x98>
		} else if (flag_start_stop){
  401dbe:	4b2a      	ldr	r3, [pc, #168]	; (401e68 <main+0x248>)
  401dc0:	781b      	ldrb	r3, [r3, #0]
  401dc2:	b953      	cbnz	r3, 401dda <main+0x1ba>
		} else if (flag_incrementa_min || flag_incrementa_sec){
  401dc4:	4b20      	ldr	r3, [pc, #128]	; (401e48 <main+0x228>)
  401dc6:	781b      	ldrb	r3, [r3, #0]
  401dc8:	2b00      	cmp	r3, #0
  401dca:	f47f af5d 	bne.w	401c88 <main+0x68>
  401dce:	4b25      	ldr	r3, [pc, #148]	; (401e64 <main+0x244>)
  401dd0:	781b      	ldrb	r3, [r3, #0]
  401dd2:	b1b3      	cbz	r3, 401e02 <main+0x1e2>
			acel = 1; 
  401dd4:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
  401dd8:	e76e      	b.n	401cb8 <main+0x98>
			pin_toggle(LED1_PIO, LED1_PIO_IDX_MASK);
  401dda:	2101      	movs	r1, #1
  401ddc:	4658      	mov	r0, fp
  401dde:	4e23      	ldr	r6, [pc, #140]	; (401e6c <main+0x24c>)
  401de0:	47b0      	blx	r6
			start_timer(timer_min, timer_sec);
  401de2:	4649      	mov	r1, r9
  401de4:	4620      	mov	r0, r4
  401de6:	4b22      	ldr	r3, [pc, #136]	; (401e70 <main+0x250>)
  401de8:	4798      	blx	r3
			flag_start_stop = 0;
  401dea:	2400      	movs	r4, #0
  401dec:	4b1e      	ldr	r3, [pc, #120]	; (401e68 <main+0x248>)
  401dee:	701c      	strb	r4, [r3, #0]
			display_timer(timer_min, timer_sec);
  401df0:	4621      	mov	r1, r4
  401df2:	4620      	mov	r0, r4
  401df4:	4b0e      	ldr	r3, [pc, #56]	; (401e30 <main+0x210>)
  401df6:	4798      	blx	r3
			pin_toggle(LED1_PIO, LED1_PIO_IDX_MASK);
  401df8:	2101      	movs	r1, #1
  401dfa:	4658      	mov	r0, fp
  401dfc:	47b0      	blx	r6
			timer_sec = 0;
  401dfe:	46a1      	mov	r9, r4
  401e00:	e75a      	b.n	401cb8 <main+0x98>
		}else {
			pmc_sleep(SAM_PM_SMODE_SLEEP_WFI);	
  401e02:	2002      	movs	r0, #2
  401e04:	4b1b      	ldr	r3, [pc, #108]	; (401e74 <main+0x254>)
  401e06:	4798      	blx	r3
  401e08:	e756      	b.n	401cb8 <main+0x98>
  401e0a:	bf00      	nop
  401e0c:	f3af 8000 	nop.w
  401e10:	9999999a 	.word	0x9999999a
  401e14:	3fb99999 	.word	0x3fb99999
  401e18:	00400be9 	.word	0x00400be9
  401e1c:	004018b9 	.word	0x004018b9
  401e20:	00400859 	.word	0x00400859
  401e24:	00407318 	.word	0x00407318
  401e28:	400e1860 	.word	0x400e1860
  401e2c:	00401a8d 	.word	0x00401a8d
  401e30:	00401b65 	.word	0x00401b65
  401e34:	20400c73 	.word	0x20400c73
  401e38:	43fa0000 	.word	0x43fa0000
  401e3c:	004002b1 	.word	0x004002b1
  401e40:	004001c7 	.word	0x004001c7
  401e44:	00401b31 	.word	0x00401b31
  401e48:	20400c70 	.word	0x20400c70
  401e4c:	00402149 	.word	0x00402149
  401e50:	00401e8d 	.word	0x00401e8d
  401e54:	004021f1 	.word	0x004021f1
  401e58:	004022c1 	.word	0x004022c1
  401e5c:	00402291 	.word	0x00402291
  401e60:	20400001 	.word	0x20400001
  401e64:	20400c71 	.word	0x20400c71
  401e68:	20400c74 	.word	0x20400c74
  401e6c:	004019b9 	.word	0x004019b9
  401e70:	00401b95 	.word	0x00401b95
  401e74:	00401219 	.word	0x00401219
  401e78:	400e0e00 	.word	0x400e0e00
  401e7c:	11e1a300 	.word	0x11e1a300

00401e80 <__aeabi_drsub>:
  401e80:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  401e84:	e002      	b.n	401e8c <__adddf3>
  401e86:	bf00      	nop

00401e88 <__aeabi_dsub>:
  401e88:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00401e8c <__adddf3>:
  401e8c:	b530      	push	{r4, r5, lr}
  401e8e:	ea4f 0441 	mov.w	r4, r1, lsl #1
  401e92:	ea4f 0543 	mov.w	r5, r3, lsl #1
  401e96:	ea94 0f05 	teq	r4, r5
  401e9a:	bf08      	it	eq
  401e9c:	ea90 0f02 	teqeq	r0, r2
  401ea0:	bf1f      	itttt	ne
  401ea2:	ea54 0c00 	orrsne.w	ip, r4, r0
  401ea6:	ea55 0c02 	orrsne.w	ip, r5, r2
  401eaa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  401eae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  401eb2:	f000 80e2 	beq.w	40207a <__adddf3+0x1ee>
  401eb6:	ea4f 5454 	mov.w	r4, r4, lsr #21
  401eba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  401ebe:	bfb8      	it	lt
  401ec0:	426d      	neglt	r5, r5
  401ec2:	dd0c      	ble.n	401ede <__adddf3+0x52>
  401ec4:	442c      	add	r4, r5
  401ec6:	ea80 0202 	eor.w	r2, r0, r2
  401eca:	ea81 0303 	eor.w	r3, r1, r3
  401ece:	ea82 0000 	eor.w	r0, r2, r0
  401ed2:	ea83 0101 	eor.w	r1, r3, r1
  401ed6:	ea80 0202 	eor.w	r2, r0, r2
  401eda:	ea81 0303 	eor.w	r3, r1, r3
  401ede:	2d36      	cmp	r5, #54	; 0x36
  401ee0:	bf88      	it	hi
  401ee2:	bd30      	pophi	{r4, r5, pc}
  401ee4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  401ee8:	ea4f 3101 	mov.w	r1, r1, lsl #12
  401eec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  401ef0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  401ef4:	d002      	beq.n	401efc <__adddf3+0x70>
  401ef6:	4240      	negs	r0, r0
  401ef8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  401efc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  401f00:	ea4f 3303 	mov.w	r3, r3, lsl #12
  401f04:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  401f08:	d002      	beq.n	401f10 <__adddf3+0x84>
  401f0a:	4252      	negs	r2, r2
  401f0c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  401f10:	ea94 0f05 	teq	r4, r5
  401f14:	f000 80a7 	beq.w	402066 <__adddf3+0x1da>
  401f18:	f1a4 0401 	sub.w	r4, r4, #1
  401f1c:	f1d5 0e20 	rsbs	lr, r5, #32
  401f20:	db0d      	blt.n	401f3e <__adddf3+0xb2>
  401f22:	fa02 fc0e 	lsl.w	ip, r2, lr
  401f26:	fa22 f205 	lsr.w	r2, r2, r5
  401f2a:	1880      	adds	r0, r0, r2
  401f2c:	f141 0100 	adc.w	r1, r1, #0
  401f30:	fa03 f20e 	lsl.w	r2, r3, lr
  401f34:	1880      	adds	r0, r0, r2
  401f36:	fa43 f305 	asr.w	r3, r3, r5
  401f3a:	4159      	adcs	r1, r3
  401f3c:	e00e      	b.n	401f5c <__adddf3+0xd0>
  401f3e:	f1a5 0520 	sub.w	r5, r5, #32
  401f42:	f10e 0e20 	add.w	lr, lr, #32
  401f46:	2a01      	cmp	r2, #1
  401f48:	fa03 fc0e 	lsl.w	ip, r3, lr
  401f4c:	bf28      	it	cs
  401f4e:	f04c 0c02 	orrcs.w	ip, ip, #2
  401f52:	fa43 f305 	asr.w	r3, r3, r5
  401f56:	18c0      	adds	r0, r0, r3
  401f58:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  401f5c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  401f60:	d507      	bpl.n	401f72 <__adddf3+0xe6>
  401f62:	f04f 0e00 	mov.w	lr, #0
  401f66:	f1dc 0c00 	rsbs	ip, ip, #0
  401f6a:	eb7e 0000 	sbcs.w	r0, lr, r0
  401f6e:	eb6e 0101 	sbc.w	r1, lr, r1
  401f72:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  401f76:	d31b      	bcc.n	401fb0 <__adddf3+0x124>
  401f78:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  401f7c:	d30c      	bcc.n	401f98 <__adddf3+0x10c>
  401f7e:	0849      	lsrs	r1, r1, #1
  401f80:	ea5f 0030 	movs.w	r0, r0, rrx
  401f84:	ea4f 0c3c 	mov.w	ip, ip, rrx
  401f88:	f104 0401 	add.w	r4, r4, #1
  401f8c:	ea4f 5244 	mov.w	r2, r4, lsl #21
  401f90:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  401f94:	f080 809a 	bcs.w	4020cc <__adddf3+0x240>
  401f98:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  401f9c:	bf08      	it	eq
  401f9e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  401fa2:	f150 0000 	adcs.w	r0, r0, #0
  401fa6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  401faa:	ea41 0105 	orr.w	r1, r1, r5
  401fae:	bd30      	pop	{r4, r5, pc}
  401fb0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  401fb4:	4140      	adcs	r0, r0
  401fb6:	eb41 0101 	adc.w	r1, r1, r1
  401fba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  401fbe:	f1a4 0401 	sub.w	r4, r4, #1
  401fc2:	d1e9      	bne.n	401f98 <__adddf3+0x10c>
  401fc4:	f091 0f00 	teq	r1, #0
  401fc8:	bf04      	itt	eq
  401fca:	4601      	moveq	r1, r0
  401fcc:	2000      	moveq	r0, #0
  401fce:	fab1 f381 	clz	r3, r1
  401fd2:	bf08      	it	eq
  401fd4:	3320      	addeq	r3, #32
  401fd6:	f1a3 030b 	sub.w	r3, r3, #11
  401fda:	f1b3 0220 	subs.w	r2, r3, #32
  401fde:	da0c      	bge.n	401ffa <__adddf3+0x16e>
  401fe0:	320c      	adds	r2, #12
  401fe2:	dd08      	ble.n	401ff6 <__adddf3+0x16a>
  401fe4:	f102 0c14 	add.w	ip, r2, #20
  401fe8:	f1c2 020c 	rsb	r2, r2, #12
  401fec:	fa01 f00c 	lsl.w	r0, r1, ip
  401ff0:	fa21 f102 	lsr.w	r1, r1, r2
  401ff4:	e00c      	b.n	402010 <__adddf3+0x184>
  401ff6:	f102 0214 	add.w	r2, r2, #20
  401ffa:	bfd8      	it	le
  401ffc:	f1c2 0c20 	rsble	ip, r2, #32
  402000:	fa01 f102 	lsl.w	r1, r1, r2
  402004:	fa20 fc0c 	lsr.w	ip, r0, ip
  402008:	bfdc      	itt	le
  40200a:	ea41 010c 	orrle.w	r1, r1, ip
  40200e:	4090      	lslle	r0, r2
  402010:	1ae4      	subs	r4, r4, r3
  402012:	bfa2      	ittt	ge
  402014:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  402018:	4329      	orrge	r1, r5
  40201a:	bd30      	popge	{r4, r5, pc}
  40201c:	ea6f 0404 	mvn.w	r4, r4
  402020:	3c1f      	subs	r4, #31
  402022:	da1c      	bge.n	40205e <__adddf3+0x1d2>
  402024:	340c      	adds	r4, #12
  402026:	dc0e      	bgt.n	402046 <__adddf3+0x1ba>
  402028:	f104 0414 	add.w	r4, r4, #20
  40202c:	f1c4 0220 	rsb	r2, r4, #32
  402030:	fa20 f004 	lsr.w	r0, r0, r4
  402034:	fa01 f302 	lsl.w	r3, r1, r2
  402038:	ea40 0003 	orr.w	r0, r0, r3
  40203c:	fa21 f304 	lsr.w	r3, r1, r4
  402040:	ea45 0103 	orr.w	r1, r5, r3
  402044:	bd30      	pop	{r4, r5, pc}
  402046:	f1c4 040c 	rsb	r4, r4, #12
  40204a:	f1c4 0220 	rsb	r2, r4, #32
  40204e:	fa20 f002 	lsr.w	r0, r0, r2
  402052:	fa01 f304 	lsl.w	r3, r1, r4
  402056:	ea40 0003 	orr.w	r0, r0, r3
  40205a:	4629      	mov	r1, r5
  40205c:	bd30      	pop	{r4, r5, pc}
  40205e:	fa21 f004 	lsr.w	r0, r1, r4
  402062:	4629      	mov	r1, r5
  402064:	bd30      	pop	{r4, r5, pc}
  402066:	f094 0f00 	teq	r4, #0
  40206a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  40206e:	bf06      	itte	eq
  402070:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  402074:	3401      	addeq	r4, #1
  402076:	3d01      	subne	r5, #1
  402078:	e74e      	b.n	401f18 <__adddf3+0x8c>
  40207a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40207e:	bf18      	it	ne
  402080:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  402084:	d029      	beq.n	4020da <__adddf3+0x24e>
  402086:	ea94 0f05 	teq	r4, r5
  40208a:	bf08      	it	eq
  40208c:	ea90 0f02 	teqeq	r0, r2
  402090:	d005      	beq.n	40209e <__adddf3+0x212>
  402092:	ea54 0c00 	orrs.w	ip, r4, r0
  402096:	bf04      	itt	eq
  402098:	4619      	moveq	r1, r3
  40209a:	4610      	moveq	r0, r2
  40209c:	bd30      	pop	{r4, r5, pc}
  40209e:	ea91 0f03 	teq	r1, r3
  4020a2:	bf1e      	ittt	ne
  4020a4:	2100      	movne	r1, #0
  4020a6:	2000      	movne	r0, #0
  4020a8:	bd30      	popne	{r4, r5, pc}
  4020aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  4020ae:	d105      	bne.n	4020bc <__adddf3+0x230>
  4020b0:	0040      	lsls	r0, r0, #1
  4020b2:	4149      	adcs	r1, r1
  4020b4:	bf28      	it	cs
  4020b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  4020ba:	bd30      	pop	{r4, r5, pc}
  4020bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  4020c0:	bf3c      	itt	cc
  4020c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  4020c6:	bd30      	popcc	{r4, r5, pc}
  4020c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4020cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  4020d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4020d4:	f04f 0000 	mov.w	r0, #0
  4020d8:	bd30      	pop	{r4, r5, pc}
  4020da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  4020de:	bf1a      	itte	ne
  4020e0:	4619      	movne	r1, r3
  4020e2:	4610      	movne	r0, r2
  4020e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  4020e8:	bf1c      	itt	ne
  4020ea:	460b      	movne	r3, r1
  4020ec:	4602      	movne	r2, r0
  4020ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4020f2:	bf06      	itte	eq
  4020f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  4020f8:	ea91 0f03 	teqeq	r1, r3
  4020fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  402100:	bd30      	pop	{r4, r5, pc}
  402102:	bf00      	nop

00402104 <__aeabi_ui2d>:
  402104:	f090 0f00 	teq	r0, #0
  402108:	bf04      	itt	eq
  40210a:	2100      	moveq	r1, #0
  40210c:	4770      	bxeq	lr
  40210e:	b530      	push	{r4, r5, lr}
  402110:	f44f 6480 	mov.w	r4, #1024	; 0x400
  402114:	f104 0432 	add.w	r4, r4, #50	; 0x32
  402118:	f04f 0500 	mov.w	r5, #0
  40211c:	f04f 0100 	mov.w	r1, #0
  402120:	e750      	b.n	401fc4 <__adddf3+0x138>
  402122:	bf00      	nop

00402124 <__aeabi_i2d>:
  402124:	f090 0f00 	teq	r0, #0
  402128:	bf04      	itt	eq
  40212a:	2100      	moveq	r1, #0
  40212c:	4770      	bxeq	lr
  40212e:	b530      	push	{r4, r5, lr}
  402130:	f44f 6480 	mov.w	r4, #1024	; 0x400
  402134:	f104 0432 	add.w	r4, r4, #50	; 0x32
  402138:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  40213c:	bf48      	it	mi
  40213e:	4240      	negmi	r0, r0
  402140:	f04f 0100 	mov.w	r1, #0
  402144:	e73e      	b.n	401fc4 <__adddf3+0x138>
  402146:	bf00      	nop

00402148 <__aeabi_f2d>:
  402148:	0042      	lsls	r2, r0, #1
  40214a:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40214e:	ea4f 0131 	mov.w	r1, r1, rrx
  402152:	ea4f 7002 	mov.w	r0, r2, lsl #28
  402156:	bf1f      	itttt	ne
  402158:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  40215c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  402160:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  402164:	4770      	bxne	lr
  402166:	f092 0f00 	teq	r2, #0
  40216a:	bf14      	ite	ne
  40216c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  402170:	4770      	bxeq	lr
  402172:	b530      	push	{r4, r5, lr}
  402174:	f44f 7460 	mov.w	r4, #896	; 0x380
  402178:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40217c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  402180:	e720      	b.n	401fc4 <__adddf3+0x138>
  402182:	bf00      	nop

00402184 <__aeabi_ul2d>:
  402184:	ea50 0201 	orrs.w	r2, r0, r1
  402188:	bf08      	it	eq
  40218a:	4770      	bxeq	lr
  40218c:	b530      	push	{r4, r5, lr}
  40218e:	f04f 0500 	mov.w	r5, #0
  402192:	e00a      	b.n	4021aa <__aeabi_l2d+0x16>

00402194 <__aeabi_l2d>:
  402194:	ea50 0201 	orrs.w	r2, r0, r1
  402198:	bf08      	it	eq
  40219a:	4770      	bxeq	lr
  40219c:	b530      	push	{r4, r5, lr}
  40219e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  4021a2:	d502      	bpl.n	4021aa <__aeabi_l2d+0x16>
  4021a4:	4240      	negs	r0, r0
  4021a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4021aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4021ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4021b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  4021b6:	f43f aedc 	beq.w	401f72 <__adddf3+0xe6>
  4021ba:	f04f 0203 	mov.w	r2, #3
  4021be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4021c2:	bf18      	it	ne
  4021c4:	3203      	addne	r2, #3
  4021c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4021ca:	bf18      	it	ne
  4021cc:	3203      	addne	r2, #3
  4021ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  4021d2:	f1c2 0320 	rsb	r3, r2, #32
  4021d6:	fa00 fc03 	lsl.w	ip, r0, r3
  4021da:	fa20 f002 	lsr.w	r0, r0, r2
  4021de:	fa01 fe03 	lsl.w	lr, r1, r3
  4021e2:	ea40 000e 	orr.w	r0, r0, lr
  4021e6:	fa21 f102 	lsr.w	r1, r1, r2
  4021ea:	4414      	add	r4, r2
  4021ec:	e6c1      	b.n	401f72 <__adddf3+0xe6>
  4021ee:	bf00      	nop

004021f0 <__aeabi_d2f>:
  4021f0:	ea4f 0241 	mov.w	r2, r1, lsl #1
  4021f4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  4021f8:	bf24      	itt	cs
  4021fa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  4021fe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  402202:	d90d      	bls.n	402220 <__aeabi_d2f+0x30>
  402204:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  402208:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  40220c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  402210:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  402214:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  402218:	bf08      	it	eq
  40221a:	f020 0001 	biceq.w	r0, r0, #1
  40221e:	4770      	bx	lr
  402220:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  402224:	d121      	bne.n	40226a <__aeabi_d2f+0x7a>
  402226:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  40222a:	bfbc      	itt	lt
  40222c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  402230:	4770      	bxlt	lr
  402232:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  402236:	ea4f 5252 	mov.w	r2, r2, lsr #21
  40223a:	f1c2 0218 	rsb	r2, r2, #24
  40223e:	f1c2 0c20 	rsb	ip, r2, #32
  402242:	fa10 f30c 	lsls.w	r3, r0, ip
  402246:	fa20 f002 	lsr.w	r0, r0, r2
  40224a:	bf18      	it	ne
  40224c:	f040 0001 	orrne.w	r0, r0, #1
  402250:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  402254:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  402258:	fa03 fc0c 	lsl.w	ip, r3, ip
  40225c:	ea40 000c 	orr.w	r0, r0, ip
  402260:	fa23 f302 	lsr.w	r3, r3, r2
  402264:	ea4f 0343 	mov.w	r3, r3, lsl #1
  402268:	e7cc      	b.n	402204 <__aeabi_d2f+0x14>
  40226a:	ea7f 5362 	mvns.w	r3, r2, asr #21
  40226e:	d107      	bne.n	402280 <__aeabi_d2f+0x90>
  402270:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  402274:	bf1e      	ittt	ne
  402276:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  40227a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  40227e:	4770      	bxne	lr
  402280:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  402284:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  402288:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  40228c:	4770      	bx	lr
  40228e:	bf00      	nop

00402290 <__aeabi_uldivmod>:
  402290:	b953      	cbnz	r3, 4022a8 <__aeabi_uldivmod+0x18>
  402292:	b94a      	cbnz	r2, 4022a8 <__aeabi_uldivmod+0x18>
  402294:	2900      	cmp	r1, #0
  402296:	bf08      	it	eq
  402298:	2800      	cmpeq	r0, #0
  40229a:	bf1c      	itt	ne
  40229c:	f04f 31ff 	movne.w	r1, #4294967295
  4022a0:	f04f 30ff 	movne.w	r0, #4294967295
  4022a4:	f000 b9a0 	b.w	4025e8 <__aeabi_idiv0>
  4022a8:	f1ad 0c08 	sub.w	ip, sp, #8
  4022ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  4022b0:	f000 f82c 	bl	40230c <__udivmoddi4>
  4022b4:	f8dd e004 	ldr.w	lr, [sp, #4]
  4022b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4022bc:	b004      	add	sp, #16
  4022be:	4770      	bx	lr

004022c0 <__aeabi_f2ulz>:
  4022c0:	b5d0      	push	{r4, r6, r7, lr}
  4022c2:	f7ff ff41 	bl	402148 <__aeabi_f2d>
  4022c6:	2200      	movs	r2, #0
  4022c8:	4b0e      	ldr	r3, [pc, #56]	; (402304 <__aeabi_f2ulz+0x44>)
  4022ca:	4606      	mov	r6, r0
  4022cc:	460f      	mov	r7, r1
  4022ce:	f000 f98d 	bl	4025ec <__aeabi_dmul>
  4022d2:	f000 fb9d 	bl	402a10 <__aeabi_d2uiz>
  4022d6:	4604      	mov	r4, r0
  4022d8:	f7ff ff14 	bl	402104 <__aeabi_ui2d>
  4022dc:	2200      	movs	r2, #0
  4022de:	4b0a      	ldr	r3, [pc, #40]	; (402308 <__aeabi_f2ulz+0x48>)
  4022e0:	f000 f984 	bl	4025ec <__aeabi_dmul>
  4022e4:	4602      	mov	r2, r0
  4022e6:	460b      	mov	r3, r1
  4022e8:	4630      	mov	r0, r6
  4022ea:	4639      	mov	r1, r7
  4022ec:	f7ff fdcc 	bl	401e88 <__aeabi_dsub>
  4022f0:	f000 fb8e 	bl	402a10 <__aeabi_d2uiz>
  4022f4:	4623      	mov	r3, r4
  4022f6:	2200      	movs	r2, #0
  4022f8:	ea42 0200 	orr.w	r2, r2, r0
  4022fc:	4610      	mov	r0, r2
  4022fe:	4619      	mov	r1, r3
  402300:	bdd0      	pop	{r4, r6, r7, pc}
  402302:	bf00      	nop
  402304:	3df00000 	.word	0x3df00000
  402308:	41f00000 	.word	0x41f00000

0040230c <__udivmoddi4>:
  40230c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402310:	468c      	mov	ip, r1
  402312:	460d      	mov	r5, r1
  402314:	4604      	mov	r4, r0
  402316:	9e08      	ldr	r6, [sp, #32]
  402318:	2b00      	cmp	r3, #0
  40231a:	d151      	bne.n	4023c0 <__udivmoddi4+0xb4>
  40231c:	428a      	cmp	r2, r1
  40231e:	4617      	mov	r7, r2
  402320:	d96d      	bls.n	4023fe <__udivmoddi4+0xf2>
  402322:	fab2 fe82 	clz	lr, r2
  402326:	f1be 0f00 	cmp.w	lr, #0
  40232a:	d00b      	beq.n	402344 <__udivmoddi4+0x38>
  40232c:	f1ce 0c20 	rsb	ip, lr, #32
  402330:	fa01 f50e 	lsl.w	r5, r1, lr
  402334:	fa20 fc0c 	lsr.w	ip, r0, ip
  402338:	fa02 f70e 	lsl.w	r7, r2, lr
  40233c:	ea4c 0c05 	orr.w	ip, ip, r5
  402340:	fa00 f40e 	lsl.w	r4, r0, lr
  402344:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  402348:	0c25      	lsrs	r5, r4, #16
  40234a:	fbbc f8fa 	udiv	r8, ip, sl
  40234e:	fa1f f987 	uxth.w	r9, r7
  402352:	fb0a cc18 	mls	ip, sl, r8, ip
  402356:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  40235a:	fb08 f309 	mul.w	r3, r8, r9
  40235e:	42ab      	cmp	r3, r5
  402360:	d90a      	bls.n	402378 <__udivmoddi4+0x6c>
  402362:	19ed      	adds	r5, r5, r7
  402364:	f108 32ff 	add.w	r2, r8, #4294967295
  402368:	f080 8123 	bcs.w	4025b2 <__udivmoddi4+0x2a6>
  40236c:	42ab      	cmp	r3, r5
  40236e:	f240 8120 	bls.w	4025b2 <__udivmoddi4+0x2a6>
  402372:	f1a8 0802 	sub.w	r8, r8, #2
  402376:	443d      	add	r5, r7
  402378:	1aed      	subs	r5, r5, r3
  40237a:	b2a4      	uxth	r4, r4
  40237c:	fbb5 f0fa 	udiv	r0, r5, sl
  402380:	fb0a 5510 	mls	r5, sl, r0, r5
  402384:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  402388:	fb00 f909 	mul.w	r9, r0, r9
  40238c:	45a1      	cmp	r9, r4
  40238e:	d909      	bls.n	4023a4 <__udivmoddi4+0x98>
  402390:	19e4      	adds	r4, r4, r7
  402392:	f100 33ff 	add.w	r3, r0, #4294967295
  402396:	f080 810a 	bcs.w	4025ae <__udivmoddi4+0x2a2>
  40239a:	45a1      	cmp	r9, r4
  40239c:	f240 8107 	bls.w	4025ae <__udivmoddi4+0x2a2>
  4023a0:	3802      	subs	r0, #2
  4023a2:	443c      	add	r4, r7
  4023a4:	eba4 0409 	sub.w	r4, r4, r9
  4023a8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  4023ac:	2100      	movs	r1, #0
  4023ae:	2e00      	cmp	r6, #0
  4023b0:	d061      	beq.n	402476 <__udivmoddi4+0x16a>
  4023b2:	fa24 f40e 	lsr.w	r4, r4, lr
  4023b6:	2300      	movs	r3, #0
  4023b8:	6034      	str	r4, [r6, #0]
  4023ba:	6073      	str	r3, [r6, #4]
  4023bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4023c0:	428b      	cmp	r3, r1
  4023c2:	d907      	bls.n	4023d4 <__udivmoddi4+0xc8>
  4023c4:	2e00      	cmp	r6, #0
  4023c6:	d054      	beq.n	402472 <__udivmoddi4+0x166>
  4023c8:	2100      	movs	r1, #0
  4023ca:	e886 0021 	stmia.w	r6, {r0, r5}
  4023ce:	4608      	mov	r0, r1
  4023d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4023d4:	fab3 f183 	clz	r1, r3
  4023d8:	2900      	cmp	r1, #0
  4023da:	f040 808e 	bne.w	4024fa <__udivmoddi4+0x1ee>
  4023de:	42ab      	cmp	r3, r5
  4023e0:	d302      	bcc.n	4023e8 <__udivmoddi4+0xdc>
  4023e2:	4282      	cmp	r2, r0
  4023e4:	f200 80fa 	bhi.w	4025dc <__udivmoddi4+0x2d0>
  4023e8:	1a84      	subs	r4, r0, r2
  4023ea:	eb65 0503 	sbc.w	r5, r5, r3
  4023ee:	2001      	movs	r0, #1
  4023f0:	46ac      	mov	ip, r5
  4023f2:	2e00      	cmp	r6, #0
  4023f4:	d03f      	beq.n	402476 <__udivmoddi4+0x16a>
  4023f6:	e886 1010 	stmia.w	r6, {r4, ip}
  4023fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4023fe:	b912      	cbnz	r2, 402406 <__udivmoddi4+0xfa>
  402400:	2701      	movs	r7, #1
  402402:	fbb7 f7f2 	udiv	r7, r7, r2
  402406:	fab7 fe87 	clz	lr, r7
  40240a:	f1be 0f00 	cmp.w	lr, #0
  40240e:	d134      	bne.n	40247a <__udivmoddi4+0x16e>
  402410:	1beb      	subs	r3, r5, r7
  402412:	0c3a      	lsrs	r2, r7, #16
  402414:	fa1f fc87 	uxth.w	ip, r7
  402418:	2101      	movs	r1, #1
  40241a:	fbb3 f8f2 	udiv	r8, r3, r2
  40241e:	0c25      	lsrs	r5, r4, #16
  402420:	fb02 3318 	mls	r3, r2, r8, r3
  402424:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  402428:	fb0c f308 	mul.w	r3, ip, r8
  40242c:	42ab      	cmp	r3, r5
  40242e:	d907      	bls.n	402440 <__udivmoddi4+0x134>
  402430:	19ed      	adds	r5, r5, r7
  402432:	f108 30ff 	add.w	r0, r8, #4294967295
  402436:	d202      	bcs.n	40243e <__udivmoddi4+0x132>
  402438:	42ab      	cmp	r3, r5
  40243a:	f200 80d1 	bhi.w	4025e0 <__udivmoddi4+0x2d4>
  40243e:	4680      	mov	r8, r0
  402440:	1aed      	subs	r5, r5, r3
  402442:	b2a3      	uxth	r3, r4
  402444:	fbb5 f0f2 	udiv	r0, r5, r2
  402448:	fb02 5510 	mls	r5, r2, r0, r5
  40244c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  402450:	fb0c fc00 	mul.w	ip, ip, r0
  402454:	45a4      	cmp	ip, r4
  402456:	d907      	bls.n	402468 <__udivmoddi4+0x15c>
  402458:	19e4      	adds	r4, r4, r7
  40245a:	f100 33ff 	add.w	r3, r0, #4294967295
  40245e:	d202      	bcs.n	402466 <__udivmoddi4+0x15a>
  402460:	45a4      	cmp	ip, r4
  402462:	f200 80b8 	bhi.w	4025d6 <__udivmoddi4+0x2ca>
  402466:	4618      	mov	r0, r3
  402468:	eba4 040c 	sub.w	r4, r4, ip
  40246c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  402470:	e79d      	b.n	4023ae <__udivmoddi4+0xa2>
  402472:	4631      	mov	r1, r6
  402474:	4630      	mov	r0, r6
  402476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40247a:	f1ce 0420 	rsb	r4, lr, #32
  40247e:	fa05 f30e 	lsl.w	r3, r5, lr
  402482:	fa07 f70e 	lsl.w	r7, r7, lr
  402486:	fa20 f804 	lsr.w	r8, r0, r4
  40248a:	0c3a      	lsrs	r2, r7, #16
  40248c:	fa25 f404 	lsr.w	r4, r5, r4
  402490:	ea48 0803 	orr.w	r8, r8, r3
  402494:	fbb4 f1f2 	udiv	r1, r4, r2
  402498:	ea4f 4518 	mov.w	r5, r8, lsr #16
  40249c:	fb02 4411 	mls	r4, r2, r1, r4
  4024a0:	fa1f fc87 	uxth.w	ip, r7
  4024a4:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  4024a8:	fb01 f30c 	mul.w	r3, r1, ip
  4024ac:	42ab      	cmp	r3, r5
  4024ae:	fa00 f40e 	lsl.w	r4, r0, lr
  4024b2:	d909      	bls.n	4024c8 <__udivmoddi4+0x1bc>
  4024b4:	19ed      	adds	r5, r5, r7
  4024b6:	f101 30ff 	add.w	r0, r1, #4294967295
  4024ba:	f080 808a 	bcs.w	4025d2 <__udivmoddi4+0x2c6>
  4024be:	42ab      	cmp	r3, r5
  4024c0:	f240 8087 	bls.w	4025d2 <__udivmoddi4+0x2c6>
  4024c4:	3902      	subs	r1, #2
  4024c6:	443d      	add	r5, r7
  4024c8:	1aeb      	subs	r3, r5, r3
  4024ca:	fa1f f588 	uxth.w	r5, r8
  4024ce:	fbb3 f0f2 	udiv	r0, r3, r2
  4024d2:	fb02 3310 	mls	r3, r2, r0, r3
  4024d6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  4024da:	fb00 f30c 	mul.w	r3, r0, ip
  4024de:	42ab      	cmp	r3, r5
  4024e0:	d907      	bls.n	4024f2 <__udivmoddi4+0x1e6>
  4024e2:	19ed      	adds	r5, r5, r7
  4024e4:	f100 38ff 	add.w	r8, r0, #4294967295
  4024e8:	d26f      	bcs.n	4025ca <__udivmoddi4+0x2be>
  4024ea:	42ab      	cmp	r3, r5
  4024ec:	d96d      	bls.n	4025ca <__udivmoddi4+0x2be>
  4024ee:	3802      	subs	r0, #2
  4024f0:	443d      	add	r5, r7
  4024f2:	1aeb      	subs	r3, r5, r3
  4024f4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  4024f8:	e78f      	b.n	40241a <__udivmoddi4+0x10e>
  4024fa:	f1c1 0720 	rsb	r7, r1, #32
  4024fe:	fa22 f807 	lsr.w	r8, r2, r7
  402502:	408b      	lsls	r3, r1
  402504:	fa05 f401 	lsl.w	r4, r5, r1
  402508:	ea48 0303 	orr.w	r3, r8, r3
  40250c:	fa20 fe07 	lsr.w	lr, r0, r7
  402510:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  402514:	40fd      	lsrs	r5, r7
  402516:	ea4e 0e04 	orr.w	lr, lr, r4
  40251a:	fbb5 f9fc 	udiv	r9, r5, ip
  40251e:	ea4f 441e 	mov.w	r4, lr, lsr #16
  402522:	fb0c 5519 	mls	r5, ip, r9, r5
  402526:	fa1f f883 	uxth.w	r8, r3
  40252a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40252e:	fb09 f408 	mul.w	r4, r9, r8
  402532:	42ac      	cmp	r4, r5
  402534:	fa02 f201 	lsl.w	r2, r2, r1
  402538:	fa00 fa01 	lsl.w	sl, r0, r1
  40253c:	d908      	bls.n	402550 <__udivmoddi4+0x244>
  40253e:	18ed      	adds	r5, r5, r3
  402540:	f109 30ff 	add.w	r0, r9, #4294967295
  402544:	d243      	bcs.n	4025ce <__udivmoddi4+0x2c2>
  402546:	42ac      	cmp	r4, r5
  402548:	d941      	bls.n	4025ce <__udivmoddi4+0x2c2>
  40254a:	f1a9 0902 	sub.w	r9, r9, #2
  40254e:	441d      	add	r5, r3
  402550:	1b2d      	subs	r5, r5, r4
  402552:	fa1f fe8e 	uxth.w	lr, lr
  402556:	fbb5 f0fc 	udiv	r0, r5, ip
  40255a:	fb0c 5510 	mls	r5, ip, r0, r5
  40255e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  402562:	fb00 f808 	mul.w	r8, r0, r8
  402566:	45a0      	cmp	r8, r4
  402568:	d907      	bls.n	40257a <__udivmoddi4+0x26e>
  40256a:	18e4      	adds	r4, r4, r3
  40256c:	f100 35ff 	add.w	r5, r0, #4294967295
  402570:	d229      	bcs.n	4025c6 <__udivmoddi4+0x2ba>
  402572:	45a0      	cmp	r8, r4
  402574:	d927      	bls.n	4025c6 <__udivmoddi4+0x2ba>
  402576:	3802      	subs	r0, #2
  402578:	441c      	add	r4, r3
  40257a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  40257e:	eba4 0408 	sub.w	r4, r4, r8
  402582:	fba0 8902 	umull	r8, r9, r0, r2
  402586:	454c      	cmp	r4, r9
  402588:	46c6      	mov	lr, r8
  40258a:	464d      	mov	r5, r9
  40258c:	d315      	bcc.n	4025ba <__udivmoddi4+0x2ae>
  40258e:	d012      	beq.n	4025b6 <__udivmoddi4+0x2aa>
  402590:	b156      	cbz	r6, 4025a8 <__udivmoddi4+0x29c>
  402592:	ebba 030e 	subs.w	r3, sl, lr
  402596:	eb64 0405 	sbc.w	r4, r4, r5
  40259a:	fa04 f707 	lsl.w	r7, r4, r7
  40259e:	40cb      	lsrs	r3, r1
  4025a0:	431f      	orrs	r7, r3
  4025a2:	40cc      	lsrs	r4, r1
  4025a4:	6037      	str	r7, [r6, #0]
  4025a6:	6074      	str	r4, [r6, #4]
  4025a8:	2100      	movs	r1, #0
  4025aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4025ae:	4618      	mov	r0, r3
  4025b0:	e6f8      	b.n	4023a4 <__udivmoddi4+0x98>
  4025b2:	4690      	mov	r8, r2
  4025b4:	e6e0      	b.n	402378 <__udivmoddi4+0x6c>
  4025b6:	45c2      	cmp	sl, r8
  4025b8:	d2ea      	bcs.n	402590 <__udivmoddi4+0x284>
  4025ba:	ebb8 0e02 	subs.w	lr, r8, r2
  4025be:	eb69 0503 	sbc.w	r5, r9, r3
  4025c2:	3801      	subs	r0, #1
  4025c4:	e7e4      	b.n	402590 <__udivmoddi4+0x284>
  4025c6:	4628      	mov	r0, r5
  4025c8:	e7d7      	b.n	40257a <__udivmoddi4+0x26e>
  4025ca:	4640      	mov	r0, r8
  4025cc:	e791      	b.n	4024f2 <__udivmoddi4+0x1e6>
  4025ce:	4681      	mov	r9, r0
  4025d0:	e7be      	b.n	402550 <__udivmoddi4+0x244>
  4025d2:	4601      	mov	r1, r0
  4025d4:	e778      	b.n	4024c8 <__udivmoddi4+0x1bc>
  4025d6:	3802      	subs	r0, #2
  4025d8:	443c      	add	r4, r7
  4025da:	e745      	b.n	402468 <__udivmoddi4+0x15c>
  4025dc:	4608      	mov	r0, r1
  4025de:	e708      	b.n	4023f2 <__udivmoddi4+0xe6>
  4025e0:	f1a8 0802 	sub.w	r8, r8, #2
  4025e4:	443d      	add	r5, r7
  4025e6:	e72b      	b.n	402440 <__udivmoddi4+0x134>

004025e8 <__aeabi_idiv0>:
  4025e8:	4770      	bx	lr
  4025ea:	bf00      	nop

004025ec <__aeabi_dmul>:
  4025ec:	b570      	push	{r4, r5, r6, lr}
  4025ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4025f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4025f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4025fa:	bf1d      	ittte	ne
  4025fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  402600:	ea94 0f0c 	teqne	r4, ip
  402604:	ea95 0f0c 	teqne	r5, ip
  402608:	f000 f8de 	bleq	4027c8 <__aeabi_dmul+0x1dc>
  40260c:	442c      	add	r4, r5
  40260e:	ea81 0603 	eor.w	r6, r1, r3
  402612:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  402616:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  40261a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  40261e:	bf18      	it	ne
  402620:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  402624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  402628:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40262c:	d038      	beq.n	4026a0 <__aeabi_dmul+0xb4>
  40262e:	fba0 ce02 	umull	ip, lr, r0, r2
  402632:	f04f 0500 	mov.w	r5, #0
  402636:	fbe1 e502 	umlal	lr, r5, r1, r2
  40263a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  40263e:	fbe0 e503 	umlal	lr, r5, r0, r3
  402642:	f04f 0600 	mov.w	r6, #0
  402646:	fbe1 5603 	umlal	r5, r6, r1, r3
  40264a:	f09c 0f00 	teq	ip, #0
  40264e:	bf18      	it	ne
  402650:	f04e 0e01 	orrne.w	lr, lr, #1
  402654:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  402658:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  40265c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  402660:	d204      	bcs.n	40266c <__aeabi_dmul+0x80>
  402662:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  402666:	416d      	adcs	r5, r5
  402668:	eb46 0606 	adc.w	r6, r6, r6
  40266c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  402670:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  402674:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  402678:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  40267c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  402680:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  402684:	bf88      	it	hi
  402686:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40268a:	d81e      	bhi.n	4026ca <__aeabi_dmul+0xde>
  40268c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  402690:	bf08      	it	eq
  402692:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  402696:	f150 0000 	adcs.w	r0, r0, #0
  40269a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40269e:	bd70      	pop	{r4, r5, r6, pc}
  4026a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  4026a4:	ea46 0101 	orr.w	r1, r6, r1
  4026a8:	ea40 0002 	orr.w	r0, r0, r2
  4026ac:	ea81 0103 	eor.w	r1, r1, r3
  4026b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  4026b4:	bfc2      	ittt	gt
  4026b6:	ebd4 050c 	rsbsgt	r5, r4, ip
  4026ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4026be:	bd70      	popgt	{r4, r5, r6, pc}
  4026c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4026c4:	f04f 0e00 	mov.w	lr, #0
  4026c8:	3c01      	subs	r4, #1
  4026ca:	f300 80ab 	bgt.w	402824 <__aeabi_dmul+0x238>
  4026ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
  4026d2:	bfde      	ittt	le
  4026d4:	2000      	movle	r0, #0
  4026d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  4026da:	bd70      	pople	{r4, r5, r6, pc}
  4026dc:	f1c4 0400 	rsb	r4, r4, #0
  4026e0:	3c20      	subs	r4, #32
  4026e2:	da35      	bge.n	402750 <__aeabi_dmul+0x164>
  4026e4:	340c      	adds	r4, #12
  4026e6:	dc1b      	bgt.n	402720 <__aeabi_dmul+0x134>
  4026e8:	f104 0414 	add.w	r4, r4, #20
  4026ec:	f1c4 0520 	rsb	r5, r4, #32
  4026f0:	fa00 f305 	lsl.w	r3, r0, r5
  4026f4:	fa20 f004 	lsr.w	r0, r0, r4
  4026f8:	fa01 f205 	lsl.w	r2, r1, r5
  4026fc:	ea40 0002 	orr.w	r0, r0, r2
  402700:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  402704:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  402708:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40270c:	fa21 f604 	lsr.w	r6, r1, r4
  402710:	eb42 0106 	adc.w	r1, r2, r6
  402714:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  402718:	bf08      	it	eq
  40271a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40271e:	bd70      	pop	{r4, r5, r6, pc}
  402720:	f1c4 040c 	rsb	r4, r4, #12
  402724:	f1c4 0520 	rsb	r5, r4, #32
  402728:	fa00 f304 	lsl.w	r3, r0, r4
  40272c:	fa20 f005 	lsr.w	r0, r0, r5
  402730:	fa01 f204 	lsl.w	r2, r1, r4
  402734:	ea40 0002 	orr.w	r0, r0, r2
  402738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40273c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  402740:	f141 0100 	adc.w	r1, r1, #0
  402744:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  402748:	bf08      	it	eq
  40274a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40274e:	bd70      	pop	{r4, r5, r6, pc}
  402750:	f1c4 0520 	rsb	r5, r4, #32
  402754:	fa00 f205 	lsl.w	r2, r0, r5
  402758:	ea4e 0e02 	orr.w	lr, lr, r2
  40275c:	fa20 f304 	lsr.w	r3, r0, r4
  402760:	fa01 f205 	lsl.w	r2, r1, r5
  402764:	ea43 0302 	orr.w	r3, r3, r2
  402768:	fa21 f004 	lsr.w	r0, r1, r4
  40276c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  402770:	fa21 f204 	lsr.w	r2, r1, r4
  402774:	ea20 0002 	bic.w	r0, r0, r2
  402778:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  40277c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  402780:	bf08      	it	eq
  402782:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  402786:	bd70      	pop	{r4, r5, r6, pc}
  402788:	f094 0f00 	teq	r4, #0
  40278c:	d10f      	bne.n	4027ae <__aeabi_dmul+0x1c2>
  40278e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  402792:	0040      	lsls	r0, r0, #1
  402794:	eb41 0101 	adc.w	r1, r1, r1
  402798:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40279c:	bf08      	it	eq
  40279e:	3c01      	subeq	r4, #1
  4027a0:	d0f7      	beq.n	402792 <__aeabi_dmul+0x1a6>
  4027a2:	ea41 0106 	orr.w	r1, r1, r6
  4027a6:	f095 0f00 	teq	r5, #0
  4027aa:	bf18      	it	ne
  4027ac:	4770      	bxne	lr
  4027ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  4027b2:	0052      	lsls	r2, r2, #1
  4027b4:	eb43 0303 	adc.w	r3, r3, r3
  4027b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  4027bc:	bf08      	it	eq
  4027be:	3d01      	subeq	r5, #1
  4027c0:	d0f7      	beq.n	4027b2 <__aeabi_dmul+0x1c6>
  4027c2:	ea43 0306 	orr.w	r3, r3, r6
  4027c6:	4770      	bx	lr
  4027c8:	ea94 0f0c 	teq	r4, ip
  4027cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4027d0:	bf18      	it	ne
  4027d2:	ea95 0f0c 	teqne	r5, ip
  4027d6:	d00c      	beq.n	4027f2 <__aeabi_dmul+0x206>
  4027d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4027dc:	bf18      	it	ne
  4027de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4027e2:	d1d1      	bne.n	402788 <__aeabi_dmul+0x19c>
  4027e4:	ea81 0103 	eor.w	r1, r1, r3
  4027e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4027ec:	f04f 0000 	mov.w	r0, #0
  4027f0:	bd70      	pop	{r4, r5, r6, pc}
  4027f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4027f6:	bf06      	itte	eq
  4027f8:	4610      	moveq	r0, r2
  4027fa:	4619      	moveq	r1, r3
  4027fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  402800:	d019      	beq.n	402836 <__aeabi_dmul+0x24a>
  402802:	ea94 0f0c 	teq	r4, ip
  402806:	d102      	bne.n	40280e <__aeabi_dmul+0x222>
  402808:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  40280c:	d113      	bne.n	402836 <__aeabi_dmul+0x24a>
  40280e:	ea95 0f0c 	teq	r5, ip
  402812:	d105      	bne.n	402820 <__aeabi_dmul+0x234>
  402814:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  402818:	bf1c      	itt	ne
  40281a:	4610      	movne	r0, r2
  40281c:	4619      	movne	r1, r3
  40281e:	d10a      	bne.n	402836 <__aeabi_dmul+0x24a>
  402820:	ea81 0103 	eor.w	r1, r1, r3
  402824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  402828:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40282c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  402830:	f04f 0000 	mov.w	r0, #0
  402834:	bd70      	pop	{r4, r5, r6, pc}
  402836:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40283a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  40283e:	bd70      	pop	{r4, r5, r6, pc}

00402840 <__aeabi_ddiv>:
  402840:	b570      	push	{r4, r5, r6, lr}
  402842:	f04f 0cff 	mov.w	ip, #255	; 0xff
  402846:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40284a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40284e:	bf1d      	ittte	ne
  402850:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  402854:	ea94 0f0c 	teqne	r4, ip
  402858:	ea95 0f0c 	teqne	r5, ip
  40285c:	f000 f8a7 	bleq	4029ae <__aeabi_ddiv+0x16e>
  402860:	eba4 0405 	sub.w	r4, r4, r5
  402864:	ea81 0e03 	eor.w	lr, r1, r3
  402868:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40286c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  402870:	f000 8088 	beq.w	402984 <__aeabi_ddiv+0x144>
  402874:	ea4f 3303 	mov.w	r3, r3, lsl #12
  402878:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  40287c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  402880:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  402884:	ea4f 2202 	mov.w	r2, r2, lsl #8
  402888:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  40288c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  402890:	ea4f 2600 	mov.w	r6, r0, lsl #8
  402894:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  402898:	429d      	cmp	r5, r3
  40289a:	bf08      	it	eq
  40289c:	4296      	cmpeq	r6, r2
  40289e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  4028a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
  4028a6:	d202      	bcs.n	4028ae <__aeabi_ddiv+0x6e>
  4028a8:	085b      	lsrs	r3, r3, #1
  4028aa:	ea4f 0232 	mov.w	r2, r2, rrx
  4028ae:	1ab6      	subs	r6, r6, r2
  4028b0:	eb65 0503 	sbc.w	r5, r5, r3
  4028b4:	085b      	lsrs	r3, r3, #1
  4028b6:	ea4f 0232 	mov.w	r2, r2, rrx
  4028ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  4028be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  4028c2:	ebb6 0e02 	subs.w	lr, r6, r2
  4028c6:	eb75 0e03 	sbcs.w	lr, r5, r3
  4028ca:	bf22      	ittt	cs
  4028cc:	1ab6      	subcs	r6, r6, r2
  4028ce:	4675      	movcs	r5, lr
  4028d0:	ea40 000c 	orrcs.w	r0, r0, ip
  4028d4:	085b      	lsrs	r3, r3, #1
  4028d6:	ea4f 0232 	mov.w	r2, r2, rrx
  4028da:	ebb6 0e02 	subs.w	lr, r6, r2
  4028de:	eb75 0e03 	sbcs.w	lr, r5, r3
  4028e2:	bf22      	ittt	cs
  4028e4:	1ab6      	subcs	r6, r6, r2
  4028e6:	4675      	movcs	r5, lr
  4028e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  4028ec:	085b      	lsrs	r3, r3, #1
  4028ee:	ea4f 0232 	mov.w	r2, r2, rrx
  4028f2:	ebb6 0e02 	subs.w	lr, r6, r2
  4028f6:	eb75 0e03 	sbcs.w	lr, r5, r3
  4028fa:	bf22      	ittt	cs
  4028fc:	1ab6      	subcs	r6, r6, r2
  4028fe:	4675      	movcs	r5, lr
  402900:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  402904:	085b      	lsrs	r3, r3, #1
  402906:	ea4f 0232 	mov.w	r2, r2, rrx
  40290a:	ebb6 0e02 	subs.w	lr, r6, r2
  40290e:	eb75 0e03 	sbcs.w	lr, r5, r3
  402912:	bf22      	ittt	cs
  402914:	1ab6      	subcs	r6, r6, r2
  402916:	4675      	movcs	r5, lr
  402918:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  40291c:	ea55 0e06 	orrs.w	lr, r5, r6
  402920:	d018      	beq.n	402954 <__aeabi_ddiv+0x114>
  402922:	ea4f 1505 	mov.w	r5, r5, lsl #4
  402926:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  40292a:	ea4f 1606 	mov.w	r6, r6, lsl #4
  40292e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  402932:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  402936:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  40293a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  40293e:	d1c0      	bne.n	4028c2 <__aeabi_ddiv+0x82>
  402940:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  402944:	d10b      	bne.n	40295e <__aeabi_ddiv+0x11e>
  402946:	ea41 0100 	orr.w	r1, r1, r0
  40294a:	f04f 0000 	mov.w	r0, #0
  40294e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  402952:	e7b6      	b.n	4028c2 <__aeabi_ddiv+0x82>
  402954:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  402958:	bf04      	itt	eq
  40295a:	4301      	orreq	r1, r0
  40295c:	2000      	moveq	r0, #0
  40295e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  402962:	bf88      	it	hi
  402964:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  402968:	f63f aeaf 	bhi.w	4026ca <__aeabi_dmul+0xde>
  40296c:	ebb5 0c03 	subs.w	ip, r5, r3
  402970:	bf04      	itt	eq
  402972:	ebb6 0c02 	subseq.w	ip, r6, r2
  402976:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40297a:	f150 0000 	adcs.w	r0, r0, #0
  40297e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  402982:	bd70      	pop	{r4, r5, r6, pc}
  402984:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  402988:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  40298c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  402990:	bfc2      	ittt	gt
  402992:	ebd4 050c 	rsbsgt	r5, r4, ip
  402996:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40299a:	bd70      	popgt	{r4, r5, r6, pc}
  40299c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4029a0:	f04f 0e00 	mov.w	lr, #0
  4029a4:	3c01      	subs	r4, #1
  4029a6:	e690      	b.n	4026ca <__aeabi_dmul+0xde>
  4029a8:	ea45 0e06 	orr.w	lr, r5, r6
  4029ac:	e68d      	b.n	4026ca <__aeabi_dmul+0xde>
  4029ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4029b2:	ea94 0f0c 	teq	r4, ip
  4029b6:	bf08      	it	eq
  4029b8:	ea95 0f0c 	teqeq	r5, ip
  4029bc:	f43f af3b 	beq.w	402836 <__aeabi_dmul+0x24a>
  4029c0:	ea94 0f0c 	teq	r4, ip
  4029c4:	d10a      	bne.n	4029dc <__aeabi_ddiv+0x19c>
  4029c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4029ca:	f47f af34 	bne.w	402836 <__aeabi_dmul+0x24a>
  4029ce:	ea95 0f0c 	teq	r5, ip
  4029d2:	f47f af25 	bne.w	402820 <__aeabi_dmul+0x234>
  4029d6:	4610      	mov	r0, r2
  4029d8:	4619      	mov	r1, r3
  4029da:	e72c      	b.n	402836 <__aeabi_dmul+0x24a>
  4029dc:	ea95 0f0c 	teq	r5, ip
  4029e0:	d106      	bne.n	4029f0 <__aeabi_ddiv+0x1b0>
  4029e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4029e6:	f43f aefd 	beq.w	4027e4 <__aeabi_dmul+0x1f8>
  4029ea:	4610      	mov	r0, r2
  4029ec:	4619      	mov	r1, r3
  4029ee:	e722      	b.n	402836 <__aeabi_dmul+0x24a>
  4029f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4029f4:	bf18      	it	ne
  4029f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4029fa:	f47f aec5 	bne.w	402788 <__aeabi_dmul+0x19c>
  4029fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  402a02:	f47f af0d 	bne.w	402820 <__aeabi_dmul+0x234>
  402a06:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  402a0a:	f47f aeeb 	bne.w	4027e4 <__aeabi_dmul+0x1f8>
  402a0e:	e712      	b.n	402836 <__aeabi_dmul+0x24a>

00402a10 <__aeabi_d2uiz>:
  402a10:	004a      	lsls	r2, r1, #1
  402a12:	d211      	bcs.n	402a38 <__aeabi_d2uiz+0x28>
  402a14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  402a18:	d211      	bcs.n	402a3e <__aeabi_d2uiz+0x2e>
  402a1a:	d50d      	bpl.n	402a38 <__aeabi_d2uiz+0x28>
  402a1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  402a20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  402a24:	d40e      	bmi.n	402a44 <__aeabi_d2uiz+0x34>
  402a26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  402a2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  402a2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  402a32:	fa23 f002 	lsr.w	r0, r3, r2
  402a36:	4770      	bx	lr
  402a38:	f04f 0000 	mov.w	r0, #0
  402a3c:	4770      	bx	lr
  402a3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  402a42:	d102      	bne.n	402a4a <__aeabi_d2uiz+0x3a>
  402a44:	f04f 30ff 	mov.w	r0, #4294967295
  402a48:	4770      	bx	lr
  402a4a:	f04f 0000 	mov.w	r0, #0
  402a4e:	4770      	bx	lr

00402a50 <__libc_init_array>:
  402a50:	b570      	push	{r4, r5, r6, lr}
  402a52:	4e0f      	ldr	r6, [pc, #60]	; (402a90 <__libc_init_array+0x40>)
  402a54:	4d0f      	ldr	r5, [pc, #60]	; (402a94 <__libc_init_array+0x44>)
  402a56:	1b76      	subs	r6, r6, r5
  402a58:	10b6      	asrs	r6, r6, #2
  402a5a:	bf18      	it	ne
  402a5c:	2400      	movne	r4, #0
  402a5e:	d005      	beq.n	402a6c <__libc_init_array+0x1c>
  402a60:	3401      	adds	r4, #1
  402a62:	f855 3b04 	ldr.w	r3, [r5], #4
  402a66:	4798      	blx	r3
  402a68:	42a6      	cmp	r6, r4
  402a6a:	d1f9      	bne.n	402a60 <__libc_init_array+0x10>
  402a6c:	4e0a      	ldr	r6, [pc, #40]	; (402a98 <__libc_init_array+0x48>)
  402a6e:	4d0b      	ldr	r5, [pc, #44]	; (402a9c <__libc_init_array+0x4c>)
  402a70:	1b76      	subs	r6, r6, r5
  402a72:	f004 fdb1 	bl	4075d8 <_init>
  402a76:	10b6      	asrs	r6, r6, #2
  402a78:	bf18      	it	ne
  402a7a:	2400      	movne	r4, #0
  402a7c:	d006      	beq.n	402a8c <__libc_init_array+0x3c>
  402a7e:	3401      	adds	r4, #1
  402a80:	f855 3b04 	ldr.w	r3, [r5], #4
  402a84:	4798      	blx	r3
  402a86:	42a6      	cmp	r6, r4
  402a88:	d1f9      	bne.n	402a7e <__libc_init_array+0x2e>
  402a8a:	bd70      	pop	{r4, r5, r6, pc}
  402a8c:	bd70      	pop	{r4, r5, r6, pc}
  402a8e:	bf00      	nop
  402a90:	004075e4 	.word	0x004075e4
  402a94:	004075e4 	.word	0x004075e4
  402a98:	004075ec 	.word	0x004075ec
  402a9c:	004075e4 	.word	0x004075e4

00402aa0 <memset>:
  402aa0:	b470      	push	{r4, r5, r6}
  402aa2:	0786      	lsls	r6, r0, #30
  402aa4:	d046      	beq.n	402b34 <memset+0x94>
  402aa6:	1e54      	subs	r4, r2, #1
  402aa8:	2a00      	cmp	r2, #0
  402aaa:	d041      	beq.n	402b30 <memset+0x90>
  402aac:	b2ca      	uxtb	r2, r1
  402aae:	4603      	mov	r3, r0
  402ab0:	e002      	b.n	402ab8 <memset+0x18>
  402ab2:	f114 34ff 	adds.w	r4, r4, #4294967295
  402ab6:	d33b      	bcc.n	402b30 <memset+0x90>
  402ab8:	f803 2b01 	strb.w	r2, [r3], #1
  402abc:	079d      	lsls	r5, r3, #30
  402abe:	d1f8      	bne.n	402ab2 <memset+0x12>
  402ac0:	2c03      	cmp	r4, #3
  402ac2:	d92e      	bls.n	402b22 <memset+0x82>
  402ac4:	b2cd      	uxtb	r5, r1
  402ac6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  402aca:	2c0f      	cmp	r4, #15
  402acc:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  402ad0:	d919      	bls.n	402b06 <memset+0x66>
  402ad2:	f103 0210 	add.w	r2, r3, #16
  402ad6:	4626      	mov	r6, r4
  402ad8:	3e10      	subs	r6, #16
  402ada:	2e0f      	cmp	r6, #15
  402adc:	f842 5c10 	str.w	r5, [r2, #-16]
  402ae0:	f842 5c0c 	str.w	r5, [r2, #-12]
  402ae4:	f842 5c08 	str.w	r5, [r2, #-8]
  402ae8:	f842 5c04 	str.w	r5, [r2, #-4]
  402aec:	f102 0210 	add.w	r2, r2, #16
  402af0:	d8f2      	bhi.n	402ad8 <memset+0x38>
  402af2:	f1a4 0210 	sub.w	r2, r4, #16
  402af6:	f022 020f 	bic.w	r2, r2, #15
  402afa:	f004 040f 	and.w	r4, r4, #15
  402afe:	3210      	adds	r2, #16
  402b00:	2c03      	cmp	r4, #3
  402b02:	4413      	add	r3, r2
  402b04:	d90d      	bls.n	402b22 <memset+0x82>
  402b06:	461e      	mov	r6, r3
  402b08:	4622      	mov	r2, r4
  402b0a:	3a04      	subs	r2, #4
  402b0c:	2a03      	cmp	r2, #3
  402b0e:	f846 5b04 	str.w	r5, [r6], #4
  402b12:	d8fa      	bhi.n	402b0a <memset+0x6a>
  402b14:	1f22      	subs	r2, r4, #4
  402b16:	f022 0203 	bic.w	r2, r2, #3
  402b1a:	3204      	adds	r2, #4
  402b1c:	4413      	add	r3, r2
  402b1e:	f004 0403 	and.w	r4, r4, #3
  402b22:	b12c      	cbz	r4, 402b30 <memset+0x90>
  402b24:	b2c9      	uxtb	r1, r1
  402b26:	441c      	add	r4, r3
  402b28:	f803 1b01 	strb.w	r1, [r3], #1
  402b2c:	429c      	cmp	r4, r3
  402b2e:	d1fb      	bne.n	402b28 <memset+0x88>
  402b30:	bc70      	pop	{r4, r5, r6}
  402b32:	4770      	bx	lr
  402b34:	4614      	mov	r4, r2
  402b36:	4603      	mov	r3, r0
  402b38:	e7c2      	b.n	402ac0 <memset+0x20>
  402b3a:	bf00      	nop

00402b3c <sprintf>:
  402b3c:	b40e      	push	{r1, r2, r3}
  402b3e:	b5f0      	push	{r4, r5, r6, r7, lr}
  402b40:	b09c      	sub	sp, #112	; 0x70
  402b42:	ab21      	add	r3, sp, #132	; 0x84
  402b44:	490f      	ldr	r1, [pc, #60]	; (402b84 <sprintf+0x48>)
  402b46:	f853 2b04 	ldr.w	r2, [r3], #4
  402b4a:	9301      	str	r3, [sp, #4]
  402b4c:	4605      	mov	r5, r0
  402b4e:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  402b52:	6808      	ldr	r0, [r1, #0]
  402b54:	9502      	str	r5, [sp, #8]
  402b56:	f44f 7702 	mov.w	r7, #520	; 0x208
  402b5a:	f64f 76ff 	movw	r6, #65535	; 0xffff
  402b5e:	a902      	add	r1, sp, #8
  402b60:	9506      	str	r5, [sp, #24]
  402b62:	f8ad 7014 	strh.w	r7, [sp, #20]
  402b66:	9404      	str	r4, [sp, #16]
  402b68:	9407      	str	r4, [sp, #28]
  402b6a:	f8ad 6016 	strh.w	r6, [sp, #22]
  402b6e:	f000 f80b 	bl	402b88 <_svfprintf_r>
  402b72:	9b02      	ldr	r3, [sp, #8]
  402b74:	2200      	movs	r2, #0
  402b76:	701a      	strb	r2, [r3, #0]
  402b78:	b01c      	add	sp, #112	; 0x70
  402b7a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  402b7e:	b003      	add	sp, #12
  402b80:	4770      	bx	lr
  402b82:	bf00      	nop
  402b84:	20400020 	.word	0x20400020

00402b88 <_svfprintf_r>:
  402b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402b8c:	b0c3      	sub	sp, #268	; 0x10c
  402b8e:	460c      	mov	r4, r1
  402b90:	910b      	str	r1, [sp, #44]	; 0x2c
  402b92:	4692      	mov	sl, r2
  402b94:	930f      	str	r3, [sp, #60]	; 0x3c
  402b96:	900c      	str	r0, [sp, #48]	; 0x30
  402b98:	f002 fa0e 	bl	404fb8 <_localeconv_r>
  402b9c:	6803      	ldr	r3, [r0, #0]
  402b9e:	931a      	str	r3, [sp, #104]	; 0x68
  402ba0:	4618      	mov	r0, r3
  402ba2:	f003 f8ed 	bl	405d80 <strlen>
  402ba6:	89a3      	ldrh	r3, [r4, #12]
  402ba8:	9019      	str	r0, [sp, #100]	; 0x64
  402baa:	0619      	lsls	r1, r3, #24
  402bac:	d503      	bpl.n	402bb6 <_svfprintf_r+0x2e>
  402bae:	6923      	ldr	r3, [r4, #16]
  402bb0:	2b00      	cmp	r3, #0
  402bb2:	f001 8003 	beq.w	403bbc <_svfprintf_r+0x1034>
  402bb6:	2300      	movs	r3, #0
  402bb8:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
  402bbc:	9313      	str	r3, [sp, #76]	; 0x4c
  402bbe:	9315      	str	r3, [sp, #84]	; 0x54
  402bc0:	9314      	str	r3, [sp, #80]	; 0x50
  402bc2:	9327      	str	r3, [sp, #156]	; 0x9c
  402bc4:	9326      	str	r3, [sp, #152]	; 0x98
  402bc6:	9318      	str	r3, [sp, #96]	; 0x60
  402bc8:	931b      	str	r3, [sp, #108]	; 0x6c
  402bca:	9309      	str	r3, [sp, #36]	; 0x24
  402bcc:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
  402bd0:	46c8      	mov	r8, r9
  402bd2:	9316      	str	r3, [sp, #88]	; 0x58
  402bd4:	9317      	str	r3, [sp, #92]	; 0x5c
  402bd6:	f89a 3000 	ldrb.w	r3, [sl]
  402bda:	4654      	mov	r4, sl
  402bdc:	b1e3      	cbz	r3, 402c18 <_svfprintf_r+0x90>
  402bde:	2b25      	cmp	r3, #37	; 0x25
  402be0:	d102      	bne.n	402be8 <_svfprintf_r+0x60>
  402be2:	e019      	b.n	402c18 <_svfprintf_r+0x90>
  402be4:	2b25      	cmp	r3, #37	; 0x25
  402be6:	d003      	beq.n	402bf0 <_svfprintf_r+0x68>
  402be8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  402bec:	2b00      	cmp	r3, #0
  402bee:	d1f9      	bne.n	402be4 <_svfprintf_r+0x5c>
  402bf0:	eba4 050a 	sub.w	r5, r4, sl
  402bf4:	b185      	cbz	r5, 402c18 <_svfprintf_r+0x90>
  402bf6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402bf8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  402bfa:	f8c8 a000 	str.w	sl, [r8]
  402bfe:	3301      	adds	r3, #1
  402c00:	442a      	add	r2, r5
  402c02:	2b07      	cmp	r3, #7
  402c04:	f8c8 5004 	str.w	r5, [r8, #4]
  402c08:	9227      	str	r2, [sp, #156]	; 0x9c
  402c0a:	9326      	str	r3, [sp, #152]	; 0x98
  402c0c:	dc7f      	bgt.n	402d0e <_svfprintf_r+0x186>
  402c0e:	f108 0808 	add.w	r8, r8, #8
  402c12:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402c14:	442b      	add	r3, r5
  402c16:	9309      	str	r3, [sp, #36]	; 0x24
  402c18:	7823      	ldrb	r3, [r4, #0]
  402c1a:	2b00      	cmp	r3, #0
  402c1c:	d07f      	beq.n	402d1e <_svfprintf_r+0x196>
  402c1e:	2300      	movs	r3, #0
  402c20:	461a      	mov	r2, r3
  402c22:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  402c26:	4619      	mov	r1, r3
  402c28:	930d      	str	r3, [sp, #52]	; 0x34
  402c2a:	469b      	mov	fp, r3
  402c2c:	f04f 30ff 	mov.w	r0, #4294967295
  402c30:	7863      	ldrb	r3, [r4, #1]
  402c32:	900a      	str	r0, [sp, #40]	; 0x28
  402c34:	f104 0a01 	add.w	sl, r4, #1
  402c38:	f10a 0a01 	add.w	sl, sl, #1
  402c3c:	f1a3 0020 	sub.w	r0, r3, #32
  402c40:	2858      	cmp	r0, #88	; 0x58
  402c42:	f200 83c1 	bhi.w	4033c8 <_svfprintf_r+0x840>
  402c46:	e8df f010 	tbh	[pc, r0, lsl #1]
  402c4a:	0238      	.short	0x0238
  402c4c:	03bf03bf 	.word	0x03bf03bf
  402c50:	03bf0240 	.word	0x03bf0240
  402c54:	03bf03bf 	.word	0x03bf03bf
  402c58:	03bf03bf 	.word	0x03bf03bf
  402c5c:	024503bf 	.word	0x024503bf
  402c60:	03bf0203 	.word	0x03bf0203
  402c64:	026b005d 	.word	0x026b005d
  402c68:	028603bf 	.word	0x028603bf
  402c6c:	039d039d 	.word	0x039d039d
  402c70:	039d039d 	.word	0x039d039d
  402c74:	039d039d 	.word	0x039d039d
  402c78:	039d039d 	.word	0x039d039d
  402c7c:	03bf039d 	.word	0x03bf039d
  402c80:	03bf03bf 	.word	0x03bf03bf
  402c84:	03bf03bf 	.word	0x03bf03bf
  402c88:	03bf03bf 	.word	0x03bf03bf
  402c8c:	03bf03bf 	.word	0x03bf03bf
  402c90:	033703bf 	.word	0x033703bf
  402c94:	03bf0357 	.word	0x03bf0357
  402c98:	03bf0357 	.word	0x03bf0357
  402c9c:	03bf03bf 	.word	0x03bf03bf
  402ca0:	039803bf 	.word	0x039803bf
  402ca4:	03bf03bf 	.word	0x03bf03bf
  402ca8:	03bf03ad 	.word	0x03bf03ad
  402cac:	03bf03bf 	.word	0x03bf03bf
  402cb0:	03bf03bf 	.word	0x03bf03bf
  402cb4:	03bf0259 	.word	0x03bf0259
  402cb8:	031e03bf 	.word	0x031e03bf
  402cbc:	03bf03bf 	.word	0x03bf03bf
  402cc0:	03bf03bf 	.word	0x03bf03bf
  402cc4:	03bf03bf 	.word	0x03bf03bf
  402cc8:	03bf03bf 	.word	0x03bf03bf
  402ccc:	03bf03bf 	.word	0x03bf03bf
  402cd0:	02db02c6 	.word	0x02db02c6
  402cd4:	03570357 	.word	0x03570357
  402cd8:	028b0357 	.word	0x028b0357
  402cdc:	03bf02db 	.word	0x03bf02db
  402ce0:	029003bf 	.word	0x029003bf
  402ce4:	029d03bf 	.word	0x029d03bf
  402ce8:	02b401cc 	.word	0x02b401cc
  402cec:	03bf0208 	.word	0x03bf0208
  402cf0:	03bf01e1 	.word	0x03bf01e1
  402cf4:	03bf007e 	.word	0x03bf007e
  402cf8:	020d03bf 	.word	0x020d03bf
  402cfc:	980d      	ldr	r0, [sp, #52]	; 0x34
  402cfe:	930f      	str	r3, [sp, #60]	; 0x3c
  402d00:	4240      	negs	r0, r0
  402d02:	900d      	str	r0, [sp, #52]	; 0x34
  402d04:	f04b 0b04 	orr.w	fp, fp, #4
  402d08:	f89a 3000 	ldrb.w	r3, [sl]
  402d0c:	e794      	b.n	402c38 <_svfprintf_r+0xb0>
  402d0e:	aa25      	add	r2, sp, #148	; 0x94
  402d10:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402d12:	980c      	ldr	r0, [sp, #48]	; 0x30
  402d14:	f003 f8a2 	bl	405e5c <__ssprint_r>
  402d18:	b940      	cbnz	r0, 402d2c <_svfprintf_r+0x1a4>
  402d1a:	46c8      	mov	r8, r9
  402d1c:	e779      	b.n	402c12 <_svfprintf_r+0x8a>
  402d1e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  402d20:	b123      	cbz	r3, 402d2c <_svfprintf_r+0x1a4>
  402d22:	980c      	ldr	r0, [sp, #48]	; 0x30
  402d24:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402d26:	aa25      	add	r2, sp, #148	; 0x94
  402d28:	f003 f898 	bl	405e5c <__ssprint_r>
  402d2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  402d2e:	899b      	ldrh	r3, [r3, #12]
  402d30:	f013 0f40 	tst.w	r3, #64	; 0x40
  402d34:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402d36:	bf18      	it	ne
  402d38:	f04f 33ff 	movne.w	r3, #4294967295
  402d3c:	9309      	str	r3, [sp, #36]	; 0x24
  402d3e:	9809      	ldr	r0, [sp, #36]	; 0x24
  402d40:	b043      	add	sp, #268	; 0x10c
  402d42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402d46:	f01b 0f20 	tst.w	fp, #32
  402d4a:	9311      	str	r3, [sp, #68]	; 0x44
  402d4c:	f040 81dd 	bne.w	40310a <_svfprintf_r+0x582>
  402d50:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402d52:	f01b 0f10 	tst.w	fp, #16
  402d56:	4613      	mov	r3, r2
  402d58:	f040 856e 	bne.w	403838 <_svfprintf_r+0xcb0>
  402d5c:	f01b 0f40 	tst.w	fp, #64	; 0x40
  402d60:	f000 856a 	beq.w	403838 <_svfprintf_r+0xcb0>
  402d64:	8814      	ldrh	r4, [r2, #0]
  402d66:	3204      	adds	r2, #4
  402d68:	2500      	movs	r5, #0
  402d6a:	2301      	movs	r3, #1
  402d6c:	920f      	str	r2, [sp, #60]	; 0x3c
  402d6e:	2700      	movs	r7, #0
  402d70:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  402d74:	990a      	ldr	r1, [sp, #40]	; 0x28
  402d76:	1c4a      	adds	r2, r1, #1
  402d78:	f000 8265 	beq.w	403246 <_svfprintf_r+0x6be>
  402d7c:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  402d80:	9207      	str	r2, [sp, #28]
  402d82:	ea54 0205 	orrs.w	r2, r4, r5
  402d86:	f040 8264 	bne.w	403252 <_svfprintf_r+0x6ca>
  402d8a:	2900      	cmp	r1, #0
  402d8c:	f040 843c 	bne.w	403608 <_svfprintf_r+0xa80>
  402d90:	2b00      	cmp	r3, #0
  402d92:	f040 84d7 	bne.w	403744 <_svfprintf_r+0xbbc>
  402d96:	f01b 0301 	ands.w	r3, fp, #1
  402d9a:	930e      	str	r3, [sp, #56]	; 0x38
  402d9c:	f000 8604 	beq.w	4039a8 <_svfprintf_r+0xe20>
  402da0:	ae42      	add	r6, sp, #264	; 0x108
  402da2:	2330      	movs	r3, #48	; 0x30
  402da4:	f806 3d41 	strb.w	r3, [r6, #-65]!
  402da8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402daa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  402dac:	4293      	cmp	r3, r2
  402dae:	bfb8      	it	lt
  402db0:	4613      	movlt	r3, r2
  402db2:	9308      	str	r3, [sp, #32]
  402db4:	2300      	movs	r3, #0
  402db6:	9312      	str	r3, [sp, #72]	; 0x48
  402db8:	b117      	cbz	r7, 402dc0 <_svfprintf_r+0x238>
  402dba:	9b08      	ldr	r3, [sp, #32]
  402dbc:	3301      	adds	r3, #1
  402dbe:	9308      	str	r3, [sp, #32]
  402dc0:	9b07      	ldr	r3, [sp, #28]
  402dc2:	f013 0302 	ands.w	r3, r3, #2
  402dc6:	9310      	str	r3, [sp, #64]	; 0x40
  402dc8:	d002      	beq.n	402dd0 <_svfprintf_r+0x248>
  402dca:	9b08      	ldr	r3, [sp, #32]
  402dcc:	3302      	adds	r3, #2
  402dce:	9308      	str	r3, [sp, #32]
  402dd0:	9b07      	ldr	r3, [sp, #28]
  402dd2:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  402dd6:	f040 830e 	bne.w	4033f6 <_svfprintf_r+0x86e>
  402dda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  402ddc:	9a08      	ldr	r2, [sp, #32]
  402dde:	eba3 0b02 	sub.w	fp, r3, r2
  402de2:	f1bb 0f00 	cmp.w	fp, #0
  402de6:	f340 8306 	ble.w	4033f6 <_svfprintf_r+0x86e>
  402dea:	f1bb 0f10 	cmp.w	fp, #16
  402dee:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  402df0:	9a26      	ldr	r2, [sp, #152]	; 0x98
  402df2:	dd29      	ble.n	402e48 <_svfprintf_r+0x2c0>
  402df4:	4643      	mov	r3, r8
  402df6:	4621      	mov	r1, r4
  402df8:	46a8      	mov	r8, r5
  402dfa:	2710      	movs	r7, #16
  402dfc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  402dfe:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  402e00:	e006      	b.n	402e10 <_svfprintf_r+0x288>
  402e02:	f1ab 0b10 	sub.w	fp, fp, #16
  402e06:	f1bb 0f10 	cmp.w	fp, #16
  402e0a:	f103 0308 	add.w	r3, r3, #8
  402e0e:	dd18      	ble.n	402e42 <_svfprintf_r+0x2ba>
  402e10:	3201      	adds	r2, #1
  402e12:	48b7      	ldr	r0, [pc, #732]	; (4030f0 <_svfprintf_r+0x568>)
  402e14:	9226      	str	r2, [sp, #152]	; 0x98
  402e16:	3110      	adds	r1, #16
  402e18:	2a07      	cmp	r2, #7
  402e1a:	9127      	str	r1, [sp, #156]	; 0x9c
  402e1c:	e883 0081 	stmia.w	r3, {r0, r7}
  402e20:	ddef      	ble.n	402e02 <_svfprintf_r+0x27a>
  402e22:	aa25      	add	r2, sp, #148	; 0x94
  402e24:	4629      	mov	r1, r5
  402e26:	4620      	mov	r0, r4
  402e28:	f003 f818 	bl	405e5c <__ssprint_r>
  402e2c:	2800      	cmp	r0, #0
  402e2e:	f47f af7d 	bne.w	402d2c <_svfprintf_r+0x1a4>
  402e32:	f1ab 0b10 	sub.w	fp, fp, #16
  402e36:	f1bb 0f10 	cmp.w	fp, #16
  402e3a:	9927      	ldr	r1, [sp, #156]	; 0x9c
  402e3c:	9a26      	ldr	r2, [sp, #152]	; 0x98
  402e3e:	464b      	mov	r3, r9
  402e40:	dce6      	bgt.n	402e10 <_svfprintf_r+0x288>
  402e42:	4645      	mov	r5, r8
  402e44:	460c      	mov	r4, r1
  402e46:	4698      	mov	r8, r3
  402e48:	3201      	adds	r2, #1
  402e4a:	4ba9      	ldr	r3, [pc, #676]	; (4030f0 <_svfprintf_r+0x568>)
  402e4c:	9226      	str	r2, [sp, #152]	; 0x98
  402e4e:	445c      	add	r4, fp
  402e50:	2a07      	cmp	r2, #7
  402e52:	9427      	str	r4, [sp, #156]	; 0x9c
  402e54:	e888 0808 	stmia.w	r8, {r3, fp}
  402e58:	f300 8498 	bgt.w	40378c <_svfprintf_r+0xc04>
  402e5c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  402e60:	f108 0808 	add.w	r8, r8, #8
  402e64:	b177      	cbz	r7, 402e84 <_svfprintf_r+0x2fc>
  402e66:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402e68:	3301      	adds	r3, #1
  402e6a:	3401      	adds	r4, #1
  402e6c:	f10d 0177 	add.w	r1, sp, #119	; 0x77
  402e70:	2201      	movs	r2, #1
  402e72:	2b07      	cmp	r3, #7
  402e74:	9427      	str	r4, [sp, #156]	; 0x9c
  402e76:	9326      	str	r3, [sp, #152]	; 0x98
  402e78:	e888 0006 	stmia.w	r8, {r1, r2}
  402e7c:	f300 83db 	bgt.w	403636 <_svfprintf_r+0xaae>
  402e80:	f108 0808 	add.w	r8, r8, #8
  402e84:	9b10      	ldr	r3, [sp, #64]	; 0x40
  402e86:	b16b      	cbz	r3, 402ea4 <_svfprintf_r+0x31c>
  402e88:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402e8a:	3301      	adds	r3, #1
  402e8c:	3402      	adds	r4, #2
  402e8e:	a91e      	add	r1, sp, #120	; 0x78
  402e90:	2202      	movs	r2, #2
  402e92:	2b07      	cmp	r3, #7
  402e94:	9427      	str	r4, [sp, #156]	; 0x9c
  402e96:	9326      	str	r3, [sp, #152]	; 0x98
  402e98:	e888 0006 	stmia.w	r8, {r1, r2}
  402e9c:	f300 83d6 	bgt.w	40364c <_svfprintf_r+0xac4>
  402ea0:	f108 0808 	add.w	r8, r8, #8
  402ea4:	2d80      	cmp	r5, #128	; 0x80
  402ea6:	f000 8315 	beq.w	4034d4 <_svfprintf_r+0x94c>
  402eaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402eac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  402eae:	1a9f      	subs	r7, r3, r2
  402eb0:	2f00      	cmp	r7, #0
  402eb2:	dd36      	ble.n	402f22 <_svfprintf_r+0x39a>
  402eb4:	2f10      	cmp	r7, #16
  402eb6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402eb8:	4d8e      	ldr	r5, [pc, #568]	; (4030f4 <_svfprintf_r+0x56c>)
  402eba:	dd27      	ble.n	402f0c <_svfprintf_r+0x384>
  402ebc:	4642      	mov	r2, r8
  402ebe:	4621      	mov	r1, r4
  402ec0:	46b0      	mov	r8, r6
  402ec2:	f04f 0b10 	mov.w	fp, #16
  402ec6:	462e      	mov	r6, r5
  402ec8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  402eca:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  402ecc:	e004      	b.n	402ed8 <_svfprintf_r+0x350>
  402ece:	3f10      	subs	r7, #16
  402ed0:	2f10      	cmp	r7, #16
  402ed2:	f102 0208 	add.w	r2, r2, #8
  402ed6:	dd15      	ble.n	402f04 <_svfprintf_r+0x37c>
  402ed8:	3301      	adds	r3, #1
  402eda:	3110      	adds	r1, #16
  402edc:	2b07      	cmp	r3, #7
  402ede:	9127      	str	r1, [sp, #156]	; 0x9c
  402ee0:	9326      	str	r3, [sp, #152]	; 0x98
  402ee2:	e882 0840 	stmia.w	r2, {r6, fp}
  402ee6:	ddf2      	ble.n	402ece <_svfprintf_r+0x346>
  402ee8:	aa25      	add	r2, sp, #148	; 0x94
  402eea:	4629      	mov	r1, r5
  402eec:	4620      	mov	r0, r4
  402eee:	f002 ffb5 	bl	405e5c <__ssprint_r>
  402ef2:	2800      	cmp	r0, #0
  402ef4:	f47f af1a 	bne.w	402d2c <_svfprintf_r+0x1a4>
  402ef8:	3f10      	subs	r7, #16
  402efa:	2f10      	cmp	r7, #16
  402efc:	9927      	ldr	r1, [sp, #156]	; 0x9c
  402efe:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402f00:	464a      	mov	r2, r9
  402f02:	dce9      	bgt.n	402ed8 <_svfprintf_r+0x350>
  402f04:	4635      	mov	r5, r6
  402f06:	460c      	mov	r4, r1
  402f08:	4646      	mov	r6, r8
  402f0a:	4690      	mov	r8, r2
  402f0c:	3301      	adds	r3, #1
  402f0e:	443c      	add	r4, r7
  402f10:	2b07      	cmp	r3, #7
  402f12:	9427      	str	r4, [sp, #156]	; 0x9c
  402f14:	9326      	str	r3, [sp, #152]	; 0x98
  402f16:	e888 00a0 	stmia.w	r8, {r5, r7}
  402f1a:	f300 8381 	bgt.w	403620 <_svfprintf_r+0xa98>
  402f1e:	f108 0808 	add.w	r8, r8, #8
  402f22:	9b07      	ldr	r3, [sp, #28]
  402f24:	05df      	lsls	r7, r3, #23
  402f26:	f100 8268 	bmi.w	4033fa <_svfprintf_r+0x872>
  402f2a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402f2c:	990e      	ldr	r1, [sp, #56]	; 0x38
  402f2e:	f8c8 6000 	str.w	r6, [r8]
  402f32:	3301      	adds	r3, #1
  402f34:	440c      	add	r4, r1
  402f36:	2b07      	cmp	r3, #7
  402f38:	9427      	str	r4, [sp, #156]	; 0x9c
  402f3a:	f8c8 1004 	str.w	r1, [r8, #4]
  402f3e:	9326      	str	r3, [sp, #152]	; 0x98
  402f40:	f300 834d 	bgt.w	4035de <_svfprintf_r+0xa56>
  402f44:	f108 0808 	add.w	r8, r8, #8
  402f48:	9b07      	ldr	r3, [sp, #28]
  402f4a:	075b      	lsls	r3, r3, #29
  402f4c:	d53a      	bpl.n	402fc4 <_svfprintf_r+0x43c>
  402f4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  402f50:	9a08      	ldr	r2, [sp, #32]
  402f52:	1a9d      	subs	r5, r3, r2
  402f54:	2d00      	cmp	r5, #0
  402f56:	dd35      	ble.n	402fc4 <_svfprintf_r+0x43c>
  402f58:	2d10      	cmp	r5, #16
  402f5a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402f5c:	dd20      	ble.n	402fa0 <_svfprintf_r+0x418>
  402f5e:	2610      	movs	r6, #16
  402f60:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  402f62:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
  402f66:	e004      	b.n	402f72 <_svfprintf_r+0x3ea>
  402f68:	3d10      	subs	r5, #16
  402f6a:	2d10      	cmp	r5, #16
  402f6c:	f108 0808 	add.w	r8, r8, #8
  402f70:	dd16      	ble.n	402fa0 <_svfprintf_r+0x418>
  402f72:	3301      	adds	r3, #1
  402f74:	4a5e      	ldr	r2, [pc, #376]	; (4030f0 <_svfprintf_r+0x568>)
  402f76:	9326      	str	r3, [sp, #152]	; 0x98
  402f78:	3410      	adds	r4, #16
  402f7a:	2b07      	cmp	r3, #7
  402f7c:	9427      	str	r4, [sp, #156]	; 0x9c
  402f7e:	e888 0044 	stmia.w	r8, {r2, r6}
  402f82:	ddf1      	ble.n	402f68 <_svfprintf_r+0x3e0>
  402f84:	aa25      	add	r2, sp, #148	; 0x94
  402f86:	4659      	mov	r1, fp
  402f88:	4638      	mov	r0, r7
  402f8a:	f002 ff67 	bl	405e5c <__ssprint_r>
  402f8e:	2800      	cmp	r0, #0
  402f90:	f47f aecc 	bne.w	402d2c <_svfprintf_r+0x1a4>
  402f94:	3d10      	subs	r5, #16
  402f96:	2d10      	cmp	r5, #16
  402f98:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  402f9a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402f9c:	46c8      	mov	r8, r9
  402f9e:	dce8      	bgt.n	402f72 <_svfprintf_r+0x3ea>
  402fa0:	3301      	adds	r3, #1
  402fa2:	4a53      	ldr	r2, [pc, #332]	; (4030f0 <_svfprintf_r+0x568>)
  402fa4:	9326      	str	r3, [sp, #152]	; 0x98
  402fa6:	442c      	add	r4, r5
  402fa8:	2b07      	cmp	r3, #7
  402faa:	9427      	str	r4, [sp, #156]	; 0x9c
  402fac:	e888 0024 	stmia.w	r8, {r2, r5}
  402fb0:	dd08      	ble.n	402fc4 <_svfprintf_r+0x43c>
  402fb2:	aa25      	add	r2, sp, #148	; 0x94
  402fb4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402fb6:	980c      	ldr	r0, [sp, #48]	; 0x30
  402fb8:	f002 ff50 	bl	405e5c <__ssprint_r>
  402fbc:	2800      	cmp	r0, #0
  402fbe:	f47f aeb5 	bne.w	402d2c <_svfprintf_r+0x1a4>
  402fc2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  402fc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402fc6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  402fc8:	9908      	ldr	r1, [sp, #32]
  402fca:	428a      	cmp	r2, r1
  402fcc:	bfac      	ite	ge
  402fce:	189b      	addge	r3, r3, r2
  402fd0:	185b      	addlt	r3, r3, r1
  402fd2:	9309      	str	r3, [sp, #36]	; 0x24
  402fd4:	2c00      	cmp	r4, #0
  402fd6:	f040 830d 	bne.w	4035f4 <_svfprintf_r+0xa6c>
  402fda:	2300      	movs	r3, #0
  402fdc:	9326      	str	r3, [sp, #152]	; 0x98
  402fde:	46c8      	mov	r8, r9
  402fe0:	e5f9      	b.n	402bd6 <_svfprintf_r+0x4e>
  402fe2:	9311      	str	r3, [sp, #68]	; 0x44
  402fe4:	f01b 0320 	ands.w	r3, fp, #32
  402fe8:	f040 81e3 	bne.w	4033b2 <_svfprintf_r+0x82a>
  402fec:	f01b 0210 	ands.w	r2, fp, #16
  402ff0:	f040 842e 	bne.w	403850 <_svfprintf_r+0xcc8>
  402ff4:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  402ff8:	f000 842a 	beq.w	403850 <_svfprintf_r+0xcc8>
  402ffc:	990f      	ldr	r1, [sp, #60]	; 0x3c
  402ffe:	4613      	mov	r3, r2
  403000:	460a      	mov	r2, r1
  403002:	3204      	adds	r2, #4
  403004:	880c      	ldrh	r4, [r1, #0]
  403006:	920f      	str	r2, [sp, #60]	; 0x3c
  403008:	2500      	movs	r5, #0
  40300a:	e6b0      	b.n	402d6e <_svfprintf_r+0x1e6>
  40300c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40300e:	9311      	str	r3, [sp, #68]	; 0x44
  403010:	6816      	ldr	r6, [r2, #0]
  403012:	2400      	movs	r4, #0
  403014:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
  403018:	1d15      	adds	r5, r2, #4
  40301a:	2e00      	cmp	r6, #0
  40301c:	f000 86a7 	beq.w	403d6e <_svfprintf_r+0x11e6>
  403020:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  403022:	1c53      	adds	r3, r2, #1
  403024:	f000 8609 	beq.w	403c3a <_svfprintf_r+0x10b2>
  403028:	4621      	mov	r1, r4
  40302a:	4630      	mov	r0, r6
  40302c:	f002 fa88 	bl	405540 <memchr>
  403030:	2800      	cmp	r0, #0
  403032:	f000 86e1 	beq.w	403df8 <_svfprintf_r+0x1270>
  403036:	1b83      	subs	r3, r0, r6
  403038:	930e      	str	r3, [sp, #56]	; 0x38
  40303a:	940a      	str	r4, [sp, #40]	; 0x28
  40303c:	950f      	str	r5, [sp, #60]	; 0x3c
  40303e:	f8cd b01c 	str.w	fp, [sp, #28]
  403042:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  403046:	9308      	str	r3, [sp, #32]
  403048:	9412      	str	r4, [sp, #72]	; 0x48
  40304a:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40304e:	e6b3      	b.n	402db8 <_svfprintf_r+0x230>
  403050:	f89a 3000 	ldrb.w	r3, [sl]
  403054:	2201      	movs	r2, #1
  403056:	212b      	movs	r1, #43	; 0x2b
  403058:	e5ee      	b.n	402c38 <_svfprintf_r+0xb0>
  40305a:	f04b 0b20 	orr.w	fp, fp, #32
  40305e:	f89a 3000 	ldrb.w	r3, [sl]
  403062:	e5e9      	b.n	402c38 <_svfprintf_r+0xb0>
  403064:	9311      	str	r3, [sp, #68]	; 0x44
  403066:	2a00      	cmp	r2, #0
  403068:	f040 8795 	bne.w	403f96 <_svfprintf_r+0x140e>
  40306c:	4b22      	ldr	r3, [pc, #136]	; (4030f8 <_svfprintf_r+0x570>)
  40306e:	9318      	str	r3, [sp, #96]	; 0x60
  403070:	f01b 0f20 	tst.w	fp, #32
  403074:	f040 8111 	bne.w	40329a <_svfprintf_r+0x712>
  403078:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40307a:	f01b 0f10 	tst.w	fp, #16
  40307e:	4613      	mov	r3, r2
  403080:	f040 83e1 	bne.w	403846 <_svfprintf_r+0xcbe>
  403084:	f01b 0f40 	tst.w	fp, #64	; 0x40
  403088:	f000 83dd 	beq.w	403846 <_svfprintf_r+0xcbe>
  40308c:	3304      	adds	r3, #4
  40308e:	8814      	ldrh	r4, [r2, #0]
  403090:	930f      	str	r3, [sp, #60]	; 0x3c
  403092:	2500      	movs	r5, #0
  403094:	f01b 0f01 	tst.w	fp, #1
  403098:	f000 810c 	beq.w	4032b4 <_svfprintf_r+0x72c>
  40309c:	ea54 0305 	orrs.w	r3, r4, r5
  4030a0:	f000 8108 	beq.w	4032b4 <_svfprintf_r+0x72c>
  4030a4:	2330      	movs	r3, #48	; 0x30
  4030a6:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  4030aa:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
  4030ae:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
  4030b2:	f04b 0b02 	orr.w	fp, fp, #2
  4030b6:	2302      	movs	r3, #2
  4030b8:	e659      	b.n	402d6e <_svfprintf_r+0x1e6>
  4030ba:	f89a 3000 	ldrb.w	r3, [sl]
  4030be:	2900      	cmp	r1, #0
  4030c0:	f47f adba 	bne.w	402c38 <_svfprintf_r+0xb0>
  4030c4:	2201      	movs	r2, #1
  4030c6:	2120      	movs	r1, #32
  4030c8:	e5b6      	b.n	402c38 <_svfprintf_r+0xb0>
  4030ca:	f04b 0b01 	orr.w	fp, fp, #1
  4030ce:	f89a 3000 	ldrb.w	r3, [sl]
  4030d2:	e5b1      	b.n	402c38 <_svfprintf_r+0xb0>
  4030d4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  4030d6:	6823      	ldr	r3, [r4, #0]
  4030d8:	930d      	str	r3, [sp, #52]	; 0x34
  4030da:	4618      	mov	r0, r3
  4030dc:	2800      	cmp	r0, #0
  4030de:	4623      	mov	r3, r4
  4030e0:	f103 0304 	add.w	r3, r3, #4
  4030e4:	f6ff ae0a 	blt.w	402cfc <_svfprintf_r+0x174>
  4030e8:	930f      	str	r3, [sp, #60]	; 0x3c
  4030ea:	f89a 3000 	ldrb.w	r3, [sl]
  4030ee:	e5a3      	b.n	402c38 <_svfprintf_r+0xb0>
  4030f0:	00407398 	.word	0x00407398
  4030f4:	004073a8 	.word	0x004073a8
  4030f8:	00407378 	.word	0x00407378
  4030fc:	f04b 0b10 	orr.w	fp, fp, #16
  403100:	f01b 0f20 	tst.w	fp, #32
  403104:	9311      	str	r3, [sp, #68]	; 0x44
  403106:	f43f ae23 	beq.w	402d50 <_svfprintf_r+0x1c8>
  40310a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40310c:	3507      	adds	r5, #7
  40310e:	f025 0307 	bic.w	r3, r5, #7
  403112:	f103 0208 	add.w	r2, r3, #8
  403116:	e9d3 4500 	ldrd	r4, r5, [r3]
  40311a:	920f      	str	r2, [sp, #60]	; 0x3c
  40311c:	2301      	movs	r3, #1
  40311e:	e626      	b.n	402d6e <_svfprintf_r+0x1e6>
  403120:	f89a 3000 	ldrb.w	r3, [sl]
  403124:	2b2a      	cmp	r3, #42	; 0x2a
  403126:	f10a 0401 	add.w	r4, sl, #1
  40312a:	f000 8727 	beq.w	403f7c <_svfprintf_r+0x13f4>
  40312e:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  403132:	2809      	cmp	r0, #9
  403134:	46a2      	mov	sl, r4
  403136:	f200 86ad 	bhi.w	403e94 <_svfprintf_r+0x130c>
  40313a:	2300      	movs	r3, #0
  40313c:	461c      	mov	r4, r3
  40313e:	f81a 3b01 	ldrb.w	r3, [sl], #1
  403142:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  403146:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  40314a:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  40314e:	2809      	cmp	r0, #9
  403150:	d9f5      	bls.n	40313e <_svfprintf_r+0x5b6>
  403152:	940a      	str	r4, [sp, #40]	; 0x28
  403154:	e572      	b.n	402c3c <_svfprintf_r+0xb4>
  403156:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  40315a:	f89a 3000 	ldrb.w	r3, [sl]
  40315e:	e56b      	b.n	402c38 <_svfprintf_r+0xb0>
  403160:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  403164:	f89a 3000 	ldrb.w	r3, [sl]
  403168:	e566      	b.n	402c38 <_svfprintf_r+0xb0>
  40316a:	f89a 3000 	ldrb.w	r3, [sl]
  40316e:	2b6c      	cmp	r3, #108	; 0x6c
  403170:	bf03      	ittte	eq
  403172:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
  403176:	f04b 0b20 	orreq.w	fp, fp, #32
  40317a:	f10a 0a01 	addeq.w	sl, sl, #1
  40317e:	f04b 0b10 	orrne.w	fp, fp, #16
  403182:	e559      	b.n	402c38 <_svfprintf_r+0xb0>
  403184:	2a00      	cmp	r2, #0
  403186:	f040 8711 	bne.w	403fac <_svfprintf_r+0x1424>
  40318a:	f01b 0f20 	tst.w	fp, #32
  40318e:	f040 84f9 	bne.w	403b84 <_svfprintf_r+0xffc>
  403192:	f01b 0f10 	tst.w	fp, #16
  403196:	f040 84ac 	bne.w	403af2 <_svfprintf_r+0xf6a>
  40319a:	f01b 0f40 	tst.w	fp, #64	; 0x40
  40319e:	f000 84a8 	beq.w	403af2 <_svfprintf_r+0xf6a>
  4031a2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4031a4:	6813      	ldr	r3, [r2, #0]
  4031a6:	3204      	adds	r2, #4
  4031a8:	920f      	str	r2, [sp, #60]	; 0x3c
  4031aa:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
  4031ae:	801a      	strh	r2, [r3, #0]
  4031b0:	e511      	b.n	402bd6 <_svfprintf_r+0x4e>
  4031b2:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4031b4:	4bb3      	ldr	r3, [pc, #716]	; (403484 <_svfprintf_r+0x8fc>)
  4031b6:	680c      	ldr	r4, [r1, #0]
  4031b8:	9318      	str	r3, [sp, #96]	; 0x60
  4031ba:	2230      	movs	r2, #48	; 0x30
  4031bc:	2378      	movs	r3, #120	; 0x78
  4031be:	3104      	adds	r1, #4
  4031c0:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
  4031c4:	9311      	str	r3, [sp, #68]	; 0x44
  4031c6:	f04b 0b02 	orr.w	fp, fp, #2
  4031ca:	910f      	str	r1, [sp, #60]	; 0x3c
  4031cc:	2500      	movs	r5, #0
  4031ce:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
  4031d2:	2302      	movs	r3, #2
  4031d4:	e5cb      	b.n	402d6e <_svfprintf_r+0x1e6>
  4031d6:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4031d8:	9311      	str	r3, [sp, #68]	; 0x44
  4031da:	680a      	ldr	r2, [r1, #0]
  4031dc:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  4031e0:	2300      	movs	r3, #0
  4031e2:	460a      	mov	r2, r1
  4031e4:	461f      	mov	r7, r3
  4031e6:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  4031ea:	3204      	adds	r2, #4
  4031ec:	2301      	movs	r3, #1
  4031ee:	9308      	str	r3, [sp, #32]
  4031f0:	f8cd b01c 	str.w	fp, [sp, #28]
  4031f4:	970a      	str	r7, [sp, #40]	; 0x28
  4031f6:	9712      	str	r7, [sp, #72]	; 0x48
  4031f8:	920f      	str	r2, [sp, #60]	; 0x3c
  4031fa:	930e      	str	r3, [sp, #56]	; 0x38
  4031fc:	ae28      	add	r6, sp, #160	; 0xa0
  4031fe:	e5df      	b.n	402dc0 <_svfprintf_r+0x238>
  403200:	9311      	str	r3, [sp, #68]	; 0x44
  403202:	2a00      	cmp	r2, #0
  403204:	f040 86ea 	bne.w	403fdc <_svfprintf_r+0x1454>
  403208:	f01b 0f20 	tst.w	fp, #32
  40320c:	d15d      	bne.n	4032ca <_svfprintf_r+0x742>
  40320e:	f01b 0f10 	tst.w	fp, #16
  403212:	f040 8308 	bne.w	403826 <_svfprintf_r+0xc9e>
  403216:	f01b 0f40 	tst.w	fp, #64	; 0x40
  40321a:	f000 8304 	beq.w	403826 <_svfprintf_r+0xc9e>
  40321e:	990f      	ldr	r1, [sp, #60]	; 0x3c
  403220:	f9b1 4000 	ldrsh.w	r4, [r1]
  403224:	3104      	adds	r1, #4
  403226:	17e5      	asrs	r5, r4, #31
  403228:	4622      	mov	r2, r4
  40322a:	462b      	mov	r3, r5
  40322c:	910f      	str	r1, [sp, #60]	; 0x3c
  40322e:	2a00      	cmp	r2, #0
  403230:	f173 0300 	sbcs.w	r3, r3, #0
  403234:	db58      	blt.n	4032e8 <_svfprintf_r+0x760>
  403236:	990a      	ldr	r1, [sp, #40]	; 0x28
  403238:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40323c:	1c4a      	adds	r2, r1, #1
  40323e:	f04f 0301 	mov.w	r3, #1
  403242:	f47f ad9b 	bne.w	402d7c <_svfprintf_r+0x1f4>
  403246:	ea54 0205 	orrs.w	r2, r4, r5
  40324a:	f000 81df 	beq.w	40360c <_svfprintf_r+0xa84>
  40324e:	f8cd b01c 	str.w	fp, [sp, #28]
  403252:	2b01      	cmp	r3, #1
  403254:	f000 827b 	beq.w	40374e <_svfprintf_r+0xbc6>
  403258:	2b02      	cmp	r3, #2
  40325a:	f040 8206 	bne.w	40366a <_svfprintf_r+0xae2>
  40325e:	9818      	ldr	r0, [sp, #96]	; 0x60
  403260:	464e      	mov	r6, r9
  403262:	0923      	lsrs	r3, r4, #4
  403264:	f004 010f 	and.w	r1, r4, #15
  403268:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  40326c:	092a      	lsrs	r2, r5, #4
  40326e:	461c      	mov	r4, r3
  403270:	4615      	mov	r5, r2
  403272:	5c43      	ldrb	r3, [r0, r1]
  403274:	f806 3d01 	strb.w	r3, [r6, #-1]!
  403278:	ea54 0305 	orrs.w	r3, r4, r5
  40327c:	d1f1      	bne.n	403262 <_svfprintf_r+0x6da>
  40327e:	eba9 0306 	sub.w	r3, r9, r6
  403282:	930e      	str	r3, [sp, #56]	; 0x38
  403284:	e590      	b.n	402da8 <_svfprintf_r+0x220>
  403286:	9311      	str	r3, [sp, #68]	; 0x44
  403288:	2a00      	cmp	r2, #0
  40328a:	f040 86a3 	bne.w	403fd4 <_svfprintf_r+0x144c>
  40328e:	4b7e      	ldr	r3, [pc, #504]	; (403488 <_svfprintf_r+0x900>)
  403290:	9318      	str	r3, [sp, #96]	; 0x60
  403292:	f01b 0f20 	tst.w	fp, #32
  403296:	f43f aeef 	beq.w	403078 <_svfprintf_r+0x4f0>
  40329a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40329c:	3507      	adds	r5, #7
  40329e:	f025 0307 	bic.w	r3, r5, #7
  4032a2:	f103 0208 	add.w	r2, r3, #8
  4032a6:	f01b 0f01 	tst.w	fp, #1
  4032aa:	920f      	str	r2, [sp, #60]	; 0x3c
  4032ac:	e9d3 4500 	ldrd	r4, r5, [r3]
  4032b0:	f47f aef4 	bne.w	40309c <_svfprintf_r+0x514>
  4032b4:	2302      	movs	r3, #2
  4032b6:	e55a      	b.n	402d6e <_svfprintf_r+0x1e6>
  4032b8:	9311      	str	r3, [sp, #68]	; 0x44
  4032ba:	2a00      	cmp	r2, #0
  4032bc:	f040 8686 	bne.w	403fcc <_svfprintf_r+0x1444>
  4032c0:	f04b 0b10 	orr.w	fp, fp, #16
  4032c4:	f01b 0f20 	tst.w	fp, #32
  4032c8:	d0a1      	beq.n	40320e <_svfprintf_r+0x686>
  4032ca:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4032cc:	3507      	adds	r5, #7
  4032ce:	f025 0507 	bic.w	r5, r5, #7
  4032d2:	e9d5 2300 	ldrd	r2, r3, [r5]
  4032d6:	2a00      	cmp	r2, #0
  4032d8:	f105 0108 	add.w	r1, r5, #8
  4032dc:	461d      	mov	r5, r3
  4032de:	f173 0300 	sbcs.w	r3, r3, #0
  4032e2:	910f      	str	r1, [sp, #60]	; 0x3c
  4032e4:	4614      	mov	r4, r2
  4032e6:	daa6      	bge.n	403236 <_svfprintf_r+0x6ae>
  4032e8:	272d      	movs	r7, #45	; 0x2d
  4032ea:	4264      	negs	r4, r4
  4032ec:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  4032f0:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  4032f4:	2301      	movs	r3, #1
  4032f6:	e53d      	b.n	402d74 <_svfprintf_r+0x1ec>
  4032f8:	9311      	str	r3, [sp, #68]	; 0x44
  4032fa:	2a00      	cmp	r2, #0
  4032fc:	f040 8662 	bne.w	403fc4 <_svfprintf_r+0x143c>
  403300:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  403302:	3507      	adds	r5, #7
  403304:	f025 0307 	bic.w	r3, r5, #7
  403308:	f103 0208 	add.w	r2, r3, #8
  40330c:	920f      	str	r2, [sp, #60]	; 0x3c
  40330e:	681a      	ldr	r2, [r3, #0]
  403310:	9215      	str	r2, [sp, #84]	; 0x54
  403312:	685b      	ldr	r3, [r3, #4]
  403314:	9314      	str	r3, [sp, #80]	; 0x50
  403316:	9b14      	ldr	r3, [sp, #80]	; 0x50
  403318:	9d15      	ldr	r5, [sp, #84]	; 0x54
  40331a:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  40331e:	4628      	mov	r0, r5
  403320:	4621      	mov	r1, r4
  403322:	f04f 32ff 	mov.w	r2, #4294967295
  403326:	4b59      	ldr	r3, [pc, #356]	; (40348c <_svfprintf_r+0x904>)
  403328:	f003 fa94 	bl	406854 <__aeabi_dcmpun>
  40332c:	2800      	cmp	r0, #0
  40332e:	f040 834a 	bne.w	4039c6 <_svfprintf_r+0xe3e>
  403332:	4628      	mov	r0, r5
  403334:	4621      	mov	r1, r4
  403336:	f04f 32ff 	mov.w	r2, #4294967295
  40333a:	4b54      	ldr	r3, [pc, #336]	; (40348c <_svfprintf_r+0x904>)
  40333c:	f003 fa6c 	bl	406818 <__aeabi_dcmple>
  403340:	2800      	cmp	r0, #0
  403342:	f040 8340 	bne.w	4039c6 <_svfprintf_r+0xe3e>
  403346:	a815      	add	r0, sp, #84	; 0x54
  403348:	c80d      	ldmia	r0, {r0, r2, r3}
  40334a:	9914      	ldr	r1, [sp, #80]	; 0x50
  40334c:	f003 fa5a 	bl	406804 <__aeabi_dcmplt>
  403350:	2800      	cmp	r0, #0
  403352:	f040 8530 	bne.w	403db6 <_svfprintf_r+0x122e>
  403356:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40335a:	4e4d      	ldr	r6, [pc, #308]	; (403490 <_svfprintf_r+0x908>)
  40335c:	4b4d      	ldr	r3, [pc, #308]	; (403494 <_svfprintf_r+0x90c>)
  40335e:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  403362:	9007      	str	r0, [sp, #28]
  403364:	9811      	ldr	r0, [sp, #68]	; 0x44
  403366:	2203      	movs	r2, #3
  403368:	2100      	movs	r1, #0
  40336a:	9208      	str	r2, [sp, #32]
  40336c:	910a      	str	r1, [sp, #40]	; 0x28
  40336e:	2847      	cmp	r0, #71	; 0x47
  403370:	bfd8      	it	le
  403372:	461e      	movle	r6, r3
  403374:	920e      	str	r2, [sp, #56]	; 0x38
  403376:	9112      	str	r1, [sp, #72]	; 0x48
  403378:	e51e      	b.n	402db8 <_svfprintf_r+0x230>
  40337a:	f04b 0b08 	orr.w	fp, fp, #8
  40337e:	f89a 3000 	ldrb.w	r3, [sl]
  403382:	e459      	b.n	402c38 <_svfprintf_r+0xb0>
  403384:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  403388:	2300      	movs	r3, #0
  40338a:	461c      	mov	r4, r3
  40338c:	f81a 3b01 	ldrb.w	r3, [sl], #1
  403390:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  403394:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  403398:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  40339c:	2809      	cmp	r0, #9
  40339e:	d9f5      	bls.n	40338c <_svfprintf_r+0x804>
  4033a0:	940d      	str	r4, [sp, #52]	; 0x34
  4033a2:	e44b      	b.n	402c3c <_svfprintf_r+0xb4>
  4033a4:	f04b 0b10 	orr.w	fp, fp, #16
  4033a8:	9311      	str	r3, [sp, #68]	; 0x44
  4033aa:	f01b 0320 	ands.w	r3, fp, #32
  4033ae:	f43f ae1d 	beq.w	402fec <_svfprintf_r+0x464>
  4033b2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4033b4:	3507      	adds	r5, #7
  4033b6:	f025 0307 	bic.w	r3, r5, #7
  4033ba:	f103 0208 	add.w	r2, r3, #8
  4033be:	e9d3 4500 	ldrd	r4, r5, [r3]
  4033c2:	920f      	str	r2, [sp, #60]	; 0x3c
  4033c4:	2300      	movs	r3, #0
  4033c6:	e4d2      	b.n	402d6e <_svfprintf_r+0x1e6>
  4033c8:	9311      	str	r3, [sp, #68]	; 0x44
  4033ca:	2a00      	cmp	r2, #0
  4033cc:	f040 85e7 	bne.w	403f9e <_svfprintf_r+0x1416>
  4033d0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4033d2:	2a00      	cmp	r2, #0
  4033d4:	f43f aca3 	beq.w	402d1e <_svfprintf_r+0x196>
  4033d8:	2300      	movs	r3, #0
  4033da:	2101      	movs	r1, #1
  4033dc:	461f      	mov	r7, r3
  4033de:	9108      	str	r1, [sp, #32]
  4033e0:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  4033e4:	f8cd b01c 	str.w	fp, [sp, #28]
  4033e8:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  4033ec:	930a      	str	r3, [sp, #40]	; 0x28
  4033ee:	9312      	str	r3, [sp, #72]	; 0x48
  4033f0:	910e      	str	r1, [sp, #56]	; 0x38
  4033f2:	ae28      	add	r6, sp, #160	; 0xa0
  4033f4:	e4e4      	b.n	402dc0 <_svfprintf_r+0x238>
  4033f6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4033f8:	e534      	b.n	402e64 <_svfprintf_r+0x2dc>
  4033fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4033fc:	2b65      	cmp	r3, #101	; 0x65
  4033fe:	f340 80a7 	ble.w	403550 <_svfprintf_r+0x9c8>
  403402:	a815      	add	r0, sp, #84	; 0x54
  403404:	c80d      	ldmia	r0, {r0, r2, r3}
  403406:	9914      	ldr	r1, [sp, #80]	; 0x50
  403408:	f003 f9f2 	bl	4067f0 <__aeabi_dcmpeq>
  40340c:	2800      	cmp	r0, #0
  40340e:	f000 8150 	beq.w	4036b2 <_svfprintf_r+0xb2a>
  403412:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403414:	4a20      	ldr	r2, [pc, #128]	; (403498 <_svfprintf_r+0x910>)
  403416:	f8c8 2000 	str.w	r2, [r8]
  40341a:	3301      	adds	r3, #1
  40341c:	3401      	adds	r4, #1
  40341e:	2201      	movs	r2, #1
  403420:	2b07      	cmp	r3, #7
  403422:	9427      	str	r4, [sp, #156]	; 0x9c
  403424:	9326      	str	r3, [sp, #152]	; 0x98
  403426:	f8c8 2004 	str.w	r2, [r8, #4]
  40342a:	f300 836a 	bgt.w	403b02 <_svfprintf_r+0xf7a>
  40342e:	f108 0808 	add.w	r8, r8, #8
  403432:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  403434:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  403436:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403438:	4293      	cmp	r3, r2
  40343a:	db03      	blt.n	403444 <_svfprintf_r+0x8bc>
  40343c:	9b07      	ldr	r3, [sp, #28]
  40343e:	07dd      	lsls	r5, r3, #31
  403440:	f57f ad82 	bpl.w	402f48 <_svfprintf_r+0x3c0>
  403444:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403446:	9919      	ldr	r1, [sp, #100]	; 0x64
  403448:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  40344a:	f8c8 2000 	str.w	r2, [r8]
  40344e:	3301      	adds	r3, #1
  403450:	440c      	add	r4, r1
  403452:	2b07      	cmp	r3, #7
  403454:	f8c8 1004 	str.w	r1, [r8, #4]
  403458:	9427      	str	r4, [sp, #156]	; 0x9c
  40345a:	9326      	str	r3, [sp, #152]	; 0x98
  40345c:	f300 839e 	bgt.w	403b9c <_svfprintf_r+0x1014>
  403460:	f108 0808 	add.w	r8, r8, #8
  403464:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  403466:	1e5e      	subs	r6, r3, #1
  403468:	2e00      	cmp	r6, #0
  40346a:	f77f ad6d 	ble.w	402f48 <_svfprintf_r+0x3c0>
  40346e:	2e10      	cmp	r6, #16
  403470:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403472:	4d0a      	ldr	r5, [pc, #40]	; (40349c <_svfprintf_r+0x914>)
  403474:	f340 81f5 	ble.w	403862 <_svfprintf_r+0xcda>
  403478:	4622      	mov	r2, r4
  40347a:	2710      	movs	r7, #16
  40347c:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  403480:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  403482:	e013      	b.n	4034ac <_svfprintf_r+0x924>
  403484:	00407378 	.word	0x00407378
  403488:	00407364 	.word	0x00407364
  40348c:	7fefffff 	.word	0x7fefffff
  403490:	00407358 	.word	0x00407358
  403494:	00407354 	.word	0x00407354
  403498:	00407394 	.word	0x00407394
  40349c:	004073a8 	.word	0x004073a8
  4034a0:	f108 0808 	add.w	r8, r8, #8
  4034a4:	3e10      	subs	r6, #16
  4034a6:	2e10      	cmp	r6, #16
  4034a8:	f340 81da 	ble.w	403860 <_svfprintf_r+0xcd8>
  4034ac:	3301      	adds	r3, #1
  4034ae:	3210      	adds	r2, #16
  4034b0:	2b07      	cmp	r3, #7
  4034b2:	9227      	str	r2, [sp, #156]	; 0x9c
  4034b4:	9326      	str	r3, [sp, #152]	; 0x98
  4034b6:	e888 00a0 	stmia.w	r8, {r5, r7}
  4034ba:	ddf1      	ble.n	4034a0 <_svfprintf_r+0x918>
  4034bc:	aa25      	add	r2, sp, #148	; 0x94
  4034be:	4621      	mov	r1, r4
  4034c0:	4658      	mov	r0, fp
  4034c2:	f002 fccb 	bl	405e5c <__ssprint_r>
  4034c6:	2800      	cmp	r0, #0
  4034c8:	f47f ac30 	bne.w	402d2c <_svfprintf_r+0x1a4>
  4034cc:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4034ce:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4034d0:	46c8      	mov	r8, r9
  4034d2:	e7e7      	b.n	4034a4 <_svfprintf_r+0x91c>
  4034d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4034d6:	9a08      	ldr	r2, [sp, #32]
  4034d8:	1a9f      	subs	r7, r3, r2
  4034da:	2f00      	cmp	r7, #0
  4034dc:	f77f ace5 	ble.w	402eaa <_svfprintf_r+0x322>
  4034e0:	2f10      	cmp	r7, #16
  4034e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4034e4:	4db6      	ldr	r5, [pc, #728]	; (4037c0 <_svfprintf_r+0xc38>)
  4034e6:	dd27      	ble.n	403538 <_svfprintf_r+0x9b0>
  4034e8:	4642      	mov	r2, r8
  4034ea:	4621      	mov	r1, r4
  4034ec:	46b0      	mov	r8, r6
  4034ee:	f04f 0b10 	mov.w	fp, #16
  4034f2:	462e      	mov	r6, r5
  4034f4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4034f6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  4034f8:	e004      	b.n	403504 <_svfprintf_r+0x97c>
  4034fa:	3f10      	subs	r7, #16
  4034fc:	2f10      	cmp	r7, #16
  4034fe:	f102 0208 	add.w	r2, r2, #8
  403502:	dd15      	ble.n	403530 <_svfprintf_r+0x9a8>
  403504:	3301      	adds	r3, #1
  403506:	3110      	adds	r1, #16
  403508:	2b07      	cmp	r3, #7
  40350a:	9127      	str	r1, [sp, #156]	; 0x9c
  40350c:	9326      	str	r3, [sp, #152]	; 0x98
  40350e:	e882 0840 	stmia.w	r2, {r6, fp}
  403512:	ddf2      	ble.n	4034fa <_svfprintf_r+0x972>
  403514:	aa25      	add	r2, sp, #148	; 0x94
  403516:	4629      	mov	r1, r5
  403518:	4620      	mov	r0, r4
  40351a:	f002 fc9f 	bl	405e5c <__ssprint_r>
  40351e:	2800      	cmp	r0, #0
  403520:	f47f ac04 	bne.w	402d2c <_svfprintf_r+0x1a4>
  403524:	3f10      	subs	r7, #16
  403526:	2f10      	cmp	r7, #16
  403528:	9927      	ldr	r1, [sp, #156]	; 0x9c
  40352a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40352c:	464a      	mov	r2, r9
  40352e:	dce9      	bgt.n	403504 <_svfprintf_r+0x97c>
  403530:	4635      	mov	r5, r6
  403532:	460c      	mov	r4, r1
  403534:	4646      	mov	r6, r8
  403536:	4690      	mov	r8, r2
  403538:	3301      	adds	r3, #1
  40353a:	443c      	add	r4, r7
  40353c:	2b07      	cmp	r3, #7
  40353e:	9427      	str	r4, [sp, #156]	; 0x9c
  403540:	9326      	str	r3, [sp, #152]	; 0x98
  403542:	e888 00a0 	stmia.w	r8, {r5, r7}
  403546:	f300 8232 	bgt.w	4039ae <_svfprintf_r+0xe26>
  40354a:	f108 0808 	add.w	r8, r8, #8
  40354e:	e4ac      	b.n	402eaa <_svfprintf_r+0x322>
  403550:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  403552:	9f26      	ldr	r7, [sp, #152]	; 0x98
  403554:	2b01      	cmp	r3, #1
  403556:	f340 81fe 	ble.w	403956 <_svfprintf_r+0xdce>
  40355a:	3701      	adds	r7, #1
  40355c:	3401      	adds	r4, #1
  40355e:	2301      	movs	r3, #1
  403560:	2f07      	cmp	r7, #7
  403562:	9427      	str	r4, [sp, #156]	; 0x9c
  403564:	9726      	str	r7, [sp, #152]	; 0x98
  403566:	f8c8 6000 	str.w	r6, [r8]
  40356a:	f8c8 3004 	str.w	r3, [r8, #4]
  40356e:	f300 8203 	bgt.w	403978 <_svfprintf_r+0xdf0>
  403572:	f108 0808 	add.w	r8, r8, #8
  403576:	9a19      	ldr	r2, [sp, #100]	; 0x64
  403578:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  40357a:	f8c8 3000 	str.w	r3, [r8]
  40357e:	3701      	adds	r7, #1
  403580:	4414      	add	r4, r2
  403582:	2f07      	cmp	r7, #7
  403584:	9427      	str	r4, [sp, #156]	; 0x9c
  403586:	9726      	str	r7, [sp, #152]	; 0x98
  403588:	f8c8 2004 	str.w	r2, [r8, #4]
  40358c:	f300 8200 	bgt.w	403990 <_svfprintf_r+0xe08>
  403590:	f108 0808 	add.w	r8, r8, #8
  403594:	a815      	add	r0, sp, #84	; 0x54
  403596:	c80d      	ldmia	r0, {r0, r2, r3}
  403598:	9914      	ldr	r1, [sp, #80]	; 0x50
  40359a:	f003 f929 	bl	4067f0 <__aeabi_dcmpeq>
  40359e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4035a0:	2800      	cmp	r0, #0
  4035a2:	f040 8101 	bne.w	4037a8 <_svfprintf_r+0xc20>
  4035a6:	3b01      	subs	r3, #1
  4035a8:	3701      	adds	r7, #1
  4035aa:	3601      	adds	r6, #1
  4035ac:	441c      	add	r4, r3
  4035ae:	2f07      	cmp	r7, #7
  4035b0:	9726      	str	r7, [sp, #152]	; 0x98
  4035b2:	9427      	str	r4, [sp, #156]	; 0x9c
  4035b4:	f8c8 6000 	str.w	r6, [r8]
  4035b8:	f8c8 3004 	str.w	r3, [r8, #4]
  4035bc:	f300 8127 	bgt.w	40380e <_svfprintf_r+0xc86>
  4035c0:	f108 0808 	add.w	r8, r8, #8
  4035c4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  4035c6:	f8c8 2004 	str.w	r2, [r8, #4]
  4035ca:	3701      	adds	r7, #1
  4035cc:	4414      	add	r4, r2
  4035ce:	ab21      	add	r3, sp, #132	; 0x84
  4035d0:	2f07      	cmp	r7, #7
  4035d2:	9427      	str	r4, [sp, #156]	; 0x9c
  4035d4:	9726      	str	r7, [sp, #152]	; 0x98
  4035d6:	f8c8 3000 	str.w	r3, [r8]
  4035da:	f77f acb3 	ble.w	402f44 <_svfprintf_r+0x3bc>
  4035de:	aa25      	add	r2, sp, #148	; 0x94
  4035e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4035e2:	980c      	ldr	r0, [sp, #48]	; 0x30
  4035e4:	f002 fc3a 	bl	405e5c <__ssprint_r>
  4035e8:	2800      	cmp	r0, #0
  4035ea:	f47f ab9f 	bne.w	402d2c <_svfprintf_r+0x1a4>
  4035ee:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4035f0:	46c8      	mov	r8, r9
  4035f2:	e4a9      	b.n	402f48 <_svfprintf_r+0x3c0>
  4035f4:	aa25      	add	r2, sp, #148	; 0x94
  4035f6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4035f8:	980c      	ldr	r0, [sp, #48]	; 0x30
  4035fa:	f002 fc2f 	bl	405e5c <__ssprint_r>
  4035fe:	2800      	cmp	r0, #0
  403600:	f43f aceb 	beq.w	402fda <_svfprintf_r+0x452>
  403604:	f7ff bb92 	b.w	402d2c <_svfprintf_r+0x1a4>
  403608:	f8dd b01c 	ldr.w	fp, [sp, #28]
  40360c:	2b01      	cmp	r3, #1
  40360e:	f000 8134 	beq.w	40387a <_svfprintf_r+0xcf2>
  403612:	2b02      	cmp	r3, #2
  403614:	d125      	bne.n	403662 <_svfprintf_r+0xada>
  403616:	f8cd b01c 	str.w	fp, [sp, #28]
  40361a:	2400      	movs	r4, #0
  40361c:	2500      	movs	r5, #0
  40361e:	e61e      	b.n	40325e <_svfprintf_r+0x6d6>
  403620:	aa25      	add	r2, sp, #148	; 0x94
  403622:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403624:	980c      	ldr	r0, [sp, #48]	; 0x30
  403626:	f002 fc19 	bl	405e5c <__ssprint_r>
  40362a:	2800      	cmp	r0, #0
  40362c:	f47f ab7e 	bne.w	402d2c <_svfprintf_r+0x1a4>
  403630:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403632:	46c8      	mov	r8, r9
  403634:	e475      	b.n	402f22 <_svfprintf_r+0x39a>
  403636:	aa25      	add	r2, sp, #148	; 0x94
  403638:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40363a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40363c:	f002 fc0e 	bl	405e5c <__ssprint_r>
  403640:	2800      	cmp	r0, #0
  403642:	f47f ab73 	bne.w	402d2c <_svfprintf_r+0x1a4>
  403646:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403648:	46c8      	mov	r8, r9
  40364a:	e41b      	b.n	402e84 <_svfprintf_r+0x2fc>
  40364c:	aa25      	add	r2, sp, #148	; 0x94
  40364e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403650:	980c      	ldr	r0, [sp, #48]	; 0x30
  403652:	f002 fc03 	bl	405e5c <__ssprint_r>
  403656:	2800      	cmp	r0, #0
  403658:	f47f ab68 	bne.w	402d2c <_svfprintf_r+0x1a4>
  40365c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40365e:	46c8      	mov	r8, r9
  403660:	e420      	b.n	402ea4 <_svfprintf_r+0x31c>
  403662:	f8cd b01c 	str.w	fp, [sp, #28]
  403666:	2400      	movs	r4, #0
  403668:	2500      	movs	r5, #0
  40366a:	4649      	mov	r1, r9
  40366c:	e000      	b.n	403670 <_svfprintf_r+0xae8>
  40366e:	4631      	mov	r1, r6
  403670:	08e2      	lsrs	r2, r4, #3
  403672:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  403676:	08e8      	lsrs	r0, r5, #3
  403678:	f004 0307 	and.w	r3, r4, #7
  40367c:	4605      	mov	r5, r0
  40367e:	4614      	mov	r4, r2
  403680:	3330      	adds	r3, #48	; 0x30
  403682:	ea54 0205 	orrs.w	r2, r4, r5
  403686:	f801 3c01 	strb.w	r3, [r1, #-1]
  40368a:	f101 36ff 	add.w	r6, r1, #4294967295
  40368e:	d1ee      	bne.n	40366e <_svfprintf_r+0xae6>
  403690:	9a07      	ldr	r2, [sp, #28]
  403692:	07d2      	lsls	r2, r2, #31
  403694:	f57f adf3 	bpl.w	40327e <_svfprintf_r+0x6f6>
  403698:	2b30      	cmp	r3, #48	; 0x30
  40369a:	f43f adf0 	beq.w	40327e <_svfprintf_r+0x6f6>
  40369e:	3902      	subs	r1, #2
  4036a0:	2330      	movs	r3, #48	; 0x30
  4036a2:	f806 3c01 	strb.w	r3, [r6, #-1]
  4036a6:	eba9 0301 	sub.w	r3, r9, r1
  4036aa:	930e      	str	r3, [sp, #56]	; 0x38
  4036ac:	460e      	mov	r6, r1
  4036ae:	f7ff bb7b 	b.w	402da8 <_svfprintf_r+0x220>
  4036b2:	991f      	ldr	r1, [sp, #124]	; 0x7c
  4036b4:	2900      	cmp	r1, #0
  4036b6:	f340 822e 	ble.w	403b16 <_svfprintf_r+0xf8e>
  4036ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4036bc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  4036be:	4293      	cmp	r3, r2
  4036c0:	bfa8      	it	ge
  4036c2:	4613      	movge	r3, r2
  4036c4:	2b00      	cmp	r3, #0
  4036c6:	461f      	mov	r7, r3
  4036c8:	dd0d      	ble.n	4036e6 <_svfprintf_r+0xb5e>
  4036ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4036cc:	f8c8 6000 	str.w	r6, [r8]
  4036d0:	3301      	adds	r3, #1
  4036d2:	443c      	add	r4, r7
  4036d4:	2b07      	cmp	r3, #7
  4036d6:	9427      	str	r4, [sp, #156]	; 0x9c
  4036d8:	f8c8 7004 	str.w	r7, [r8, #4]
  4036dc:	9326      	str	r3, [sp, #152]	; 0x98
  4036de:	f300 831f 	bgt.w	403d20 <_svfprintf_r+0x1198>
  4036e2:	f108 0808 	add.w	r8, r8, #8
  4036e6:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4036e8:	2f00      	cmp	r7, #0
  4036ea:	bfa8      	it	ge
  4036ec:	1bdb      	subge	r3, r3, r7
  4036ee:	2b00      	cmp	r3, #0
  4036f0:	461f      	mov	r7, r3
  4036f2:	f340 80d6 	ble.w	4038a2 <_svfprintf_r+0xd1a>
  4036f6:	2f10      	cmp	r7, #16
  4036f8:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4036fa:	4d31      	ldr	r5, [pc, #196]	; (4037c0 <_svfprintf_r+0xc38>)
  4036fc:	f340 81ed 	ble.w	403ada <_svfprintf_r+0xf52>
  403700:	4642      	mov	r2, r8
  403702:	4621      	mov	r1, r4
  403704:	46b0      	mov	r8, r6
  403706:	f04f 0b10 	mov.w	fp, #16
  40370a:	462e      	mov	r6, r5
  40370c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40370e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  403710:	e004      	b.n	40371c <_svfprintf_r+0xb94>
  403712:	3208      	adds	r2, #8
  403714:	3f10      	subs	r7, #16
  403716:	2f10      	cmp	r7, #16
  403718:	f340 81db 	ble.w	403ad2 <_svfprintf_r+0xf4a>
  40371c:	3301      	adds	r3, #1
  40371e:	3110      	adds	r1, #16
  403720:	2b07      	cmp	r3, #7
  403722:	9127      	str	r1, [sp, #156]	; 0x9c
  403724:	9326      	str	r3, [sp, #152]	; 0x98
  403726:	e882 0840 	stmia.w	r2, {r6, fp}
  40372a:	ddf2      	ble.n	403712 <_svfprintf_r+0xb8a>
  40372c:	aa25      	add	r2, sp, #148	; 0x94
  40372e:	4629      	mov	r1, r5
  403730:	4620      	mov	r0, r4
  403732:	f002 fb93 	bl	405e5c <__ssprint_r>
  403736:	2800      	cmp	r0, #0
  403738:	f47f aaf8 	bne.w	402d2c <_svfprintf_r+0x1a4>
  40373c:	9927      	ldr	r1, [sp, #156]	; 0x9c
  40373e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403740:	464a      	mov	r2, r9
  403742:	e7e7      	b.n	403714 <_svfprintf_r+0xb8c>
  403744:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403746:	930e      	str	r3, [sp, #56]	; 0x38
  403748:	464e      	mov	r6, r9
  40374a:	f7ff bb2d 	b.w	402da8 <_svfprintf_r+0x220>
  40374e:	2d00      	cmp	r5, #0
  403750:	bf08      	it	eq
  403752:	2c0a      	cmpeq	r4, #10
  403754:	f0c0 808f 	bcc.w	403876 <_svfprintf_r+0xcee>
  403758:	464e      	mov	r6, r9
  40375a:	4620      	mov	r0, r4
  40375c:	4629      	mov	r1, r5
  40375e:	220a      	movs	r2, #10
  403760:	2300      	movs	r3, #0
  403762:	f7fe fd95 	bl	402290 <__aeabi_uldivmod>
  403766:	3230      	adds	r2, #48	; 0x30
  403768:	f806 2d01 	strb.w	r2, [r6, #-1]!
  40376c:	4620      	mov	r0, r4
  40376e:	4629      	mov	r1, r5
  403770:	2300      	movs	r3, #0
  403772:	220a      	movs	r2, #10
  403774:	f7fe fd8c 	bl	402290 <__aeabi_uldivmod>
  403778:	4604      	mov	r4, r0
  40377a:	460d      	mov	r5, r1
  40377c:	ea54 0305 	orrs.w	r3, r4, r5
  403780:	d1eb      	bne.n	40375a <_svfprintf_r+0xbd2>
  403782:	eba9 0306 	sub.w	r3, r9, r6
  403786:	930e      	str	r3, [sp, #56]	; 0x38
  403788:	f7ff bb0e 	b.w	402da8 <_svfprintf_r+0x220>
  40378c:	aa25      	add	r2, sp, #148	; 0x94
  40378e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403790:	980c      	ldr	r0, [sp, #48]	; 0x30
  403792:	f002 fb63 	bl	405e5c <__ssprint_r>
  403796:	2800      	cmp	r0, #0
  403798:	f47f aac8 	bne.w	402d2c <_svfprintf_r+0x1a4>
  40379c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4037a0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4037a2:	46c8      	mov	r8, r9
  4037a4:	f7ff bb5e 	b.w	402e64 <_svfprintf_r+0x2dc>
  4037a8:	1e5e      	subs	r6, r3, #1
  4037aa:	2e00      	cmp	r6, #0
  4037ac:	f77f af0a 	ble.w	4035c4 <_svfprintf_r+0xa3c>
  4037b0:	2e10      	cmp	r6, #16
  4037b2:	4d03      	ldr	r5, [pc, #12]	; (4037c0 <_svfprintf_r+0xc38>)
  4037b4:	dd22      	ble.n	4037fc <_svfprintf_r+0xc74>
  4037b6:	4622      	mov	r2, r4
  4037b8:	f04f 0b10 	mov.w	fp, #16
  4037bc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4037be:	e006      	b.n	4037ce <_svfprintf_r+0xc46>
  4037c0:	004073a8 	.word	0x004073a8
  4037c4:	3e10      	subs	r6, #16
  4037c6:	2e10      	cmp	r6, #16
  4037c8:	f108 0808 	add.w	r8, r8, #8
  4037cc:	dd15      	ble.n	4037fa <_svfprintf_r+0xc72>
  4037ce:	3701      	adds	r7, #1
  4037d0:	3210      	adds	r2, #16
  4037d2:	2f07      	cmp	r7, #7
  4037d4:	9227      	str	r2, [sp, #156]	; 0x9c
  4037d6:	9726      	str	r7, [sp, #152]	; 0x98
  4037d8:	e888 0820 	stmia.w	r8, {r5, fp}
  4037dc:	ddf2      	ble.n	4037c4 <_svfprintf_r+0xc3c>
  4037de:	aa25      	add	r2, sp, #148	; 0x94
  4037e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4037e2:	4620      	mov	r0, r4
  4037e4:	f002 fb3a 	bl	405e5c <__ssprint_r>
  4037e8:	2800      	cmp	r0, #0
  4037ea:	f47f aa9f 	bne.w	402d2c <_svfprintf_r+0x1a4>
  4037ee:	3e10      	subs	r6, #16
  4037f0:	2e10      	cmp	r6, #16
  4037f2:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4037f4:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4037f6:	46c8      	mov	r8, r9
  4037f8:	dce9      	bgt.n	4037ce <_svfprintf_r+0xc46>
  4037fa:	4614      	mov	r4, r2
  4037fc:	3701      	adds	r7, #1
  4037fe:	4434      	add	r4, r6
  403800:	2f07      	cmp	r7, #7
  403802:	9427      	str	r4, [sp, #156]	; 0x9c
  403804:	9726      	str	r7, [sp, #152]	; 0x98
  403806:	e888 0060 	stmia.w	r8, {r5, r6}
  40380a:	f77f aed9 	ble.w	4035c0 <_svfprintf_r+0xa38>
  40380e:	aa25      	add	r2, sp, #148	; 0x94
  403810:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403812:	980c      	ldr	r0, [sp, #48]	; 0x30
  403814:	f002 fb22 	bl	405e5c <__ssprint_r>
  403818:	2800      	cmp	r0, #0
  40381a:	f47f aa87 	bne.w	402d2c <_svfprintf_r+0x1a4>
  40381e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403820:	9f26      	ldr	r7, [sp, #152]	; 0x98
  403822:	46c8      	mov	r8, r9
  403824:	e6ce      	b.n	4035c4 <_svfprintf_r+0xa3c>
  403826:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403828:	6814      	ldr	r4, [r2, #0]
  40382a:	4613      	mov	r3, r2
  40382c:	3304      	adds	r3, #4
  40382e:	17e5      	asrs	r5, r4, #31
  403830:	930f      	str	r3, [sp, #60]	; 0x3c
  403832:	4622      	mov	r2, r4
  403834:	462b      	mov	r3, r5
  403836:	e4fa      	b.n	40322e <_svfprintf_r+0x6a6>
  403838:	3204      	adds	r2, #4
  40383a:	681c      	ldr	r4, [r3, #0]
  40383c:	920f      	str	r2, [sp, #60]	; 0x3c
  40383e:	2301      	movs	r3, #1
  403840:	2500      	movs	r5, #0
  403842:	f7ff ba94 	b.w	402d6e <_svfprintf_r+0x1e6>
  403846:	681c      	ldr	r4, [r3, #0]
  403848:	3304      	adds	r3, #4
  40384a:	930f      	str	r3, [sp, #60]	; 0x3c
  40384c:	2500      	movs	r5, #0
  40384e:	e421      	b.n	403094 <_svfprintf_r+0x50c>
  403850:	990f      	ldr	r1, [sp, #60]	; 0x3c
  403852:	460a      	mov	r2, r1
  403854:	3204      	adds	r2, #4
  403856:	680c      	ldr	r4, [r1, #0]
  403858:	920f      	str	r2, [sp, #60]	; 0x3c
  40385a:	2500      	movs	r5, #0
  40385c:	f7ff ba87 	b.w	402d6e <_svfprintf_r+0x1e6>
  403860:	4614      	mov	r4, r2
  403862:	3301      	adds	r3, #1
  403864:	4434      	add	r4, r6
  403866:	2b07      	cmp	r3, #7
  403868:	9427      	str	r4, [sp, #156]	; 0x9c
  40386a:	9326      	str	r3, [sp, #152]	; 0x98
  40386c:	e888 0060 	stmia.w	r8, {r5, r6}
  403870:	f77f ab68 	ble.w	402f44 <_svfprintf_r+0x3bc>
  403874:	e6b3      	b.n	4035de <_svfprintf_r+0xa56>
  403876:	f8dd b01c 	ldr.w	fp, [sp, #28]
  40387a:	f8cd b01c 	str.w	fp, [sp, #28]
  40387e:	ae42      	add	r6, sp, #264	; 0x108
  403880:	3430      	adds	r4, #48	; 0x30
  403882:	2301      	movs	r3, #1
  403884:	f806 4d41 	strb.w	r4, [r6, #-65]!
  403888:	930e      	str	r3, [sp, #56]	; 0x38
  40388a:	f7ff ba8d 	b.w	402da8 <_svfprintf_r+0x220>
  40388e:	aa25      	add	r2, sp, #148	; 0x94
  403890:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403892:	980c      	ldr	r0, [sp, #48]	; 0x30
  403894:	f002 fae2 	bl	405e5c <__ssprint_r>
  403898:	2800      	cmp	r0, #0
  40389a:	f47f aa47 	bne.w	402d2c <_svfprintf_r+0x1a4>
  40389e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4038a0:	46c8      	mov	r8, r9
  4038a2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  4038a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4038a6:	429a      	cmp	r2, r3
  4038a8:	db44      	blt.n	403934 <_svfprintf_r+0xdac>
  4038aa:	9b07      	ldr	r3, [sp, #28]
  4038ac:	07d9      	lsls	r1, r3, #31
  4038ae:	d441      	bmi.n	403934 <_svfprintf_r+0xdac>
  4038b0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4038b2:	9812      	ldr	r0, [sp, #72]	; 0x48
  4038b4:	1a9a      	subs	r2, r3, r2
  4038b6:	1a1d      	subs	r5, r3, r0
  4038b8:	4295      	cmp	r5, r2
  4038ba:	bfa8      	it	ge
  4038bc:	4615      	movge	r5, r2
  4038be:	2d00      	cmp	r5, #0
  4038c0:	dd0e      	ble.n	4038e0 <_svfprintf_r+0xd58>
  4038c2:	9926      	ldr	r1, [sp, #152]	; 0x98
  4038c4:	f8c8 5004 	str.w	r5, [r8, #4]
  4038c8:	3101      	adds	r1, #1
  4038ca:	4406      	add	r6, r0
  4038cc:	442c      	add	r4, r5
  4038ce:	2907      	cmp	r1, #7
  4038d0:	f8c8 6000 	str.w	r6, [r8]
  4038d4:	9427      	str	r4, [sp, #156]	; 0x9c
  4038d6:	9126      	str	r1, [sp, #152]	; 0x98
  4038d8:	f300 823b 	bgt.w	403d52 <_svfprintf_r+0x11ca>
  4038dc:	f108 0808 	add.w	r8, r8, #8
  4038e0:	2d00      	cmp	r5, #0
  4038e2:	bfac      	ite	ge
  4038e4:	1b56      	subge	r6, r2, r5
  4038e6:	4616      	movlt	r6, r2
  4038e8:	2e00      	cmp	r6, #0
  4038ea:	f77f ab2d 	ble.w	402f48 <_svfprintf_r+0x3c0>
  4038ee:	2e10      	cmp	r6, #16
  4038f0:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4038f2:	4db0      	ldr	r5, [pc, #704]	; (403bb4 <_svfprintf_r+0x102c>)
  4038f4:	ddb5      	ble.n	403862 <_svfprintf_r+0xcda>
  4038f6:	4622      	mov	r2, r4
  4038f8:	2710      	movs	r7, #16
  4038fa:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  4038fe:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  403900:	e004      	b.n	40390c <_svfprintf_r+0xd84>
  403902:	f108 0808 	add.w	r8, r8, #8
  403906:	3e10      	subs	r6, #16
  403908:	2e10      	cmp	r6, #16
  40390a:	dda9      	ble.n	403860 <_svfprintf_r+0xcd8>
  40390c:	3301      	adds	r3, #1
  40390e:	3210      	adds	r2, #16
  403910:	2b07      	cmp	r3, #7
  403912:	9227      	str	r2, [sp, #156]	; 0x9c
  403914:	9326      	str	r3, [sp, #152]	; 0x98
  403916:	e888 00a0 	stmia.w	r8, {r5, r7}
  40391a:	ddf2      	ble.n	403902 <_svfprintf_r+0xd7a>
  40391c:	aa25      	add	r2, sp, #148	; 0x94
  40391e:	4621      	mov	r1, r4
  403920:	4658      	mov	r0, fp
  403922:	f002 fa9b 	bl	405e5c <__ssprint_r>
  403926:	2800      	cmp	r0, #0
  403928:	f47f aa00 	bne.w	402d2c <_svfprintf_r+0x1a4>
  40392c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40392e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403930:	46c8      	mov	r8, r9
  403932:	e7e8      	b.n	403906 <_svfprintf_r+0xd7e>
  403934:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403936:	9819      	ldr	r0, [sp, #100]	; 0x64
  403938:	991a      	ldr	r1, [sp, #104]	; 0x68
  40393a:	f8c8 1000 	str.w	r1, [r8]
  40393e:	3301      	adds	r3, #1
  403940:	4404      	add	r4, r0
  403942:	2b07      	cmp	r3, #7
  403944:	9427      	str	r4, [sp, #156]	; 0x9c
  403946:	f8c8 0004 	str.w	r0, [r8, #4]
  40394a:	9326      	str	r3, [sp, #152]	; 0x98
  40394c:	f300 81f5 	bgt.w	403d3a <_svfprintf_r+0x11b2>
  403950:	f108 0808 	add.w	r8, r8, #8
  403954:	e7ac      	b.n	4038b0 <_svfprintf_r+0xd28>
  403956:	9b07      	ldr	r3, [sp, #28]
  403958:	07da      	lsls	r2, r3, #31
  40395a:	f53f adfe 	bmi.w	40355a <_svfprintf_r+0x9d2>
  40395e:	3701      	adds	r7, #1
  403960:	3401      	adds	r4, #1
  403962:	2301      	movs	r3, #1
  403964:	2f07      	cmp	r7, #7
  403966:	9427      	str	r4, [sp, #156]	; 0x9c
  403968:	9726      	str	r7, [sp, #152]	; 0x98
  40396a:	f8c8 6000 	str.w	r6, [r8]
  40396e:	f8c8 3004 	str.w	r3, [r8, #4]
  403972:	f77f ae25 	ble.w	4035c0 <_svfprintf_r+0xa38>
  403976:	e74a      	b.n	40380e <_svfprintf_r+0xc86>
  403978:	aa25      	add	r2, sp, #148	; 0x94
  40397a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40397c:	980c      	ldr	r0, [sp, #48]	; 0x30
  40397e:	f002 fa6d 	bl	405e5c <__ssprint_r>
  403982:	2800      	cmp	r0, #0
  403984:	f47f a9d2 	bne.w	402d2c <_svfprintf_r+0x1a4>
  403988:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40398a:	9f26      	ldr	r7, [sp, #152]	; 0x98
  40398c:	46c8      	mov	r8, r9
  40398e:	e5f2      	b.n	403576 <_svfprintf_r+0x9ee>
  403990:	aa25      	add	r2, sp, #148	; 0x94
  403992:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403994:	980c      	ldr	r0, [sp, #48]	; 0x30
  403996:	f002 fa61 	bl	405e5c <__ssprint_r>
  40399a:	2800      	cmp	r0, #0
  40399c:	f47f a9c6 	bne.w	402d2c <_svfprintf_r+0x1a4>
  4039a0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4039a2:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4039a4:	46c8      	mov	r8, r9
  4039a6:	e5f5      	b.n	403594 <_svfprintf_r+0xa0c>
  4039a8:	464e      	mov	r6, r9
  4039aa:	f7ff b9fd 	b.w	402da8 <_svfprintf_r+0x220>
  4039ae:	aa25      	add	r2, sp, #148	; 0x94
  4039b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4039b2:	980c      	ldr	r0, [sp, #48]	; 0x30
  4039b4:	f002 fa52 	bl	405e5c <__ssprint_r>
  4039b8:	2800      	cmp	r0, #0
  4039ba:	f47f a9b7 	bne.w	402d2c <_svfprintf_r+0x1a4>
  4039be:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4039c0:	46c8      	mov	r8, r9
  4039c2:	f7ff ba72 	b.w	402eaa <_svfprintf_r+0x322>
  4039c6:	9c15      	ldr	r4, [sp, #84]	; 0x54
  4039c8:	4622      	mov	r2, r4
  4039ca:	4620      	mov	r0, r4
  4039cc:	9c14      	ldr	r4, [sp, #80]	; 0x50
  4039ce:	4623      	mov	r3, r4
  4039d0:	4621      	mov	r1, r4
  4039d2:	f002 ff3f 	bl	406854 <__aeabi_dcmpun>
  4039d6:	2800      	cmp	r0, #0
  4039d8:	f040 8286 	bne.w	403ee8 <_svfprintf_r+0x1360>
  4039dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4039de:	3301      	adds	r3, #1
  4039e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4039e2:	f023 0320 	bic.w	r3, r3, #32
  4039e6:	930e      	str	r3, [sp, #56]	; 0x38
  4039e8:	f000 81e2 	beq.w	403db0 <_svfprintf_r+0x1228>
  4039ec:	2b47      	cmp	r3, #71	; 0x47
  4039ee:	f000 811e 	beq.w	403c2e <_svfprintf_r+0x10a6>
  4039f2:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  4039f6:	9307      	str	r3, [sp, #28]
  4039f8:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4039fa:	1e1f      	subs	r7, r3, #0
  4039fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4039fe:	9308      	str	r3, [sp, #32]
  403a00:	bfbb      	ittet	lt
  403a02:	463b      	movlt	r3, r7
  403a04:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  403a08:	2300      	movge	r3, #0
  403a0a:	232d      	movlt	r3, #45	; 0x2d
  403a0c:	9310      	str	r3, [sp, #64]	; 0x40
  403a0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403a10:	2b66      	cmp	r3, #102	; 0x66
  403a12:	f000 81bb 	beq.w	403d8c <_svfprintf_r+0x1204>
  403a16:	2b46      	cmp	r3, #70	; 0x46
  403a18:	f000 80df 	beq.w	403bda <_svfprintf_r+0x1052>
  403a1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403a1e:	9a08      	ldr	r2, [sp, #32]
  403a20:	2b45      	cmp	r3, #69	; 0x45
  403a22:	bf0c      	ite	eq
  403a24:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
  403a26:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
  403a28:	a823      	add	r0, sp, #140	; 0x8c
  403a2a:	a920      	add	r1, sp, #128	; 0x80
  403a2c:	bf08      	it	eq
  403a2e:	1c5d      	addeq	r5, r3, #1
  403a30:	9004      	str	r0, [sp, #16]
  403a32:	9103      	str	r1, [sp, #12]
  403a34:	a81f      	add	r0, sp, #124	; 0x7c
  403a36:	2102      	movs	r1, #2
  403a38:	463b      	mov	r3, r7
  403a3a:	9002      	str	r0, [sp, #8]
  403a3c:	9501      	str	r5, [sp, #4]
  403a3e:	9100      	str	r1, [sp, #0]
  403a40:	980c      	ldr	r0, [sp, #48]	; 0x30
  403a42:	f000 fb75 	bl	404130 <_dtoa_r>
  403a46:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403a48:	2b67      	cmp	r3, #103	; 0x67
  403a4a:	4606      	mov	r6, r0
  403a4c:	f040 81e0 	bne.w	403e10 <_svfprintf_r+0x1288>
  403a50:	f01b 0f01 	tst.w	fp, #1
  403a54:	f000 8246 	beq.w	403ee4 <_svfprintf_r+0x135c>
  403a58:	1974      	adds	r4, r6, r5
  403a5a:	9a16      	ldr	r2, [sp, #88]	; 0x58
  403a5c:	9808      	ldr	r0, [sp, #32]
  403a5e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  403a60:	4639      	mov	r1, r7
  403a62:	f002 fec5 	bl	4067f0 <__aeabi_dcmpeq>
  403a66:	2800      	cmp	r0, #0
  403a68:	f040 8165 	bne.w	403d36 <_svfprintf_r+0x11ae>
  403a6c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  403a6e:	42a3      	cmp	r3, r4
  403a70:	d206      	bcs.n	403a80 <_svfprintf_r+0xef8>
  403a72:	2130      	movs	r1, #48	; 0x30
  403a74:	1c5a      	adds	r2, r3, #1
  403a76:	9223      	str	r2, [sp, #140]	; 0x8c
  403a78:	7019      	strb	r1, [r3, #0]
  403a7a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  403a7c:	429c      	cmp	r4, r3
  403a7e:	d8f9      	bhi.n	403a74 <_svfprintf_r+0xeec>
  403a80:	1b9b      	subs	r3, r3, r6
  403a82:	9313      	str	r3, [sp, #76]	; 0x4c
  403a84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403a86:	2b47      	cmp	r3, #71	; 0x47
  403a88:	f000 80e9 	beq.w	403c5e <_svfprintf_r+0x10d6>
  403a8c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403a8e:	2b65      	cmp	r3, #101	; 0x65
  403a90:	f340 81cd 	ble.w	403e2e <_svfprintf_r+0x12a6>
  403a94:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403a96:	2b66      	cmp	r3, #102	; 0x66
  403a98:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  403a9a:	9312      	str	r3, [sp, #72]	; 0x48
  403a9c:	f000 819e 	beq.w	403ddc <_svfprintf_r+0x1254>
  403aa0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  403aa2:	9a12      	ldr	r2, [sp, #72]	; 0x48
  403aa4:	4619      	mov	r1, r3
  403aa6:	4291      	cmp	r1, r2
  403aa8:	f300 818a 	bgt.w	403dc0 <_svfprintf_r+0x1238>
  403aac:	f01b 0f01 	tst.w	fp, #1
  403ab0:	f040 8213 	bne.w	403eda <_svfprintf_r+0x1352>
  403ab4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  403ab8:	9308      	str	r3, [sp, #32]
  403aba:	2367      	movs	r3, #103	; 0x67
  403abc:	920e      	str	r2, [sp, #56]	; 0x38
  403abe:	9311      	str	r3, [sp, #68]	; 0x44
  403ac0:	9b10      	ldr	r3, [sp, #64]	; 0x40
  403ac2:	2b00      	cmp	r3, #0
  403ac4:	f040 80c4 	bne.w	403c50 <_svfprintf_r+0x10c8>
  403ac8:	930a      	str	r3, [sp, #40]	; 0x28
  403aca:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  403ace:	f7ff b973 	b.w	402db8 <_svfprintf_r+0x230>
  403ad2:	4635      	mov	r5, r6
  403ad4:	460c      	mov	r4, r1
  403ad6:	4646      	mov	r6, r8
  403ad8:	4690      	mov	r8, r2
  403ada:	3301      	adds	r3, #1
  403adc:	443c      	add	r4, r7
  403ade:	2b07      	cmp	r3, #7
  403ae0:	9427      	str	r4, [sp, #156]	; 0x9c
  403ae2:	9326      	str	r3, [sp, #152]	; 0x98
  403ae4:	e888 00a0 	stmia.w	r8, {r5, r7}
  403ae8:	f73f aed1 	bgt.w	40388e <_svfprintf_r+0xd06>
  403aec:	f108 0808 	add.w	r8, r8, #8
  403af0:	e6d7      	b.n	4038a2 <_svfprintf_r+0xd1a>
  403af2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403af4:	6813      	ldr	r3, [r2, #0]
  403af6:	3204      	adds	r2, #4
  403af8:	920f      	str	r2, [sp, #60]	; 0x3c
  403afa:	9a09      	ldr	r2, [sp, #36]	; 0x24
  403afc:	601a      	str	r2, [r3, #0]
  403afe:	f7ff b86a 	b.w	402bd6 <_svfprintf_r+0x4e>
  403b02:	aa25      	add	r2, sp, #148	; 0x94
  403b04:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403b06:	980c      	ldr	r0, [sp, #48]	; 0x30
  403b08:	f002 f9a8 	bl	405e5c <__ssprint_r>
  403b0c:	2800      	cmp	r0, #0
  403b0e:	f47f a90d 	bne.w	402d2c <_svfprintf_r+0x1a4>
  403b12:	46c8      	mov	r8, r9
  403b14:	e48d      	b.n	403432 <_svfprintf_r+0x8aa>
  403b16:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403b18:	4a27      	ldr	r2, [pc, #156]	; (403bb8 <_svfprintf_r+0x1030>)
  403b1a:	f8c8 2000 	str.w	r2, [r8]
  403b1e:	3301      	adds	r3, #1
  403b20:	3401      	adds	r4, #1
  403b22:	2201      	movs	r2, #1
  403b24:	2b07      	cmp	r3, #7
  403b26:	9427      	str	r4, [sp, #156]	; 0x9c
  403b28:	9326      	str	r3, [sp, #152]	; 0x98
  403b2a:	f8c8 2004 	str.w	r2, [r8, #4]
  403b2e:	dc72      	bgt.n	403c16 <_svfprintf_r+0x108e>
  403b30:	f108 0808 	add.w	r8, r8, #8
  403b34:	b929      	cbnz	r1, 403b42 <_svfprintf_r+0xfba>
  403b36:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  403b38:	b91b      	cbnz	r3, 403b42 <_svfprintf_r+0xfba>
  403b3a:	9b07      	ldr	r3, [sp, #28]
  403b3c:	07d8      	lsls	r0, r3, #31
  403b3e:	f57f aa03 	bpl.w	402f48 <_svfprintf_r+0x3c0>
  403b42:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403b44:	9819      	ldr	r0, [sp, #100]	; 0x64
  403b46:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  403b48:	f8c8 2000 	str.w	r2, [r8]
  403b4c:	3301      	adds	r3, #1
  403b4e:	4602      	mov	r2, r0
  403b50:	4422      	add	r2, r4
  403b52:	2b07      	cmp	r3, #7
  403b54:	9227      	str	r2, [sp, #156]	; 0x9c
  403b56:	f8c8 0004 	str.w	r0, [r8, #4]
  403b5a:	9326      	str	r3, [sp, #152]	; 0x98
  403b5c:	f300 818d 	bgt.w	403e7a <_svfprintf_r+0x12f2>
  403b60:	f108 0808 	add.w	r8, r8, #8
  403b64:	2900      	cmp	r1, #0
  403b66:	f2c0 8165 	blt.w	403e34 <_svfprintf_r+0x12ac>
  403b6a:	9913      	ldr	r1, [sp, #76]	; 0x4c
  403b6c:	f8c8 6000 	str.w	r6, [r8]
  403b70:	3301      	adds	r3, #1
  403b72:	188c      	adds	r4, r1, r2
  403b74:	2b07      	cmp	r3, #7
  403b76:	9427      	str	r4, [sp, #156]	; 0x9c
  403b78:	9326      	str	r3, [sp, #152]	; 0x98
  403b7a:	f8c8 1004 	str.w	r1, [r8, #4]
  403b7e:	f77f a9e1 	ble.w	402f44 <_svfprintf_r+0x3bc>
  403b82:	e52c      	b.n	4035de <_svfprintf_r+0xa56>
  403b84:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403b86:	9909      	ldr	r1, [sp, #36]	; 0x24
  403b88:	6813      	ldr	r3, [r2, #0]
  403b8a:	17cd      	asrs	r5, r1, #31
  403b8c:	4608      	mov	r0, r1
  403b8e:	3204      	adds	r2, #4
  403b90:	4629      	mov	r1, r5
  403b92:	920f      	str	r2, [sp, #60]	; 0x3c
  403b94:	e9c3 0100 	strd	r0, r1, [r3]
  403b98:	f7ff b81d 	b.w	402bd6 <_svfprintf_r+0x4e>
  403b9c:	aa25      	add	r2, sp, #148	; 0x94
  403b9e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403ba0:	980c      	ldr	r0, [sp, #48]	; 0x30
  403ba2:	f002 f95b 	bl	405e5c <__ssprint_r>
  403ba6:	2800      	cmp	r0, #0
  403ba8:	f47f a8c0 	bne.w	402d2c <_svfprintf_r+0x1a4>
  403bac:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403bae:	46c8      	mov	r8, r9
  403bb0:	e458      	b.n	403464 <_svfprintf_r+0x8dc>
  403bb2:	bf00      	nop
  403bb4:	004073a8 	.word	0x004073a8
  403bb8:	00407394 	.word	0x00407394
  403bbc:	2140      	movs	r1, #64	; 0x40
  403bbe:	980c      	ldr	r0, [sp, #48]	; 0x30
  403bc0:	f001 fa0c 	bl	404fdc <_malloc_r>
  403bc4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  403bc6:	6010      	str	r0, [r2, #0]
  403bc8:	6110      	str	r0, [r2, #16]
  403bca:	2800      	cmp	r0, #0
  403bcc:	f000 81f2 	beq.w	403fb4 <_svfprintf_r+0x142c>
  403bd0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  403bd2:	2340      	movs	r3, #64	; 0x40
  403bd4:	6153      	str	r3, [r2, #20]
  403bd6:	f7fe bfee 	b.w	402bb6 <_svfprintf_r+0x2e>
  403bda:	a823      	add	r0, sp, #140	; 0x8c
  403bdc:	a920      	add	r1, sp, #128	; 0x80
  403bde:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  403be0:	9004      	str	r0, [sp, #16]
  403be2:	9103      	str	r1, [sp, #12]
  403be4:	a81f      	add	r0, sp, #124	; 0x7c
  403be6:	2103      	movs	r1, #3
  403be8:	9002      	str	r0, [sp, #8]
  403bea:	9a08      	ldr	r2, [sp, #32]
  403bec:	9401      	str	r4, [sp, #4]
  403bee:	463b      	mov	r3, r7
  403bf0:	9100      	str	r1, [sp, #0]
  403bf2:	980c      	ldr	r0, [sp, #48]	; 0x30
  403bf4:	f000 fa9c 	bl	404130 <_dtoa_r>
  403bf8:	4625      	mov	r5, r4
  403bfa:	4606      	mov	r6, r0
  403bfc:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403bfe:	2b46      	cmp	r3, #70	; 0x46
  403c00:	eb06 0405 	add.w	r4, r6, r5
  403c04:	f47f af29 	bne.w	403a5a <_svfprintf_r+0xed2>
  403c08:	7833      	ldrb	r3, [r6, #0]
  403c0a:	2b30      	cmp	r3, #48	; 0x30
  403c0c:	f000 8178 	beq.w	403f00 <_svfprintf_r+0x1378>
  403c10:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
  403c12:	442c      	add	r4, r5
  403c14:	e721      	b.n	403a5a <_svfprintf_r+0xed2>
  403c16:	aa25      	add	r2, sp, #148	; 0x94
  403c18:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403c1a:	980c      	ldr	r0, [sp, #48]	; 0x30
  403c1c:	f002 f91e 	bl	405e5c <__ssprint_r>
  403c20:	2800      	cmp	r0, #0
  403c22:	f47f a883 	bne.w	402d2c <_svfprintf_r+0x1a4>
  403c26:	991f      	ldr	r1, [sp, #124]	; 0x7c
  403c28:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403c2a:	46c8      	mov	r8, r9
  403c2c:	e782      	b.n	403b34 <_svfprintf_r+0xfac>
  403c2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403c30:	2b00      	cmp	r3, #0
  403c32:	bf08      	it	eq
  403c34:	2301      	moveq	r3, #1
  403c36:	930a      	str	r3, [sp, #40]	; 0x28
  403c38:	e6db      	b.n	4039f2 <_svfprintf_r+0xe6a>
  403c3a:	4630      	mov	r0, r6
  403c3c:	940a      	str	r4, [sp, #40]	; 0x28
  403c3e:	f002 f89f 	bl	405d80 <strlen>
  403c42:	950f      	str	r5, [sp, #60]	; 0x3c
  403c44:	900e      	str	r0, [sp, #56]	; 0x38
  403c46:	f8cd b01c 	str.w	fp, [sp, #28]
  403c4a:	4603      	mov	r3, r0
  403c4c:	f7ff b9f9 	b.w	403042 <_svfprintf_r+0x4ba>
  403c50:	272d      	movs	r7, #45	; 0x2d
  403c52:	2300      	movs	r3, #0
  403c54:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  403c58:	930a      	str	r3, [sp, #40]	; 0x28
  403c5a:	f7ff b8ae 	b.w	402dba <_svfprintf_r+0x232>
  403c5e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  403c60:	9312      	str	r3, [sp, #72]	; 0x48
  403c62:	461a      	mov	r2, r3
  403c64:	3303      	adds	r3, #3
  403c66:	db04      	blt.n	403c72 <_svfprintf_r+0x10ea>
  403c68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403c6a:	4619      	mov	r1, r3
  403c6c:	4291      	cmp	r1, r2
  403c6e:	f6bf af17 	bge.w	403aa0 <_svfprintf_r+0xf18>
  403c72:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403c74:	3b02      	subs	r3, #2
  403c76:	9311      	str	r3, [sp, #68]	; 0x44
  403c78:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
  403c7c:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
  403c80:	9b12      	ldr	r3, [sp, #72]	; 0x48
  403c82:	3b01      	subs	r3, #1
  403c84:	2b00      	cmp	r3, #0
  403c86:	931f      	str	r3, [sp, #124]	; 0x7c
  403c88:	bfbd      	ittte	lt
  403c8a:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
  403c8c:	f1c3 0301 	rsblt	r3, r3, #1
  403c90:	222d      	movlt	r2, #45	; 0x2d
  403c92:	222b      	movge	r2, #43	; 0x2b
  403c94:	2b09      	cmp	r3, #9
  403c96:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
  403c9a:	f340 8116 	ble.w	403eca <_svfprintf_r+0x1342>
  403c9e:	f10d 0493 	add.w	r4, sp, #147	; 0x93
  403ca2:	4620      	mov	r0, r4
  403ca4:	4dab      	ldr	r5, [pc, #684]	; (403f54 <_svfprintf_r+0x13cc>)
  403ca6:	e000      	b.n	403caa <_svfprintf_r+0x1122>
  403ca8:	4610      	mov	r0, r2
  403caa:	fb85 1203 	smull	r1, r2, r5, r3
  403cae:	17d9      	asrs	r1, r3, #31
  403cb0:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  403cb4:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  403cb8:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  403cbc:	3230      	adds	r2, #48	; 0x30
  403cbe:	2909      	cmp	r1, #9
  403cc0:	f800 2c01 	strb.w	r2, [r0, #-1]
  403cc4:	460b      	mov	r3, r1
  403cc6:	f100 32ff 	add.w	r2, r0, #4294967295
  403cca:	dced      	bgt.n	403ca8 <_svfprintf_r+0x1120>
  403ccc:	3330      	adds	r3, #48	; 0x30
  403cce:	3802      	subs	r0, #2
  403cd0:	b2d9      	uxtb	r1, r3
  403cd2:	4284      	cmp	r4, r0
  403cd4:	f802 1c01 	strb.w	r1, [r2, #-1]
  403cd8:	f240 8165 	bls.w	403fa6 <_svfprintf_r+0x141e>
  403cdc:	f10d 0086 	add.w	r0, sp, #134	; 0x86
  403ce0:	4613      	mov	r3, r2
  403ce2:	e001      	b.n	403ce8 <_svfprintf_r+0x1160>
  403ce4:	f813 1b01 	ldrb.w	r1, [r3], #1
  403ce8:	f800 1b01 	strb.w	r1, [r0], #1
  403cec:	42a3      	cmp	r3, r4
  403cee:	d1f9      	bne.n	403ce4 <_svfprintf_r+0x115c>
  403cf0:	3301      	adds	r3, #1
  403cf2:	1a9b      	subs	r3, r3, r2
  403cf4:	f10d 0286 	add.w	r2, sp, #134	; 0x86
  403cf8:	4413      	add	r3, r2
  403cfa:	aa21      	add	r2, sp, #132	; 0x84
  403cfc:	1a9b      	subs	r3, r3, r2
  403cfe:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  403d00:	931b      	str	r3, [sp, #108]	; 0x6c
  403d02:	2a01      	cmp	r2, #1
  403d04:	4413      	add	r3, r2
  403d06:	930e      	str	r3, [sp, #56]	; 0x38
  403d08:	f340 8119 	ble.w	403f3e <_svfprintf_r+0x13b6>
  403d0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403d0e:	9a19      	ldr	r2, [sp, #100]	; 0x64
  403d10:	4413      	add	r3, r2
  403d12:	930e      	str	r3, [sp, #56]	; 0x38
  403d14:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  403d18:	9308      	str	r3, [sp, #32]
  403d1a:	2300      	movs	r3, #0
  403d1c:	9312      	str	r3, [sp, #72]	; 0x48
  403d1e:	e6cf      	b.n	403ac0 <_svfprintf_r+0xf38>
  403d20:	aa25      	add	r2, sp, #148	; 0x94
  403d22:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403d24:	980c      	ldr	r0, [sp, #48]	; 0x30
  403d26:	f002 f899 	bl	405e5c <__ssprint_r>
  403d2a:	2800      	cmp	r0, #0
  403d2c:	f47e affe 	bne.w	402d2c <_svfprintf_r+0x1a4>
  403d30:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403d32:	46c8      	mov	r8, r9
  403d34:	e4d7      	b.n	4036e6 <_svfprintf_r+0xb5e>
  403d36:	4623      	mov	r3, r4
  403d38:	e6a2      	b.n	403a80 <_svfprintf_r+0xef8>
  403d3a:	aa25      	add	r2, sp, #148	; 0x94
  403d3c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403d3e:	980c      	ldr	r0, [sp, #48]	; 0x30
  403d40:	f002 f88c 	bl	405e5c <__ssprint_r>
  403d44:	2800      	cmp	r0, #0
  403d46:	f47e aff1 	bne.w	402d2c <_svfprintf_r+0x1a4>
  403d4a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  403d4c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403d4e:	46c8      	mov	r8, r9
  403d50:	e5ae      	b.n	4038b0 <_svfprintf_r+0xd28>
  403d52:	aa25      	add	r2, sp, #148	; 0x94
  403d54:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403d56:	980c      	ldr	r0, [sp, #48]	; 0x30
  403d58:	f002 f880 	bl	405e5c <__ssprint_r>
  403d5c:	2800      	cmp	r0, #0
  403d5e:	f47e afe5 	bne.w	402d2c <_svfprintf_r+0x1a4>
  403d62:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  403d64:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  403d66:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403d68:	1a9a      	subs	r2, r3, r2
  403d6a:	46c8      	mov	r8, r9
  403d6c:	e5b8      	b.n	4038e0 <_svfprintf_r+0xd58>
  403d6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403d70:	9612      	str	r6, [sp, #72]	; 0x48
  403d72:	2b06      	cmp	r3, #6
  403d74:	bf28      	it	cs
  403d76:	2306      	movcs	r3, #6
  403d78:	960a      	str	r6, [sp, #40]	; 0x28
  403d7a:	4637      	mov	r7, r6
  403d7c:	9308      	str	r3, [sp, #32]
  403d7e:	950f      	str	r5, [sp, #60]	; 0x3c
  403d80:	f8cd b01c 	str.w	fp, [sp, #28]
  403d84:	930e      	str	r3, [sp, #56]	; 0x38
  403d86:	4e74      	ldr	r6, [pc, #464]	; (403f58 <_svfprintf_r+0x13d0>)
  403d88:	f7ff b816 	b.w	402db8 <_svfprintf_r+0x230>
  403d8c:	a823      	add	r0, sp, #140	; 0x8c
  403d8e:	a920      	add	r1, sp, #128	; 0x80
  403d90:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  403d92:	9004      	str	r0, [sp, #16]
  403d94:	9103      	str	r1, [sp, #12]
  403d96:	a81f      	add	r0, sp, #124	; 0x7c
  403d98:	2103      	movs	r1, #3
  403d9a:	9002      	str	r0, [sp, #8]
  403d9c:	9a08      	ldr	r2, [sp, #32]
  403d9e:	9501      	str	r5, [sp, #4]
  403da0:	463b      	mov	r3, r7
  403da2:	9100      	str	r1, [sp, #0]
  403da4:	980c      	ldr	r0, [sp, #48]	; 0x30
  403da6:	f000 f9c3 	bl	404130 <_dtoa_r>
  403daa:	4606      	mov	r6, r0
  403dac:	1944      	adds	r4, r0, r5
  403dae:	e72b      	b.n	403c08 <_svfprintf_r+0x1080>
  403db0:	2306      	movs	r3, #6
  403db2:	930a      	str	r3, [sp, #40]	; 0x28
  403db4:	e61d      	b.n	4039f2 <_svfprintf_r+0xe6a>
  403db6:	272d      	movs	r7, #45	; 0x2d
  403db8:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  403dbc:	f7ff bacd 	b.w	40335a <_svfprintf_r+0x7d2>
  403dc0:	9a19      	ldr	r2, [sp, #100]	; 0x64
  403dc2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  403dc4:	4413      	add	r3, r2
  403dc6:	9a12      	ldr	r2, [sp, #72]	; 0x48
  403dc8:	930e      	str	r3, [sp, #56]	; 0x38
  403dca:	2a00      	cmp	r2, #0
  403dcc:	f340 80b0 	ble.w	403f30 <_svfprintf_r+0x13a8>
  403dd0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  403dd4:	9308      	str	r3, [sp, #32]
  403dd6:	2367      	movs	r3, #103	; 0x67
  403dd8:	9311      	str	r3, [sp, #68]	; 0x44
  403dda:	e671      	b.n	403ac0 <_svfprintf_r+0xf38>
  403ddc:	2b00      	cmp	r3, #0
  403dde:	f340 80c3 	ble.w	403f68 <_svfprintf_r+0x13e0>
  403de2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  403de4:	2a00      	cmp	r2, #0
  403de6:	f040 8099 	bne.w	403f1c <_svfprintf_r+0x1394>
  403dea:	f01b 0f01 	tst.w	fp, #1
  403dee:	f040 8095 	bne.w	403f1c <_svfprintf_r+0x1394>
  403df2:	9308      	str	r3, [sp, #32]
  403df4:	930e      	str	r3, [sp, #56]	; 0x38
  403df6:	e663      	b.n	403ac0 <_svfprintf_r+0xf38>
  403df8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403dfa:	9308      	str	r3, [sp, #32]
  403dfc:	930e      	str	r3, [sp, #56]	; 0x38
  403dfe:	900a      	str	r0, [sp, #40]	; 0x28
  403e00:	950f      	str	r5, [sp, #60]	; 0x3c
  403e02:	f8cd b01c 	str.w	fp, [sp, #28]
  403e06:	9012      	str	r0, [sp, #72]	; 0x48
  403e08:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  403e0c:	f7fe bfd4 	b.w	402db8 <_svfprintf_r+0x230>
  403e10:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403e12:	2b47      	cmp	r3, #71	; 0x47
  403e14:	f47f ae20 	bne.w	403a58 <_svfprintf_r+0xed0>
  403e18:	f01b 0f01 	tst.w	fp, #1
  403e1c:	f47f aeee 	bne.w	403bfc <_svfprintf_r+0x1074>
  403e20:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  403e22:	1b9b      	subs	r3, r3, r6
  403e24:	9313      	str	r3, [sp, #76]	; 0x4c
  403e26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403e28:	2b47      	cmp	r3, #71	; 0x47
  403e2a:	f43f af18 	beq.w	403c5e <_svfprintf_r+0x10d6>
  403e2e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  403e30:	9312      	str	r3, [sp, #72]	; 0x48
  403e32:	e721      	b.n	403c78 <_svfprintf_r+0x10f0>
  403e34:	424f      	negs	r7, r1
  403e36:	3110      	adds	r1, #16
  403e38:	4d48      	ldr	r5, [pc, #288]	; (403f5c <_svfprintf_r+0x13d4>)
  403e3a:	da2f      	bge.n	403e9c <_svfprintf_r+0x1314>
  403e3c:	2410      	movs	r4, #16
  403e3e:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  403e42:	e004      	b.n	403e4e <_svfprintf_r+0x12c6>
  403e44:	f108 0808 	add.w	r8, r8, #8
  403e48:	3f10      	subs	r7, #16
  403e4a:	2f10      	cmp	r7, #16
  403e4c:	dd26      	ble.n	403e9c <_svfprintf_r+0x1314>
  403e4e:	3301      	adds	r3, #1
  403e50:	3210      	adds	r2, #16
  403e52:	2b07      	cmp	r3, #7
  403e54:	9227      	str	r2, [sp, #156]	; 0x9c
  403e56:	9326      	str	r3, [sp, #152]	; 0x98
  403e58:	f8c8 5000 	str.w	r5, [r8]
  403e5c:	f8c8 4004 	str.w	r4, [r8, #4]
  403e60:	ddf0      	ble.n	403e44 <_svfprintf_r+0x12bc>
  403e62:	aa25      	add	r2, sp, #148	; 0x94
  403e64:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403e66:	4658      	mov	r0, fp
  403e68:	f001 fff8 	bl	405e5c <__ssprint_r>
  403e6c:	2800      	cmp	r0, #0
  403e6e:	f47e af5d 	bne.w	402d2c <_svfprintf_r+0x1a4>
  403e72:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  403e74:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403e76:	46c8      	mov	r8, r9
  403e78:	e7e6      	b.n	403e48 <_svfprintf_r+0x12c0>
  403e7a:	aa25      	add	r2, sp, #148	; 0x94
  403e7c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403e7e:	980c      	ldr	r0, [sp, #48]	; 0x30
  403e80:	f001 ffec 	bl	405e5c <__ssprint_r>
  403e84:	2800      	cmp	r0, #0
  403e86:	f47e af51 	bne.w	402d2c <_svfprintf_r+0x1a4>
  403e8a:	991f      	ldr	r1, [sp, #124]	; 0x7c
  403e8c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  403e8e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403e90:	46c8      	mov	r8, r9
  403e92:	e667      	b.n	403b64 <_svfprintf_r+0xfdc>
  403e94:	2000      	movs	r0, #0
  403e96:	900a      	str	r0, [sp, #40]	; 0x28
  403e98:	f7fe bed0 	b.w	402c3c <_svfprintf_r+0xb4>
  403e9c:	3301      	adds	r3, #1
  403e9e:	443a      	add	r2, r7
  403ea0:	2b07      	cmp	r3, #7
  403ea2:	e888 00a0 	stmia.w	r8, {r5, r7}
  403ea6:	9227      	str	r2, [sp, #156]	; 0x9c
  403ea8:	9326      	str	r3, [sp, #152]	; 0x98
  403eaa:	f108 0808 	add.w	r8, r8, #8
  403eae:	f77f ae5c 	ble.w	403b6a <_svfprintf_r+0xfe2>
  403eb2:	aa25      	add	r2, sp, #148	; 0x94
  403eb4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403eb6:	980c      	ldr	r0, [sp, #48]	; 0x30
  403eb8:	f001 ffd0 	bl	405e5c <__ssprint_r>
  403ebc:	2800      	cmp	r0, #0
  403ebe:	f47e af35 	bne.w	402d2c <_svfprintf_r+0x1a4>
  403ec2:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  403ec4:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403ec6:	46c8      	mov	r8, r9
  403ec8:	e64f      	b.n	403b6a <_svfprintf_r+0xfe2>
  403eca:	3330      	adds	r3, #48	; 0x30
  403ecc:	2230      	movs	r2, #48	; 0x30
  403ece:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
  403ed2:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
  403ed6:	ab22      	add	r3, sp, #136	; 0x88
  403ed8:	e70f      	b.n	403cfa <_svfprintf_r+0x1172>
  403eda:	9b12      	ldr	r3, [sp, #72]	; 0x48
  403edc:	9a19      	ldr	r2, [sp, #100]	; 0x64
  403ede:	4413      	add	r3, r2
  403ee0:	930e      	str	r3, [sp, #56]	; 0x38
  403ee2:	e775      	b.n	403dd0 <_svfprintf_r+0x1248>
  403ee4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  403ee6:	e5cb      	b.n	403a80 <_svfprintf_r+0xef8>
  403ee8:	9b14      	ldr	r3, [sp, #80]	; 0x50
  403eea:	4e1d      	ldr	r6, [pc, #116]	; (403f60 <_svfprintf_r+0x13d8>)
  403eec:	2b00      	cmp	r3, #0
  403eee:	bfb6      	itet	lt
  403ef0:	272d      	movlt	r7, #45	; 0x2d
  403ef2:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
  403ef6:	f88d 7077 	strblt.w	r7, [sp, #119]	; 0x77
  403efa:	4b1a      	ldr	r3, [pc, #104]	; (403f64 <_svfprintf_r+0x13dc>)
  403efc:	f7ff ba2f 	b.w	40335e <_svfprintf_r+0x7d6>
  403f00:	9a16      	ldr	r2, [sp, #88]	; 0x58
  403f02:	9808      	ldr	r0, [sp, #32]
  403f04:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  403f06:	4639      	mov	r1, r7
  403f08:	f002 fc72 	bl	4067f0 <__aeabi_dcmpeq>
  403f0c:	2800      	cmp	r0, #0
  403f0e:	f47f ae7f 	bne.w	403c10 <_svfprintf_r+0x1088>
  403f12:	f1c5 0501 	rsb	r5, r5, #1
  403f16:	951f      	str	r5, [sp, #124]	; 0x7c
  403f18:	442c      	add	r4, r5
  403f1a:	e59e      	b.n	403a5a <_svfprintf_r+0xed2>
  403f1c:	9b12      	ldr	r3, [sp, #72]	; 0x48
  403f1e:	9a19      	ldr	r2, [sp, #100]	; 0x64
  403f20:	4413      	add	r3, r2
  403f22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  403f24:	441a      	add	r2, r3
  403f26:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  403f2a:	920e      	str	r2, [sp, #56]	; 0x38
  403f2c:	9308      	str	r3, [sp, #32]
  403f2e:	e5c7      	b.n	403ac0 <_svfprintf_r+0xf38>
  403f30:	9b12      	ldr	r3, [sp, #72]	; 0x48
  403f32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  403f34:	f1c3 0301 	rsb	r3, r3, #1
  403f38:	441a      	add	r2, r3
  403f3a:	4613      	mov	r3, r2
  403f3c:	e7d0      	b.n	403ee0 <_svfprintf_r+0x1358>
  403f3e:	f01b 0301 	ands.w	r3, fp, #1
  403f42:	9312      	str	r3, [sp, #72]	; 0x48
  403f44:	f47f aee2 	bne.w	403d0c <_svfprintf_r+0x1184>
  403f48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403f4a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  403f4e:	9308      	str	r3, [sp, #32]
  403f50:	e5b6      	b.n	403ac0 <_svfprintf_r+0xf38>
  403f52:	bf00      	nop
  403f54:	66666667 	.word	0x66666667
  403f58:	0040738c 	.word	0x0040738c
  403f5c:	004073a8 	.word	0x004073a8
  403f60:	00407360 	.word	0x00407360
  403f64:	0040735c 	.word	0x0040735c
  403f68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403f6a:	b913      	cbnz	r3, 403f72 <_svfprintf_r+0x13ea>
  403f6c:	f01b 0f01 	tst.w	fp, #1
  403f70:	d002      	beq.n	403f78 <_svfprintf_r+0x13f0>
  403f72:	9b19      	ldr	r3, [sp, #100]	; 0x64
  403f74:	3301      	adds	r3, #1
  403f76:	e7d4      	b.n	403f22 <_svfprintf_r+0x139a>
  403f78:	2301      	movs	r3, #1
  403f7a:	e73a      	b.n	403df2 <_svfprintf_r+0x126a>
  403f7c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  403f7e:	f89a 3001 	ldrb.w	r3, [sl, #1]
  403f82:	6828      	ldr	r0, [r5, #0]
  403f84:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
  403f88:	900a      	str	r0, [sp, #40]	; 0x28
  403f8a:	4628      	mov	r0, r5
  403f8c:	3004      	adds	r0, #4
  403f8e:	46a2      	mov	sl, r4
  403f90:	900f      	str	r0, [sp, #60]	; 0x3c
  403f92:	f7fe be51 	b.w	402c38 <_svfprintf_r+0xb0>
  403f96:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  403f9a:	f7ff b867 	b.w	40306c <_svfprintf_r+0x4e4>
  403f9e:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  403fa2:	f7ff ba15 	b.w	4033d0 <_svfprintf_r+0x848>
  403fa6:	f10d 0386 	add.w	r3, sp, #134	; 0x86
  403faa:	e6a6      	b.n	403cfa <_svfprintf_r+0x1172>
  403fac:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  403fb0:	f7ff b8eb 	b.w	40318a <_svfprintf_r+0x602>
  403fb4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  403fb6:	230c      	movs	r3, #12
  403fb8:	6013      	str	r3, [r2, #0]
  403fba:	f04f 33ff 	mov.w	r3, #4294967295
  403fbe:	9309      	str	r3, [sp, #36]	; 0x24
  403fc0:	f7fe bebd 	b.w	402d3e <_svfprintf_r+0x1b6>
  403fc4:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  403fc8:	f7ff b99a 	b.w	403300 <_svfprintf_r+0x778>
  403fcc:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  403fd0:	f7ff b976 	b.w	4032c0 <_svfprintf_r+0x738>
  403fd4:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  403fd8:	f7ff b959 	b.w	40328e <_svfprintf_r+0x706>
  403fdc:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  403fe0:	f7ff b912 	b.w	403208 <_svfprintf_r+0x680>

00403fe4 <register_fini>:
  403fe4:	4b02      	ldr	r3, [pc, #8]	; (403ff0 <register_fini+0xc>)
  403fe6:	b113      	cbz	r3, 403fee <register_fini+0xa>
  403fe8:	4802      	ldr	r0, [pc, #8]	; (403ff4 <register_fini+0x10>)
  403fea:	f000 b805 	b.w	403ff8 <atexit>
  403fee:	4770      	bx	lr
  403ff0:	00000000 	.word	0x00000000
  403ff4:	00404f85 	.word	0x00404f85

00403ff8 <atexit>:
  403ff8:	2300      	movs	r3, #0
  403ffa:	4601      	mov	r1, r0
  403ffc:	461a      	mov	r2, r3
  403ffe:	4618      	mov	r0, r3
  404000:	f001 bfaa 	b.w	405f58 <__register_exitproc>

00404004 <quorem>:
  404004:	6902      	ldr	r2, [r0, #16]
  404006:	690b      	ldr	r3, [r1, #16]
  404008:	4293      	cmp	r3, r2
  40400a:	f300 808d 	bgt.w	404128 <quorem+0x124>
  40400e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404012:	f103 38ff 	add.w	r8, r3, #4294967295
  404016:	f101 0714 	add.w	r7, r1, #20
  40401a:	f100 0b14 	add.w	fp, r0, #20
  40401e:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  404022:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  404026:	ea4f 0488 	mov.w	r4, r8, lsl #2
  40402a:	b083      	sub	sp, #12
  40402c:	3201      	adds	r2, #1
  40402e:	fbb3 f9f2 	udiv	r9, r3, r2
  404032:	eb0b 0304 	add.w	r3, fp, r4
  404036:	9400      	str	r4, [sp, #0]
  404038:	eb07 0a04 	add.w	sl, r7, r4
  40403c:	9301      	str	r3, [sp, #4]
  40403e:	f1b9 0f00 	cmp.w	r9, #0
  404042:	d039      	beq.n	4040b8 <quorem+0xb4>
  404044:	2500      	movs	r5, #0
  404046:	462e      	mov	r6, r5
  404048:	46bc      	mov	ip, r7
  40404a:	46de      	mov	lr, fp
  40404c:	f85c 4b04 	ldr.w	r4, [ip], #4
  404050:	f8de 3000 	ldr.w	r3, [lr]
  404054:	b2a2      	uxth	r2, r4
  404056:	fb09 5502 	mla	r5, r9, r2, r5
  40405a:	0c22      	lsrs	r2, r4, #16
  40405c:	0c2c      	lsrs	r4, r5, #16
  40405e:	fb09 4202 	mla	r2, r9, r2, r4
  404062:	b2ad      	uxth	r5, r5
  404064:	1b75      	subs	r5, r6, r5
  404066:	b296      	uxth	r6, r2
  404068:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  40406c:	fa15 f383 	uxtah	r3, r5, r3
  404070:	eb06 4623 	add.w	r6, r6, r3, asr #16
  404074:	b29b      	uxth	r3, r3
  404076:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  40407a:	45e2      	cmp	sl, ip
  40407c:	ea4f 4512 	mov.w	r5, r2, lsr #16
  404080:	f84e 3b04 	str.w	r3, [lr], #4
  404084:	ea4f 4626 	mov.w	r6, r6, asr #16
  404088:	d2e0      	bcs.n	40404c <quorem+0x48>
  40408a:	9b00      	ldr	r3, [sp, #0]
  40408c:	f85b 3003 	ldr.w	r3, [fp, r3]
  404090:	b993      	cbnz	r3, 4040b8 <quorem+0xb4>
  404092:	9c01      	ldr	r4, [sp, #4]
  404094:	1f23      	subs	r3, r4, #4
  404096:	459b      	cmp	fp, r3
  404098:	d20c      	bcs.n	4040b4 <quorem+0xb0>
  40409a:	f854 3c04 	ldr.w	r3, [r4, #-4]
  40409e:	b94b      	cbnz	r3, 4040b4 <quorem+0xb0>
  4040a0:	f1a4 0308 	sub.w	r3, r4, #8
  4040a4:	e002      	b.n	4040ac <quorem+0xa8>
  4040a6:	681a      	ldr	r2, [r3, #0]
  4040a8:	3b04      	subs	r3, #4
  4040aa:	b91a      	cbnz	r2, 4040b4 <quorem+0xb0>
  4040ac:	459b      	cmp	fp, r3
  4040ae:	f108 38ff 	add.w	r8, r8, #4294967295
  4040b2:	d3f8      	bcc.n	4040a6 <quorem+0xa2>
  4040b4:	f8c0 8010 	str.w	r8, [r0, #16]
  4040b8:	4604      	mov	r4, r0
  4040ba:	f001 fd35 	bl	405b28 <__mcmp>
  4040be:	2800      	cmp	r0, #0
  4040c0:	db2e      	blt.n	404120 <quorem+0x11c>
  4040c2:	f109 0901 	add.w	r9, r9, #1
  4040c6:	465d      	mov	r5, fp
  4040c8:	2300      	movs	r3, #0
  4040ca:	f857 1b04 	ldr.w	r1, [r7], #4
  4040ce:	6828      	ldr	r0, [r5, #0]
  4040d0:	b28a      	uxth	r2, r1
  4040d2:	1a9a      	subs	r2, r3, r2
  4040d4:	0c0b      	lsrs	r3, r1, #16
  4040d6:	fa12 f280 	uxtah	r2, r2, r0
  4040da:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  4040de:	eb03 4322 	add.w	r3, r3, r2, asr #16
  4040e2:	b292      	uxth	r2, r2
  4040e4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  4040e8:	45ba      	cmp	sl, r7
  4040ea:	f845 2b04 	str.w	r2, [r5], #4
  4040ee:	ea4f 4323 	mov.w	r3, r3, asr #16
  4040f2:	d2ea      	bcs.n	4040ca <quorem+0xc6>
  4040f4:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  4040f8:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  4040fc:	b982      	cbnz	r2, 404120 <quorem+0x11c>
  4040fe:	1f1a      	subs	r2, r3, #4
  404100:	4593      	cmp	fp, r2
  404102:	d20b      	bcs.n	40411c <quorem+0x118>
  404104:	f853 2c04 	ldr.w	r2, [r3, #-4]
  404108:	b942      	cbnz	r2, 40411c <quorem+0x118>
  40410a:	3b08      	subs	r3, #8
  40410c:	e002      	b.n	404114 <quorem+0x110>
  40410e:	681a      	ldr	r2, [r3, #0]
  404110:	3b04      	subs	r3, #4
  404112:	b91a      	cbnz	r2, 40411c <quorem+0x118>
  404114:	459b      	cmp	fp, r3
  404116:	f108 38ff 	add.w	r8, r8, #4294967295
  40411a:	d3f8      	bcc.n	40410e <quorem+0x10a>
  40411c:	f8c4 8010 	str.w	r8, [r4, #16]
  404120:	4648      	mov	r0, r9
  404122:	b003      	add	sp, #12
  404124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404128:	2000      	movs	r0, #0
  40412a:	4770      	bx	lr
  40412c:	0000      	movs	r0, r0
	...

00404130 <_dtoa_r>:
  404130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404134:	6c01      	ldr	r1, [r0, #64]	; 0x40
  404136:	b09b      	sub	sp, #108	; 0x6c
  404138:	4604      	mov	r4, r0
  40413a:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  40413c:	4692      	mov	sl, r2
  40413e:	469b      	mov	fp, r3
  404140:	b141      	cbz	r1, 404154 <_dtoa_r+0x24>
  404142:	6c42      	ldr	r2, [r0, #68]	; 0x44
  404144:	604a      	str	r2, [r1, #4]
  404146:	2301      	movs	r3, #1
  404148:	4093      	lsls	r3, r2
  40414a:	608b      	str	r3, [r1, #8]
  40414c:	f001 fb14 	bl	405778 <_Bfree>
  404150:	2300      	movs	r3, #0
  404152:	6423      	str	r3, [r4, #64]	; 0x40
  404154:	f1bb 0f00 	cmp.w	fp, #0
  404158:	465d      	mov	r5, fp
  40415a:	db35      	blt.n	4041c8 <_dtoa_r+0x98>
  40415c:	2300      	movs	r3, #0
  40415e:	6033      	str	r3, [r6, #0]
  404160:	4b9d      	ldr	r3, [pc, #628]	; (4043d8 <_dtoa_r+0x2a8>)
  404162:	43ab      	bics	r3, r5
  404164:	d015      	beq.n	404192 <_dtoa_r+0x62>
  404166:	4650      	mov	r0, sl
  404168:	4659      	mov	r1, fp
  40416a:	2200      	movs	r2, #0
  40416c:	2300      	movs	r3, #0
  40416e:	f002 fb3f 	bl	4067f0 <__aeabi_dcmpeq>
  404172:	4680      	mov	r8, r0
  404174:	2800      	cmp	r0, #0
  404176:	d02d      	beq.n	4041d4 <_dtoa_r+0xa4>
  404178:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40417a:	2301      	movs	r3, #1
  40417c:	6013      	str	r3, [r2, #0]
  40417e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  404180:	2b00      	cmp	r3, #0
  404182:	f000 80bd 	beq.w	404300 <_dtoa_r+0x1d0>
  404186:	4895      	ldr	r0, [pc, #596]	; (4043dc <_dtoa_r+0x2ac>)
  404188:	6018      	str	r0, [r3, #0]
  40418a:	3801      	subs	r0, #1
  40418c:	b01b      	add	sp, #108	; 0x6c
  40418e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404192:	9a26      	ldr	r2, [sp, #152]	; 0x98
  404194:	f242 730f 	movw	r3, #9999	; 0x270f
  404198:	6013      	str	r3, [r2, #0]
  40419a:	f1ba 0f00 	cmp.w	sl, #0
  40419e:	d10d      	bne.n	4041bc <_dtoa_r+0x8c>
  4041a0:	f3c5 0513 	ubfx	r5, r5, #0, #20
  4041a4:	b955      	cbnz	r5, 4041bc <_dtoa_r+0x8c>
  4041a6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  4041a8:	488d      	ldr	r0, [pc, #564]	; (4043e0 <_dtoa_r+0x2b0>)
  4041aa:	2b00      	cmp	r3, #0
  4041ac:	d0ee      	beq.n	40418c <_dtoa_r+0x5c>
  4041ae:	f100 0308 	add.w	r3, r0, #8
  4041b2:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  4041b4:	6013      	str	r3, [r2, #0]
  4041b6:	b01b      	add	sp, #108	; 0x6c
  4041b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4041bc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  4041be:	4889      	ldr	r0, [pc, #548]	; (4043e4 <_dtoa_r+0x2b4>)
  4041c0:	2b00      	cmp	r3, #0
  4041c2:	d0e3      	beq.n	40418c <_dtoa_r+0x5c>
  4041c4:	1cc3      	adds	r3, r0, #3
  4041c6:	e7f4      	b.n	4041b2 <_dtoa_r+0x82>
  4041c8:	2301      	movs	r3, #1
  4041ca:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  4041ce:	6033      	str	r3, [r6, #0]
  4041d0:	46ab      	mov	fp, r5
  4041d2:	e7c5      	b.n	404160 <_dtoa_r+0x30>
  4041d4:	aa18      	add	r2, sp, #96	; 0x60
  4041d6:	ab19      	add	r3, sp, #100	; 0x64
  4041d8:	9201      	str	r2, [sp, #4]
  4041da:	9300      	str	r3, [sp, #0]
  4041dc:	4652      	mov	r2, sl
  4041de:	465b      	mov	r3, fp
  4041e0:	4620      	mov	r0, r4
  4041e2:	f001 fd41 	bl	405c68 <__d2b>
  4041e6:	0d2b      	lsrs	r3, r5, #20
  4041e8:	4681      	mov	r9, r0
  4041ea:	d071      	beq.n	4042d0 <_dtoa_r+0x1a0>
  4041ec:	f3cb 0213 	ubfx	r2, fp, #0, #20
  4041f0:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  4041f4:	9f18      	ldr	r7, [sp, #96]	; 0x60
  4041f6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  4041fa:	4650      	mov	r0, sl
  4041fc:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  404200:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  404204:	2200      	movs	r2, #0
  404206:	4b78      	ldr	r3, [pc, #480]	; (4043e8 <_dtoa_r+0x2b8>)
  404208:	f7fd fe3e 	bl	401e88 <__aeabi_dsub>
  40420c:	a36c      	add	r3, pc, #432	; (adr r3, 4043c0 <_dtoa_r+0x290>)
  40420e:	e9d3 2300 	ldrd	r2, r3, [r3]
  404212:	f7fe f9eb 	bl	4025ec <__aeabi_dmul>
  404216:	a36c      	add	r3, pc, #432	; (adr r3, 4043c8 <_dtoa_r+0x298>)
  404218:	e9d3 2300 	ldrd	r2, r3, [r3]
  40421c:	f7fd fe36 	bl	401e8c <__adddf3>
  404220:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404224:	4630      	mov	r0, r6
  404226:	f7fd ff7d 	bl	402124 <__aeabi_i2d>
  40422a:	a369      	add	r3, pc, #420	; (adr r3, 4043d0 <_dtoa_r+0x2a0>)
  40422c:	e9d3 2300 	ldrd	r2, r3, [r3]
  404230:	f7fe f9dc 	bl	4025ec <__aeabi_dmul>
  404234:	4602      	mov	r2, r0
  404236:	460b      	mov	r3, r1
  404238:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40423c:	f7fd fe26 	bl	401e8c <__adddf3>
  404240:	e9cd 0104 	strd	r0, r1, [sp, #16]
  404244:	f002 fb1c 	bl	406880 <__aeabi_d2iz>
  404248:	2200      	movs	r2, #0
  40424a:	9002      	str	r0, [sp, #8]
  40424c:	2300      	movs	r3, #0
  40424e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  404252:	f002 fad7 	bl	406804 <__aeabi_dcmplt>
  404256:	2800      	cmp	r0, #0
  404258:	f040 8173 	bne.w	404542 <_dtoa_r+0x412>
  40425c:	9d02      	ldr	r5, [sp, #8]
  40425e:	2d16      	cmp	r5, #22
  404260:	f200 815d 	bhi.w	40451e <_dtoa_r+0x3ee>
  404264:	4b61      	ldr	r3, [pc, #388]	; (4043ec <_dtoa_r+0x2bc>)
  404266:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  40426a:	e9d3 0100 	ldrd	r0, r1, [r3]
  40426e:	4652      	mov	r2, sl
  404270:	465b      	mov	r3, fp
  404272:	f002 fae5 	bl	406840 <__aeabi_dcmpgt>
  404276:	2800      	cmp	r0, #0
  404278:	f000 81c5 	beq.w	404606 <_dtoa_r+0x4d6>
  40427c:	1e6b      	subs	r3, r5, #1
  40427e:	9302      	str	r3, [sp, #8]
  404280:	2300      	movs	r3, #0
  404282:	930e      	str	r3, [sp, #56]	; 0x38
  404284:	1bbf      	subs	r7, r7, r6
  404286:	1e7b      	subs	r3, r7, #1
  404288:	9306      	str	r3, [sp, #24]
  40428a:	f100 8154 	bmi.w	404536 <_dtoa_r+0x406>
  40428e:	2300      	movs	r3, #0
  404290:	9308      	str	r3, [sp, #32]
  404292:	9b02      	ldr	r3, [sp, #8]
  404294:	2b00      	cmp	r3, #0
  404296:	f2c0 8145 	blt.w	404524 <_dtoa_r+0x3f4>
  40429a:	9a06      	ldr	r2, [sp, #24]
  40429c:	930d      	str	r3, [sp, #52]	; 0x34
  40429e:	4611      	mov	r1, r2
  4042a0:	4419      	add	r1, r3
  4042a2:	2300      	movs	r3, #0
  4042a4:	9106      	str	r1, [sp, #24]
  4042a6:	930c      	str	r3, [sp, #48]	; 0x30
  4042a8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4042aa:	2b09      	cmp	r3, #9
  4042ac:	d82a      	bhi.n	404304 <_dtoa_r+0x1d4>
  4042ae:	2b05      	cmp	r3, #5
  4042b0:	f340 865b 	ble.w	404f6a <_dtoa_r+0xe3a>
  4042b4:	3b04      	subs	r3, #4
  4042b6:	9324      	str	r3, [sp, #144]	; 0x90
  4042b8:	2500      	movs	r5, #0
  4042ba:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4042bc:	3b02      	subs	r3, #2
  4042be:	2b03      	cmp	r3, #3
  4042c0:	f200 8642 	bhi.w	404f48 <_dtoa_r+0xe18>
  4042c4:	e8df f013 	tbh	[pc, r3, lsl #1]
  4042c8:	02c903d4 	.word	0x02c903d4
  4042cc:	046103df 	.word	0x046103df
  4042d0:	9f18      	ldr	r7, [sp, #96]	; 0x60
  4042d2:	9e19      	ldr	r6, [sp, #100]	; 0x64
  4042d4:	443e      	add	r6, r7
  4042d6:	f206 4332 	addw	r3, r6, #1074	; 0x432
  4042da:	2b20      	cmp	r3, #32
  4042dc:	f340 818e 	ble.w	4045fc <_dtoa_r+0x4cc>
  4042e0:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  4042e4:	f206 4012 	addw	r0, r6, #1042	; 0x412
  4042e8:	409d      	lsls	r5, r3
  4042ea:	fa2a f000 	lsr.w	r0, sl, r0
  4042ee:	4328      	orrs	r0, r5
  4042f0:	f7fd ff08 	bl	402104 <__aeabi_ui2d>
  4042f4:	2301      	movs	r3, #1
  4042f6:	3e01      	subs	r6, #1
  4042f8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  4042fc:	9314      	str	r3, [sp, #80]	; 0x50
  4042fe:	e781      	b.n	404204 <_dtoa_r+0xd4>
  404300:	483b      	ldr	r0, [pc, #236]	; (4043f0 <_dtoa_r+0x2c0>)
  404302:	e743      	b.n	40418c <_dtoa_r+0x5c>
  404304:	2100      	movs	r1, #0
  404306:	6461      	str	r1, [r4, #68]	; 0x44
  404308:	4620      	mov	r0, r4
  40430a:	9125      	str	r1, [sp, #148]	; 0x94
  40430c:	f001 fa0e 	bl	40572c <_Balloc>
  404310:	f04f 33ff 	mov.w	r3, #4294967295
  404314:	930a      	str	r3, [sp, #40]	; 0x28
  404316:	9a25      	ldr	r2, [sp, #148]	; 0x94
  404318:	930f      	str	r3, [sp, #60]	; 0x3c
  40431a:	2301      	movs	r3, #1
  40431c:	9004      	str	r0, [sp, #16]
  40431e:	6420      	str	r0, [r4, #64]	; 0x40
  404320:	9224      	str	r2, [sp, #144]	; 0x90
  404322:	930b      	str	r3, [sp, #44]	; 0x2c
  404324:	9b19      	ldr	r3, [sp, #100]	; 0x64
  404326:	2b00      	cmp	r3, #0
  404328:	f2c0 80d9 	blt.w	4044de <_dtoa_r+0x3ae>
  40432c:	9a02      	ldr	r2, [sp, #8]
  40432e:	2a0e      	cmp	r2, #14
  404330:	f300 80d5 	bgt.w	4044de <_dtoa_r+0x3ae>
  404334:	4b2d      	ldr	r3, [pc, #180]	; (4043ec <_dtoa_r+0x2bc>)
  404336:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40433a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40433e:	e9cd 2308 	strd	r2, r3, [sp, #32]
  404342:	9b25      	ldr	r3, [sp, #148]	; 0x94
  404344:	2b00      	cmp	r3, #0
  404346:	f2c0 83ba 	blt.w	404abe <_dtoa_r+0x98e>
  40434a:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  40434e:	4650      	mov	r0, sl
  404350:	462a      	mov	r2, r5
  404352:	4633      	mov	r3, r6
  404354:	4659      	mov	r1, fp
  404356:	f7fe fa73 	bl	402840 <__aeabi_ddiv>
  40435a:	f002 fa91 	bl	406880 <__aeabi_d2iz>
  40435e:	4680      	mov	r8, r0
  404360:	f7fd fee0 	bl	402124 <__aeabi_i2d>
  404364:	462a      	mov	r2, r5
  404366:	4633      	mov	r3, r6
  404368:	f7fe f940 	bl	4025ec <__aeabi_dmul>
  40436c:	460b      	mov	r3, r1
  40436e:	4602      	mov	r2, r0
  404370:	4659      	mov	r1, fp
  404372:	4650      	mov	r0, sl
  404374:	f7fd fd88 	bl	401e88 <__aeabi_dsub>
  404378:	9d04      	ldr	r5, [sp, #16]
  40437a:	f108 0330 	add.w	r3, r8, #48	; 0x30
  40437e:	702b      	strb	r3, [r5, #0]
  404380:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404382:	2b01      	cmp	r3, #1
  404384:	4606      	mov	r6, r0
  404386:	460f      	mov	r7, r1
  404388:	f105 0501 	add.w	r5, r5, #1
  40438c:	d068      	beq.n	404460 <_dtoa_r+0x330>
  40438e:	2200      	movs	r2, #0
  404390:	4b18      	ldr	r3, [pc, #96]	; (4043f4 <_dtoa_r+0x2c4>)
  404392:	f7fe f92b 	bl	4025ec <__aeabi_dmul>
  404396:	2200      	movs	r2, #0
  404398:	2300      	movs	r3, #0
  40439a:	4606      	mov	r6, r0
  40439c:	460f      	mov	r7, r1
  40439e:	f002 fa27 	bl	4067f0 <__aeabi_dcmpeq>
  4043a2:	2800      	cmp	r0, #0
  4043a4:	f040 8088 	bne.w	4044b8 <_dtoa_r+0x388>
  4043a8:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  4043ac:	f04f 0a00 	mov.w	sl, #0
  4043b0:	f8df b040 	ldr.w	fp, [pc, #64]	; 4043f4 <_dtoa_r+0x2c4>
  4043b4:	940c      	str	r4, [sp, #48]	; 0x30
  4043b6:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  4043ba:	e028      	b.n	40440e <_dtoa_r+0x2de>
  4043bc:	f3af 8000 	nop.w
  4043c0:	636f4361 	.word	0x636f4361
  4043c4:	3fd287a7 	.word	0x3fd287a7
  4043c8:	8b60c8b3 	.word	0x8b60c8b3
  4043cc:	3fc68a28 	.word	0x3fc68a28
  4043d0:	509f79fb 	.word	0x509f79fb
  4043d4:	3fd34413 	.word	0x3fd34413
  4043d8:	7ff00000 	.word	0x7ff00000
  4043dc:	00407395 	.word	0x00407395
  4043e0:	004073b8 	.word	0x004073b8
  4043e4:	004073c4 	.word	0x004073c4
  4043e8:	3ff80000 	.word	0x3ff80000
  4043ec:	004073f0 	.word	0x004073f0
  4043f0:	00407394 	.word	0x00407394
  4043f4:	40240000 	.word	0x40240000
  4043f8:	f7fe f8f8 	bl	4025ec <__aeabi_dmul>
  4043fc:	2200      	movs	r2, #0
  4043fe:	2300      	movs	r3, #0
  404400:	4606      	mov	r6, r0
  404402:	460f      	mov	r7, r1
  404404:	f002 f9f4 	bl	4067f0 <__aeabi_dcmpeq>
  404408:	2800      	cmp	r0, #0
  40440a:	f040 83c1 	bne.w	404b90 <_dtoa_r+0xa60>
  40440e:	4642      	mov	r2, r8
  404410:	464b      	mov	r3, r9
  404412:	4630      	mov	r0, r6
  404414:	4639      	mov	r1, r7
  404416:	f7fe fa13 	bl	402840 <__aeabi_ddiv>
  40441a:	f002 fa31 	bl	406880 <__aeabi_d2iz>
  40441e:	4604      	mov	r4, r0
  404420:	f7fd fe80 	bl	402124 <__aeabi_i2d>
  404424:	4642      	mov	r2, r8
  404426:	464b      	mov	r3, r9
  404428:	f7fe f8e0 	bl	4025ec <__aeabi_dmul>
  40442c:	4602      	mov	r2, r0
  40442e:	460b      	mov	r3, r1
  404430:	4630      	mov	r0, r6
  404432:	4639      	mov	r1, r7
  404434:	f7fd fd28 	bl	401e88 <__aeabi_dsub>
  404438:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  40443c:	9e04      	ldr	r6, [sp, #16]
  40443e:	f805 eb01 	strb.w	lr, [r5], #1
  404442:	eba5 0e06 	sub.w	lr, r5, r6
  404446:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  404448:	45b6      	cmp	lr, r6
  40444a:	e9cd 0106 	strd	r0, r1, [sp, #24]
  40444e:	4652      	mov	r2, sl
  404450:	465b      	mov	r3, fp
  404452:	d1d1      	bne.n	4043f8 <_dtoa_r+0x2c8>
  404454:	46a0      	mov	r8, r4
  404456:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  40445a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40445c:	4606      	mov	r6, r0
  40445e:	460f      	mov	r7, r1
  404460:	4632      	mov	r2, r6
  404462:	463b      	mov	r3, r7
  404464:	4630      	mov	r0, r6
  404466:	4639      	mov	r1, r7
  404468:	f7fd fd10 	bl	401e8c <__adddf3>
  40446c:	4606      	mov	r6, r0
  40446e:	460f      	mov	r7, r1
  404470:	4602      	mov	r2, r0
  404472:	460b      	mov	r3, r1
  404474:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  404478:	f002 f9c4 	bl	406804 <__aeabi_dcmplt>
  40447c:	b948      	cbnz	r0, 404492 <_dtoa_r+0x362>
  40447e:	4632      	mov	r2, r6
  404480:	463b      	mov	r3, r7
  404482:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  404486:	f002 f9b3 	bl	4067f0 <__aeabi_dcmpeq>
  40448a:	b1a8      	cbz	r0, 4044b8 <_dtoa_r+0x388>
  40448c:	f018 0f01 	tst.w	r8, #1
  404490:	d012      	beq.n	4044b8 <_dtoa_r+0x388>
  404492:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  404496:	9a04      	ldr	r2, [sp, #16]
  404498:	1e6b      	subs	r3, r5, #1
  40449a:	e004      	b.n	4044a6 <_dtoa_r+0x376>
  40449c:	429a      	cmp	r2, r3
  40449e:	f000 8401 	beq.w	404ca4 <_dtoa_r+0xb74>
  4044a2:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  4044a6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  4044aa:	f103 0501 	add.w	r5, r3, #1
  4044ae:	d0f5      	beq.n	40449c <_dtoa_r+0x36c>
  4044b0:	f108 0801 	add.w	r8, r8, #1
  4044b4:	f883 8000 	strb.w	r8, [r3]
  4044b8:	4649      	mov	r1, r9
  4044ba:	4620      	mov	r0, r4
  4044bc:	f001 f95c 	bl	405778 <_Bfree>
  4044c0:	2200      	movs	r2, #0
  4044c2:	9b02      	ldr	r3, [sp, #8]
  4044c4:	702a      	strb	r2, [r5, #0]
  4044c6:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4044c8:	3301      	adds	r3, #1
  4044ca:	6013      	str	r3, [r2, #0]
  4044cc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  4044ce:	2b00      	cmp	r3, #0
  4044d0:	f000 839e 	beq.w	404c10 <_dtoa_r+0xae0>
  4044d4:	9804      	ldr	r0, [sp, #16]
  4044d6:	601d      	str	r5, [r3, #0]
  4044d8:	b01b      	add	sp, #108	; 0x6c
  4044da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4044de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4044e0:	2a00      	cmp	r2, #0
  4044e2:	d03e      	beq.n	404562 <_dtoa_r+0x432>
  4044e4:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4044e6:	2a01      	cmp	r2, #1
  4044e8:	f340 8311 	ble.w	404b0e <_dtoa_r+0x9de>
  4044ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4044ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4044f0:	1e5f      	subs	r7, r3, #1
  4044f2:	42ba      	cmp	r2, r7
  4044f4:	f2c0 838f 	blt.w	404c16 <_dtoa_r+0xae6>
  4044f8:	1bd7      	subs	r7, r2, r7
  4044fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4044fc:	2b00      	cmp	r3, #0
  4044fe:	f2c0 848b 	blt.w	404e18 <_dtoa_r+0xce8>
  404502:	9d08      	ldr	r5, [sp, #32]
  404504:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404506:	9a08      	ldr	r2, [sp, #32]
  404508:	441a      	add	r2, r3
  40450a:	9208      	str	r2, [sp, #32]
  40450c:	9a06      	ldr	r2, [sp, #24]
  40450e:	2101      	movs	r1, #1
  404510:	441a      	add	r2, r3
  404512:	4620      	mov	r0, r4
  404514:	9206      	str	r2, [sp, #24]
  404516:	f001 f9c9 	bl	4058ac <__i2b>
  40451a:	4606      	mov	r6, r0
  40451c:	e024      	b.n	404568 <_dtoa_r+0x438>
  40451e:	2301      	movs	r3, #1
  404520:	930e      	str	r3, [sp, #56]	; 0x38
  404522:	e6af      	b.n	404284 <_dtoa_r+0x154>
  404524:	9a08      	ldr	r2, [sp, #32]
  404526:	9b02      	ldr	r3, [sp, #8]
  404528:	1ad2      	subs	r2, r2, r3
  40452a:	425b      	negs	r3, r3
  40452c:	930c      	str	r3, [sp, #48]	; 0x30
  40452e:	2300      	movs	r3, #0
  404530:	9208      	str	r2, [sp, #32]
  404532:	930d      	str	r3, [sp, #52]	; 0x34
  404534:	e6b8      	b.n	4042a8 <_dtoa_r+0x178>
  404536:	f1c7 0301 	rsb	r3, r7, #1
  40453a:	9308      	str	r3, [sp, #32]
  40453c:	2300      	movs	r3, #0
  40453e:	9306      	str	r3, [sp, #24]
  404540:	e6a7      	b.n	404292 <_dtoa_r+0x162>
  404542:	9d02      	ldr	r5, [sp, #8]
  404544:	4628      	mov	r0, r5
  404546:	f7fd fded 	bl	402124 <__aeabi_i2d>
  40454a:	4602      	mov	r2, r0
  40454c:	460b      	mov	r3, r1
  40454e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  404552:	f002 f94d 	bl	4067f0 <__aeabi_dcmpeq>
  404556:	2800      	cmp	r0, #0
  404558:	f47f ae80 	bne.w	40425c <_dtoa_r+0x12c>
  40455c:	1e6b      	subs	r3, r5, #1
  40455e:	9302      	str	r3, [sp, #8]
  404560:	e67c      	b.n	40425c <_dtoa_r+0x12c>
  404562:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  404564:	9d08      	ldr	r5, [sp, #32]
  404566:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  404568:	2d00      	cmp	r5, #0
  40456a:	dd0c      	ble.n	404586 <_dtoa_r+0x456>
  40456c:	9906      	ldr	r1, [sp, #24]
  40456e:	2900      	cmp	r1, #0
  404570:	460b      	mov	r3, r1
  404572:	dd08      	ble.n	404586 <_dtoa_r+0x456>
  404574:	42a9      	cmp	r1, r5
  404576:	9a08      	ldr	r2, [sp, #32]
  404578:	bfa8      	it	ge
  40457a:	462b      	movge	r3, r5
  40457c:	1ad2      	subs	r2, r2, r3
  40457e:	1aed      	subs	r5, r5, r3
  404580:	1acb      	subs	r3, r1, r3
  404582:	9208      	str	r2, [sp, #32]
  404584:	9306      	str	r3, [sp, #24]
  404586:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  404588:	b1d3      	cbz	r3, 4045c0 <_dtoa_r+0x490>
  40458a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40458c:	2b00      	cmp	r3, #0
  40458e:	f000 82b7 	beq.w	404b00 <_dtoa_r+0x9d0>
  404592:	2f00      	cmp	r7, #0
  404594:	dd10      	ble.n	4045b8 <_dtoa_r+0x488>
  404596:	4631      	mov	r1, r6
  404598:	463a      	mov	r2, r7
  40459a:	4620      	mov	r0, r4
  40459c:	f001 fa22 	bl	4059e4 <__pow5mult>
  4045a0:	464a      	mov	r2, r9
  4045a2:	4601      	mov	r1, r0
  4045a4:	4606      	mov	r6, r0
  4045a6:	4620      	mov	r0, r4
  4045a8:	f001 f98a 	bl	4058c0 <__multiply>
  4045ac:	4649      	mov	r1, r9
  4045ae:	4680      	mov	r8, r0
  4045b0:	4620      	mov	r0, r4
  4045b2:	f001 f8e1 	bl	405778 <_Bfree>
  4045b6:	46c1      	mov	r9, r8
  4045b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4045ba:	1bda      	subs	r2, r3, r7
  4045bc:	f040 82a1 	bne.w	404b02 <_dtoa_r+0x9d2>
  4045c0:	2101      	movs	r1, #1
  4045c2:	4620      	mov	r0, r4
  4045c4:	f001 f972 	bl	4058ac <__i2b>
  4045c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4045ca:	2b00      	cmp	r3, #0
  4045cc:	4680      	mov	r8, r0
  4045ce:	dd1c      	ble.n	40460a <_dtoa_r+0x4da>
  4045d0:	4601      	mov	r1, r0
  4045d2:	461a      	mov	r2, r3
  4045d4:	4620      	mov	r0, r4
  4045d6:	f001 fa05 	bl	4059e4 <__pow5mult>
  4045da:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4045dc:	2b01      	cmp	r3, #1
  4045de:	4680      	mov	r8, r0
  4045e0:	f340 8254 	ble.w	404a8c <_dtoa_r+0x95c>
  4045e4:	2300      	movs	r3, #0
  4045e6:	930c      	str	r3, [sp, #48]	; 0x30
  4045e8:	f8d8 3010 	ldr.w	r3, [r8, #16]
  4045ec:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  4045f0:	6918      	ldr	r0, [r3, #16]
  4045f2:	f001 f90b 	bl	40580c <__hi0bits>
  4045f6:	f1c0 0020 	rsb	r0, r0, #32
  4045fa:	e010      	b.n	40461e <_dtoa_r+0x4ee>
  4045fc:	f1c3 0520 	rsb	r5, r3, #32
  404600:	fa0a f005 	lsl.w	r0, sl, r5
  404604:	e674      	b.n	4042f0 <_dtoa_r+0x1c0>
  404606:	900e      	str	r0, [sp, #56]	; 0x38
  404608:	e63c      	b.n	404284 <_dtoa_r+0x154>
  40460a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40460c:	2b01      	cmp	r3, #1
  40460e:	f340 8287 	ble.w	404b20 <_dtoa_r+0x9f0>
  404612:	2300      	movs	r3, #0
  404614:	930c      	str	r3, [sp, #48]	; 0x30
  404616:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404618:	2001      	movs	r0, #1
  40461a:	2b00      	cmp	r3, #0
  40461c:	d1e4      	bne.n	4045e8 <_dtoa_r+0x4b8>
  40461e:	9a06      	ldr	r2, [sp, #24]
  404620:	4410      	add	r0, r2
  404622:	f010 001f 	ands.w	r0, r0, #31
  404626:	f000 80a1 	beq.w	40476c <_dtoa_r+0x63c>
  40462a:	f1c0 0320 	rsb	r3, r0, #32
  40462e:	2b04      	cmp	r3, #4
  404630:	f340 849e 	ble.w	404f70 <_dtoa_r+0xe40>
  404634:	9b08      	ldr	r3, [sp, #32]
  404636:	f1c0 001c 	rsb	r0, r0, #28
  40463a:	4403      	add	r3, r0
  40463c:	9308      	str	r3, [sp, #32]
  40463e:	4613      	mov	r3, r2
  404640:	4403      	add	r3, r0
  404642:	4405      	add	r5, r0
  404644:	9306      	str	r3, [sp, #24]
  404646:	9b08      	ldr	r3, [sp, #32]
  404648:	2b00      	cmp	r3, #0
  40464a:	dd05      	ble.n	404658 <_dtoa_r+0x528>
  40464c:	4649      	mov	r1, r9
  40464e:	461a      	mov	r2, r3
  404650:	4620      	mov	r0, r4
  404652:	f001 fa17 	bl	405a84 <__lshift>
  404656:	4681      	mov	r9, r0
  404658:	9b06      	ldr	r3, [sp, #24]
  40465a:	2b00      	cmp	r3, #0
  40465c:	dd05      	ble.n	40466a <_dtoa_r+0x53a>
  40465e:	4641      	mov	r1, r8
  404660:	461a      	mov	r2, r3
  404662:	4620      	mov	r0, r4
  404664:	f001 fa0e 	bl	405a84 <__lshift>
  404668:	4680      	mov	r8, r0
  40466a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40466c:	2b00      	cmp	r3, #0
  40466e:	f040 8086 	bne.w	40477e <_dtoa_r+0x64e>
  404672:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404674:	2b00      	cmp	r3, #0
  404676:	f340 8266 	ble.w	404b46 <_dtoa_r+0xa16>
  40467a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40467c:	2b00      	cmp	r3, #0
  40467e:	f000 8098 	beq.w	4047b2 <_dtoa_r+0x682>
  404682:	2d00      	cmp	r5, #0
  404684:	dd05      	ble.n	404692 <_dtoa_r+0x562>
  404686:	4631      	mov	r1, r6
  404688:	462a      	mov	r2, r5
  40468a:	4620      	mov	r0, r4
  40468c:	f001 f9fa 	bl	405a84 <__lshift>
  404690:	4606      	mov	r6, r0
  404692:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  404694:	2b00      	cmp	r3, #0
  404696:	f040 8337 	bne.w	404d08 <_dtoa_r+0xbd8>
  40469a:	9606      	str	r6, [sp, #24]
  40469c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40469e:	9a04      	ldr	r2, [sp, #16]
  4046a0:	f8dd b018 	ldr.w	fp, [sp, #24]
  4046a4:	3b01      	subs	r3, #1
  4046a6:	18d3      	adds	r3, r2, r3
  4046a8:	930b      	str	r3, [sp, #44]	; 0x2c
  4046aa:	f00a 0301 	and.w	r3, sl, #1
  4046ae:	930c      	str	r3, [sp, #48]	; 0x30
  4046b0:	4617      	mov	r7, r2
  4046b2:	46c2      	mov	sl, r8
  4046b4:	4651      	mov	r1, sl
  4046b6:	4648      	mov	r0, r9
  4046b8:	f7ff fca4 	bl	404004 <quorem>
  4046bc:	4631      	mov	r1, r6
  4046be:	4605      	mov	r5, r0
  4046c0:	4648      	mov	r0, r9
  4046c2:	f001 fa31 	bl	405b28 <__mcmp>
  4046c6:	465a      	mov	r2, fp
  4046c8:	900a      	str	r0, [sp, #40]	; 0x28
  4046ca:	4651      	mov	r1, sl
  4046cc:	4620      	mov	r0, r4
  4046ce:	f001 fa47 	bl	405b60 <__mdiff>
  4046d2:	68c2      	ldr	r2, [r0, #12]
  4046d4:	4680      	mov	r8, r0
  4046d6:	f105 0330 	add.w	r3, r5, #48	; 0x30
  4046da:	2a00      	cmp	r2, #0
  4046dc:	f040 822b 	bne.w	404b36 <_dtoa_r+0xa06>
  4046e0:	4601      	mov	r1, r0
  4046e2:	4648      	mov	r0, r9
  4046e4:	9308      	str	r3, [sp, #32]
  4046e6:	f001 fa1f 	bl	405b28 <__mcmp>
  4046ea:	4641      	mov	r1, r8
  4046ec:	9006      	str	r0, [sp, #24]
  4046ee:	4620      	mov	r0, r4
  4046f0:	f001 f842 	bl	405778 <_Bfree>
  4046f4:	9a06      	ldr	r2, [sp, #24]
  4046f6:	9b08      	ldr	r3, [sp, #32]
  4046f8:	b932      	cbnz	r2, 404708 <_dtoa_r+0x5d8>
  4046fa:	9924      	ldr	r1, [sp, #144]	; 0x90
  4046fc:	b921      	cbnz	r1, 404708 <_dtoa_r+0x5d8>
  4046fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  404700:	2a00      	cmp	r2, #0
  404702:	f000 83ef 	beq.w	404ee4 <_dtoa_r+0xdb4>
  404706:	9a24      	ldr	r2, [sp, #144]	; 0x90
  404708:	990a      	ldr	r1, [sp, #40]	; 0x28
  40470a:	2900      	cmp	r1, #0
  40470c:	f2c0 829f 	blt.w	404c4e <_dtoa_r+0xb1e>
  404710:	d105      	bne.n	40471e <_dtoa_r+0x5ee>
  404712:	9924      	ldr	r1, [sp, #144]	; 0x90
  404714:	b919      	cbnz	r1, 40471e <_dtoa_r+0x5ee>
  404716:	990c      	ldr	r1, [sp, #48]	; 0x30
  404718:	2900      	cmp	r1, #0
  40471a:	f000 8298 	beq.w	404c4e <_dtoa_r+0xb1e>
  40471e:	2a00      	cmp	r2, #0
  404720:	f300 8306 	bgt.w	404d30 <_dtoa_r+0xc00>
  404724:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  404726:	703b      	strb	r3, [r7, #0]
  404728:	f107 0801 	add.w	r8, r7, #1
  40472c:	4297      	cmp	r7, r2
  40472e:	4645      	mov	r5, r8
  404730:	f000 830c 	beq.w	404d4c <_dtoa_r+0xc1c>
  404734:	4649      	mov	r1, r9
  404736:	2300      	movs	r3, #0
  404738:	220a      	movs	r2, #10
  40473a:	4620      	mov	r0, r4
  40473c:	f001 f826 	bl	40578c <__multadd>
  404740:	455e      	cmp	r6, fp
  404742:	4681      	mov	r9, r0
  404744:	4631      	mov	r1, r6
  404746:	f04f 0300 	mov.w	r3, #0
  40474a:	f04f 020a 	mov.w	r2, #10
  40474e:	4620      	mov	r0, r4
  404750:	f000 81eb 	beq.w	404b2a <_dtoa_r+0x9fa>
  404754:	f001 f81a 	bl	40578c <__multadd>
  404758:	4659      	mov	r1, fp
  40475a:	4606      	mov	r6, r0
  40475c:	2300      	movs	r3, #0
  40475e:	220a      	movs	r2, #10
  404760:	4620      	mov	r0, r4
  404762:	f001 f813 	bl	40578c <__multadd>
  404766:	4647      	mov	r7, r8
  404768:	4683      	mov	fp, r0
  40476a:	e7a3      	b.n	4046b4 <_dtoa_r+0x584>
  40476c:	201c      	movs	r0, #28
  40476e:	9b08      	ldr	r3, [sp, #32]
  404770:	4403      	add	r3, r0
  404772:	9308      	str	r3, [sp, #32]
  404774:	9b06      	ldr	r3, [sp, #24]
  404776:	4403      	add	r3, r0
  404778:	4405      	add	r5, r0
  40477a:	9306      	str	r3, [sp, #24]
  40477c:	e763      	b.n	404646 <_dtoa_r+0x516>
  40477e:	4641      	mov	r1, r8
  404780:	4648      	mov	r0, r9
  404782:	f001 f9d1 	bl	405b28 <__mcmp>
  404786:	2800      	cmp	r0, #0
  404788:	f6bf af73 	bge.w	404672 <_dtoa_r+0x542>
  40478c:	9f02      	ldr	r7, [sp, #8]
  40478e:	4649      	mov	r1, r9
  404790:	2300      	movs	r3, #0
  404792:	220a      	movs	r2, #10
  404794:	4620      	mov	r0, r4
  404796:	3f01      	subs	r7, #1
  404798:	9702      	str	r7, [sp, #8]
  40479a:	f000 fff7 	bl	40578c <__multadd>
  40479e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4047a0:	4681      	mov	r9, r0
  4047a2:	2b00      	cmp	r3, #0
  4047a4:	f040 83b6 	bne.w	404f14 <_dtoa_r+0xde4>
  4047a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4047aa:	2b00      	cmp	r3, #0
  4047ac:	f340 83bf 	ble.w	404f2e <_dtoa_r+0xdfe>
  4047b0:	930a      	str	r3, [sp, #40]	; 0x28
  4047b2:	f8dd b010 	ldr.w	fp, [sp, #16]
  4047b6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  4047b8:	465d      	mov	r5, fp
  4047ba:	e002      	b.n	4047c2 <_dtoa_r+0x692>
  4047bc:	f000 ffe6 	bl	40578c <__multadd>
  4047c0:	4681      	mov	r9, r0
  4047c2:	4641      	mov	r1, r8
  4047c4:	4648      	mov	r0, r9
  4047c6:	f7ff fc1d 	bl	404004 <quorem>
  4047ca:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  4047ce:	f805 ab01 	strb.w	sl, [r5], #1
  4047d2:	eba5 030b 	sub.w	r3, r5, fp
  4047d6:	42bb      	cmp	r3, r7
  4047d8:	f04f 020a 	mov.w	r2, #10
  4047dc:	f04f 0300 	mov.w	r3, #0
  4047e0:	4649      	mov	r1, r9
  4047e2:	4620      	mov	r0, r4
  4047e4:	dbea      	blt.n	4047bc <_dtoa_r+0x68c>
  4047e6:	9b04      	ldr	r3, [sp, #16]
  4047e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4047ea:	2a01      	cmp	r2, #1
  4047ec:	bfac      	ite	ge
  4047ee:	189b      	addge	r3, r3, r2
  4047f0:	3301      	addlt	r3, #1
  4047f2:	461d      	mov	r5, r3
  4047f4:	f04f 0b00 	mov.w	fp, #0
  4047f8:	4649      	mov	r1, r9
  4047fa:	2201      	movs	r2, #1
  4047fc:	4620      	mov	r0, r4
  4047fe:	f001 f941 	bl	405a84 <__lshift>
  404802:	4641      	mov	r1, r8
  404804:	4681      	mov	r9, r0
  404806:	f001 f98f 	bl	405b28 <__mcmp>
  40480a:	2800      	cmp	r0, #0
  40480c:	f340 823d 	ble.w	404c8a <_dtoa_r+0xb5a>
  404810:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  404814:	9904      	ldr	r1, [sp, #16]
  404816:	1e6b      	subs	r3, r5, #1
  404818:	e004      	b.n	404824 <_dtoa_r+0x6f4>
  40481a:	428b      	cmp	r3, r1
  40481c:	f000 81ae 	beq.w	404b7c <_dtoa_r+0xa4c>
  404820:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  404824:	2a39      	cmp	r2, #57	; 0x39
  404826:	f103 0501 	add.w	r5, r3, #1
  40482a:	d0f6      	beq.n	40481a <_dtoa_r+0x6ea>
  40482c:	3201      	adds	r2, #1
  40482e:	701a      	strb	r2, [r3, #0]
  404830:	4641      	mov	r1, r8
  404832:	4620      	mov	r0, r4
  404834:	f000 ffa0 	bl	405778 <_Bfree>
  404838:	2e00      	cmp	r6, #0
  40483a:	f43f ae3d 	beq.w	4044b8 <_dtoa_r+0x388>
  40483e:	f1bb 0f00 	cmp.w	fp, #0
  404842:	d005      	beq.n	404850 <_dtoa_r+0x720>
  404844:	45b3      	cmp	fp, r6
  404846:	d003      	beq.n	404850 <_dtoa_r+0x720>
  404848:	4659      	mov	r1, fp
  40484a:	4620      	mov	r0, r4
  40484c:	f000 ff94 	bl	405778 <_Bfree>
  404850:	4631      	mov	r1, r6
  404852:	4620      	mov	r0, r4
  404854:	f000 ff90 	bl	405778 <_Bfree>
  404858:	e62e      	b.n	4044b8 <_dtoa_r+0x388>
  40485a:	2300      	movs	r3, #0
  40485c:	930b      	str	r3, [sp, #44]	; 0x2c
  40485e:	9b02      	ldr	r3, [sp, #8]
  404860:	9a25      	ldr	r2, [sp, #148]	; 0x94
  404862:	4413      	add	r3, r2
  404864:	930f      	str	r3, [sp, #60]	; 0x3c
  404866:	3301      	adds	r3, #1
  404868:	2b01      	cmp	r3, #1
  40486a:	461f      	mov	r7, r3
  40486c:	461e      	mov	r6, r3
  40486e:	930a      	str	r3, [sp, #40]	; 0x28
  404870:	bfb8      	it	lt
  404872:	2701      	movlt	r7, #1
  404874:	2100      	movs	r1, #0
  404876:	2f17      	cmp	r7, #23
  404878:	6461      	str	r1, [r4, #68]	; 0x44
  40487a:	d90a      	bls.n	404892 <_dtoa_r+0x762>
  40487c:	2201      	movs	r2, #1
  40487e:	2304      	movs	r3, #4
  404880:	005b      	lsls	r3, r3, #1
  404882:	f103 0014 	add.w	r0, r3, #20
  404886:	4287      	cmp	r7, r0
  404888:	4611      	mov	r1, r2
  40488a:	f102 0201 	add.w	r2, r2, #1
  40488e:	d2f7      	bcs.n	404880 <_dtoa_r+0x750>
  404890:	6461      	str	r1, [r4, #68]	; 0x44
  404892:	4620      	mov	r0, r4
  404894:	f000 ff4a 	bl	40572c <_Balloc>
  404898:	2e0e      	cmp	r6, #14
  40489a:	9004      	str	r0, [sp, #16]
  40489c:	6420      	str	r0, [r4, #64]	; 0x40
  40489e:	f63f ad41 	bhi.w	404324 <_dtoa_r+0x1f4>
  4048a2:	2d00      	cmp	r5, #0
  4048a4:	f43f ad3e 	beq.w	404324 <_dtoa_r+0x1f4>
  4048a8:	9902      	ldr	r1, [sp, #8]
  4048aa:	2900      	cmp	r1, #0
  4048ac:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  4048b0:	f340 8202 	ble.w	404cb8 <_dtoa_r+0xb88>
  4048b4:	4bb8      	ldr	r3, [pc, #736]	; (404b98 <_dtoa_r+0xa68>)
  4048b6:	f001 020f 	and.w	r2, r1, #15
  4048ba:	110d      	asrs	r5, r1, #4
  4048bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4048c0:	06e9      	lsls	r1, r5, #27
  4048c2:	e9d3 6700 	ldrd	r6, r7, [r3]
  4048c6:	f140 81ae 	bpl.w	404c26 <_dtoa_r+0xaf6>
  4048ca:	4bb4      	ldr	r3, [pc, #720]	; (404b9c <_dtoa_r+0xa6c>)
  4048cc:	4650      	mov	r0, sl
  4048ce:	4659      	mov	r1, fp
  4048d0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  4048d4:	f7fd ffb4 	bl	402840 <__aeabi_ddiv>
  4048d8:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  4048dc:	f005 050f 	and.w	r5, r5, #15
  4048e0:	f04f 0a03 	mov.w	sl, #3
  4048e4:	b18d      	cbz	r5, 40490a <_dtoa_r+0x7da>
  4048e6:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 404b9c <_dtoa_r+0xa6c>
  4048ea:	07ea      	lsls	r2, r5, #31
  4048ec:	d509      	bpl.n	404902 <_dtoa_r+0x7d2>
  4048ee:	4630      	mov	r0, r6
  4048f0:	4639      	mov	r1, r7
  4048f2:	e9d8 2300 	ldrd	r2, r3, [r8]
  4048f6:	f7fd fe79 	bl	4025ec <__aeabi_dmul>
  4048fa:	f10a 0a01 	add.w	sl, sl, #1
  4048fe:	4606      	mov	r6, r0
  404900:	460f      	mov	r7, r1
  404902:	106d      	asrs	r5, r5, #1
  404904:	f108 0808 	add.w	r8, r8, #8
  404908:	d1ef      	bne.n	4048ea <_dtoa_r+0x7ba>
  40490a:	463b      	mov	r3, r7
  40490c:	4632      	mov	r2, r6
  40490e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  404912:	f7fd ff95 	bl	402840 <__aeabi_ddiv>
  404916:	4607      	mov	r7, r0
  404918:	4688      	mov	r8, r1
  40491a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40491c:	b143      	cbz	r3, 404930 <_dtoa_r+0x800>
  40491e:	2200      	movs	r2, #0
  404920:	4b9f      	ldr	r3, [pc, #636]	; (404ba0 <_dtoa_r+0xa70>)
  404922:	4638      	mov	r0, r7
  404924:	4641      	mov	r1, r8
  404926:	f001 ff6d 	bl	406804 <__aeabi_dcmplt>
  40492a:	2800      	cmp	r0, #0
  40492c:	f040 8286 	bne.w	404e3c <_dtoa_r+0xd0c>
  404930:	4650      	mov	r0, sl
  404932:	f7fd fbf7 	bl	402124 <__aeabi_i2d>
  404936:	463a      	mov	r2, r7
  404938:	4643      	mov	r3, r8
  40493a:	f7fd fe57 	bl	4025ec <__aeabi_dmul>
  40493e:	4b99      	ldr	r3, [pc, #612]	; (404ba4 <_dtoa_r+0xa74>)
  404940:	2200      	movs	r2, #0
  404942:	f7fd faa3 	bl	401e8c <__adddf3>
  404946:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404948:	4605      	mov	r5, r0
  40494a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  40494e:	2b00      	cmp	r3, #0
  404950:	f000 813e 	beq.w	404bd0 <_dtoa_r+0xaa0>
  404954:	9b02      	ldr	r3, [sp, #8]
  404956:	9315      	str	r3, [sp, #84]	; 0x54
  404958:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40495a:	9312      	str	r3, [sp, #72]	; 0x48
  40495c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40495e:	2b00      	cmp	r3, #0
  404960:	f000 81fa 	beq.w	404d58 <_dtoa_r+0xc28>
  404964:	9a12      	ldr	r2, [sp, #72]	; 0x48
  404966:	4b8c      	ldr	r3, [pc, #560]	; (404b98 <_dtoa_r+0xa68>)
  404968:	498f      	ldr	r1, [pc, #572]	; (404ba8 <_dtoa_r+0xa78>)
  40496a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40496e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  404972:	2000      	movs	r0, #0
  404974:	f7fd ff64 	bl	402840 <__aeabi_ddiv>
  404978:	462a      	mov	r2, r5
  40497a:	4633      	mov	r3, r6
  40497c:	f7fd fa84 	bl	401e88 <__aeabi_dsub>
  404980:	4682      	mov	sl, r0
  404982:	468b      	mov	fp, r1
  404984:	4638      	mov	r0, r7
  404986:	4641      	mov	r1, r8
  404988:	f001 ff7a 	bl	406880 <__aeabi_d2iz>
  40498c:	4605      	mov	r5, r0
  40498e:	f7fd fbc9 	bl	402124 <__aeabi_i2d>
  404992:	4602      	mov	r2, r0
  404994:	460b      	mov	r3, r1
  404996:	4638      	mov	r0, r7
  404998:	4641      	mov	r1, r8
  40499a:	f7fd fa75 	bl	401e88 <__aeabi_dsub>
  40499e:	3530      	adds	r5, #48	; 0x30
  4049a0:	fa5f f885 	uxtb.w	r8, r5
  4049a4:	9d04      	ldr	r5, [sp, #16]
  4049a6:	4606      	mov	r6, r0
  4049a8:	460f      	mov	r7, r1
  4049aa:	f885 8000 	strb.w	r8, [r5]
  4049ae:	4602      	mov	r2, r0
  4049b0:	460b      	mov	r3, r1
  4049b2:	4650      	mov	r0, sl
  4049b4:	4659      	mov	r1, fp
  4049b6:	3501      	adds	r5, #1
  4049b8:	f001 ff42 	bl	406840 <__aeabi_dcmpgt>
  4049bc:	2800      	cmp	r0, #0
  4049be:	d154      	bne.n	404a6a <_dtoa_r+0x93a>
  4049c0:	4632      	mov	r2, r6
  4049c2:	463b      	mov	r3, r7
  4049c4:	2000      	movs	r0, #0
  4049c6:	4976      	ldr	r1, [pc, #472]	; (404ba0 <_dtoa_r+0xa70>)
  4049c8:	f7fd fa5e 	bl	401e88 <__aeabi_dsub>
  4049cc:	4602      	mov	r2, r0
  4049ce:	460b      	mov	r3, r1
  4049d0:	4650      	mov	r0, sl
  4049d2:	4659      	mov	r1, fp
  4049d4:	f001 ff34 	bl	406840 <__aeabi_dcmpgt>
  4049d8:	2800      	cmp	r0, #0
  4049da:	f040 8270 	bne.w	404ebe <_dtoa_r+0xd8e>
  4049de:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4049e0:	2a01      	cmp	r2, #1
  4049e2:	f000 8111 	beq.w	404c08 <_dtoa_r+0xad8>
  4049e6:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4049e8:	9a04      	ldr	r2, [sp, #16]
  4049ea:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  4049ee:	4413      	add	r3, r2
  4049f0:	4699      	mov	r9, r3
  4049f2:	e00d      	b.n	404a10 <_dtoa_r+0x8e0>
  4049f4:	2000      	movs	r0, #0
  4049f6:	496a      	ldr	r1, [pc, #424]	; (404ba0 <_dtoa_r+0xa70>)
  4049f8:	f7fd fa46 	bl	401e88 <__aeabi_dsub>
  4049fc:	4652      	mov	r2, sl
  4049fe:	465b      	mov	r3, fp
  404a00:	f001 ff00 	bl	406804 <__aeabi_dcmplt>
  404a04:	2800      	cmp	r0, #0
  404a06:	f040 8258 	bne.w	404eba <_dtoa_r+0xd8a>
  404a0a:	454d      	cmp	r5, r9
  404a0c:	f000 80fa 	beq.w	404c04 <_dtoa_r+0xad4>
  404a10:	4650      	mov	r0, sl
  404a12:	4659      	mov	r1, fp
  404a14:	2200      	movs	r2, #0
  404a16:	4b65      	ldr	r3, [pc, #404]	; (404bac <_dtoa_r+0xa7c>)
  404a18:	f7fd fde8 	bl	4025ec <__aeabi_dmul>
  404a1c:	2200      	movs	r2, #0
  404a1e:	4b63      	ldr	r3, [pc, #396]	; (404bac <_dtoa_r+0xa7c>)
  404a20:	4682      	mov	sl, r0
  404a22:	468b      	mov	fp, r1
  404a24:	4630      	mov	r0, r6
  404a26:	4639      	mov	r1, r7
  404a28:	f7fd fde0 	bl	4025ec <__aeabi_dmul>
  404a2c:	460f      	mov	r7, r1
  404a2e:	4606      	mov	r6, r0
  404a30:	f001 ff26 	bl	406880 <__aeabi_d2iz>
  404a34:	4680      	mov	r8, r0
  404a36:	f7fd fb75 	bl	402124 <__aeabi_i2d>
  404a3a:	4602      	mov	r2, r0
  404a3c:	460b      	mov	r3, r1
  404a3e:	4630      	mov	r0, r6
  404a40:	4639      	mov	r1, r7
  404a42:	f7fd fa21 	bl	401e88 <__aeabi_dsub>
  404a46:	f108 0830 	add.w	r8, r8, #48	; 0x30
  404a4a:	fa5f f888 	uxtb.w	r8, r8
  404a4e:	4652      	mov	r2, sl
  404a50:	465b      	mov	r3, fp
  404a52:	f805 8b01 	strb.w	r8, [r5], #1
  404a56:	4606      	mov	r6, r0
  404a58:	460f      	mov	r7, r1
  404a5a:	f001 fed3 	bl	406804 <__aeabi_dcmplt>
  404a5e:	4632      	mov	r2, r6
  404a60:	463b      	mov	r3, r7
  404a62:	2800      	cmp	r0, #0
  404a64:	d0c6      	beq.n	4049f4 <_dtoa_r+0x8c4>
  404a66:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  404a6a:	9b15      	ldr	r3, [sp, #84]	; 0x54
  404a6c:	9302      	str	r3, [sp, #8]
  404a6e:	e523      	b.n	4044b8 <_dtoa_r+0x388>
  404a70:	2300      	movs	r3, #0
  404a72:	930b      	str	r3, [sp, #44]	; 0x2c
  404a74:	9b25      	ldr	r3, [sp, #148]	; 0x94
  404a76:	2b00      	cmp	r3, #0
  404a78:	f340 80dc 	ble.w	404c34 <_dtoa_r+0xb04>
  404a7c:	461f      	mov	r7, r3
  404a7e:	461e      	mov	r6, r3
  404a80:	930f      	str	r3, [sp, #60]	; 0x3c
  404a82:	930a      	str	r3, [sp, #40]	; 0x28
  404a84:	e6f6      	b.n	404874 <_dtoa_r+0x744>
  404a86:	2301      	movs	r3, #1
  404a88:	930b      	str	r3, [sp, #44]	; 0x2c
  404a8a:	e7f3      	b.n	404a74 <_dtoa_r+0x944>
  404a8c:	f1ba 0f00 	cmp.w	sl, #0
  404a90:	f47f ada8 	bne.w	4045e4 <_dtoa_r+0x4b4>
  404a94:	f3cb 0313 	ubfx	r3, fp, #0, #20
  404a98:	2b00      	cmp	r3, #0
  404a9a:	f47f adba 	bne.w	404612 <_dtoa_r+0x4e2>
  404a9e:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  404aa2:	0d3f      	lsrs	r7, r7, #20
  404aa4:	053f      	lsls	r7, r7, #20
  404aa6:	2f00      	cmp	r7, #0
  404aa8:	f000 820d 	beq.w	404ec6 <_dtoa_r+0xd96>
  404aac:	9b08      	ldr	r3, [sp, #32]
  404aae:	3301      	adds	r3, #1
  404ab0:	9308      	str	r3, [sp, #32]
  404ab2:	9b06      	ldr	r3, [sp, #24]
  404ab4:	3301      	adds	r3, #1
  404ab6:	9306      	str	r3, [sp, #24]
  404ab8:	2301      	movs	r3, #1
  404aba:	930c      	str	r3, [sp, #48]	; 0x30
  404abc:	e5ab      	b.n	404616 <_dtoa_r+0x4e6>
  404abe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404ac0:	2b00      	cmp	r3, #0
  404ac2:	f73f ac42 	bgt.w	40434a <_dtoa_r+0x21a>
  404ac6:	f040 8221 	bne.w	404f0c <_dtoa_r+0xddc>
  404aca:	2200      	movs	r2, #0
  404acc:	4b38      	ldr	r3, [pc, #224]	; (404bb0 <_dtoa_r+0xa80>)
  404ace:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  404ad2:	f7fd fd8b 	bl	4025ec <__aeabi_dmul>
  404ad6:	4652      	mov	r2, sl
  404ad8:	465b      	mov	r3, fp
  404ada:	f001 fea7 	bl	40682c <__aeabi_dcmpge>
  404ade:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  404ae2:	4646      	mov	r6, r8
  404ae4:	2800      	cmp	r0, #0
  404ae6:	d041      	beq.n	404b6c <_dtoa_r+0xa3c>
  404ae8:	9b25      	ldr	r3, [sp, #148]	; 0x94
  404aea:	9d04      	ldr	r5, [sp, #16]
  404aec:	43db      	mvns	r3, r3
  404aee:	9302      	str	r3, [sp, #8]
  404af0:	4641      	mov	r1, r8
  404af2:	4620      	mov	r0, r4
  404af4:	f000 fe40 	bl	405778 <_Bfree>
  404af8:	2e00      	cmp	r6, #0
  404afa:	f43f acdd 	beq.w	4044b8 <_dtoa_r+0x388>
  404afe:	e6a7      	b.n	404850 <_dtoa_r+0x720>
  404b00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  404b02:	4649      	mov	r1, r9
  404b04:	4620      	mov	r0, r4
  404b06:	f000 ff6d 	bl	4059e4 <__pow5mult>
  404b0a:	4681      	mov	r9, r0
  404b0c:	e558      	b.n	4045c0 <_dtoa_r+0x490>
  404b0e:	9a14      	ldr	r2, [sp, #80]	; 0x50
  404b10:	2a00      	cmp	r2, #0
  404b12:	f000 8187 	beq.w	404e24 <_dtoa_r+0xcf4>
  404b16:	f203 4333 	addw	r3, r3, #1075	; 0x433
  404b1a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  404b1c:	9d08      	ldr	r5, [sp, #32]
  404b1e:	e4f2      	b.n	404506 <_dtoa_r+0x3d6>
  404b20:	f1ba 0f00 	cmp.w	sl, #0
  404b24:	f47f ad75 	bne.w	404612 <_dtoa_r+0x4e2>
  404b28:	e7b4      	b.n	404a94 <_dtoa_r+0x964>
  404b2a:	f000 fe2f 	bl	40578c <__multadd>
  404b2e:	4647      	mov	r7, r8
  404b30:	4606      	mov	r6, r0
  404b32:	4683      	mov	fp, r0
  404b34:	e5be      	b.n	4046b4 <_dtoa_r+0x584>
  404b36:	4601      	mov	r1, r0
  404b38:	4620      	mov	r0, r4
  404b3a:	9306      	str	r3, [sp, #24]
  404b3c:	f000 fe1c 	bl	405778 <_Bfree>
  404b40:	2201      	movs	r2, #1
  404b42:	9b06      	ldr	r3, [sp, #24]
  404b44:	e5e0      	b.n	404708 <_dtoa_r+0x5d8>
  404b46:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404b48:	2b02      	cmp	r3, #2
  404b4a:	f77f ad96 	ble.w	40467a <_dtoa_r+0x54a>
  404b4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404b50:	2b00      	cmp	r3, #0
  404b52:	d1c9      	bne.n	404ae8 <_dtoa_r+0x9b8>
  404b54:	4641      	mov	r1, r8
  404b56:	2205      	movs	r2, #5
  404b58:	4620      	mov	r0, r4
  404b5a:	f000 fe17 	bl	40578c <__multadd>
  404b5e:	4601      	mov	r1, r0
  404b60:	4680      	mov	r8, r0
  404b62:	4648      	mov	r0, r9
  404b64:	f000 ffe0 	bl	405b28 <__mcmp>
  404b68:	2800      	cmp	r0, #0
  404b6a:	ddbd      	ble.n	404ae8 <_dtoa_r+0x9b8>
  404b6c:	9a02      	ldr	r2, [sp, #8]
  404b6e:	9904      	ldr	r1, [sp, #16]
  404b70:	2331      	movs	r3, #49	; 0x31
  404b72:	3201      	adds	r2, #1
  404b74:	9202      	str	r2, [sp, #8]
  404b76:	700b      	strb	r3, [r1, #0]
  404b78:	1c4d      	adds	r5, r1, #1
  404b7a:	e7b9      	b.n	404af0 <_dtoa_r+0x9c0>
  404b7c:	9a02      	ldr	r2, [sp, #8]
  404b7e:	3201      	adds	r2, #1
  404b80:	9202      	str	r2, [sp, #8]
  404b82:	9a04      	ldr	r2, [sp, #16]
  404b84:	2331      	movs	r3, #49	; 0x31
  404b86:	7013      	strb	r3, [r2, #0]
  404b88:	e652      	b.n	404830 <_dtoa_r+0x700>
  404b8a:	2301      	movs	r3, #1
  404b8c:	930b      	str	r3, [sp, #44]	; 0x2c
  404b8e:	e666      	b.n	40485e <_dtoa_r+0x72e>
  404b90:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  404b94:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  404b96:	e48f      	b.n	4044b8 <_dtoa_r+0x388>
  404b98:	004073f0 	.word	0x004073f0
  404b9c:	004073c8 	.word	0x004073c8
  404ba0:	3ff00000 	.word	0x3ff00000
  404ba4:	401c0000 	.word	0x401c0000
  404ba8:	3fe00000 	.word	0x3fe00000
  404bac:	40240000 	.word	0x40240000
  404bb0:	40140000 	.word	0x40140000
  404bb4:	4650      	mov	r0, sl
  404bb6:	f7fd fab5 	bl	402124 <__aeabi_i2d>
  404bba:	463a      	mov	r2, r7
  404bbc:	4643      	mov	r3, r8
  404bbe:	f7fd fd15 	bl	4025ec <__aeabi_dmul>
  404bc2:	2200      	movs	r2, #0
  404bc4:	4bc1      	ldr	r3, [pc, #772]	; (404ecc <_dtoa_r+0xd9c>)
  404bc6:	f7fd f961 	bl	401e8c <__adddf3>
  404bca:	4605      	mov	r5, r0
  404bcc:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  404bd0:	4641      	mov	r1, r8
  404bd2:	2200      	movs	r2, #0
  404bd4:	4bbe      	ldr	r3, [pc, #760]	; (404ed0 <_dtoa_r+0xda0>)
  404bd6:	4638      	mov	r0, r7
  404bd8:	f7fd f956 	bl	401e88 <__aeabi_dsub>
  404bdc:	462a      	mov	r2, r5
  404bde:	4633      	mov	r3, r6
  404be0:	4682      	mov	sl, r0
  404be2:	468b      	mov	fp, r1
  404be4:	f001 fe2c 	bl	406840 <__aeabi_dcmpgt>
  404be8:	4680      	mov	r8, r0
  404bea:	2800      	cmp	r0, #0
  404bec:	f040 8110 	bne.w	404e10 <_dtoa_r+0xce0>
  404bf0:	462a      	mov	r2, r5
  404bf2:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  404bf6:	4650      	mov	r0, sl
  404bf8:	4659      	mov	r1, fp
  404bfa:	f001 fe03 	bl	406804 <__aeabi_dcmplt>
  404bfe:	b118      	cbz	r0, 404c08 <_dtoa_r+0xad8>
  404c00:	4646      	mov	r6, r8
  404c02:	e771      	b.n	404ae8 <_dtoa_r+0x9b8>
  404c04:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  404c08:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  404c0c:	f7ff bb8a 	b.w	404324 <_dtoa_r+0x1f4>
  404c10:	9804      	ldr	r0, [sp, #16]
  404c12:	f7ff babb 	b.w	40418c <_dtoa_r+0x5c>
  404c16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  404c18:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  404c1a:	970c      	str	r7, [sp, #48]	; 0x30
  404c1c:	1afb      	subs	r3, r7, r3
  404c1e:	441a      	add	r2, r3
  404c20:	920d      	str	r2, [sp, #52]	; 0x34
  404c22:	2700      	movs	r7, #0
  404c24:	e469      	b.n	4044fa <_dtoa_r+0x3ca>
  404c26:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  404c2a:	f04f 0a02 	mov.w	sl, #2
  404c2e:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  404c32:	e657      	b.n	4048e4 <_dtoa_r+0x7b4>
  404c34:	2100      	movs	r1, #0
  404c36:	2301      	movs	r3, #1
  404c38:	6461      	str	r1, [r4, #68]	; 0x44
  404c3a:	4620      	mov	r0, r4
  404c3c:	9325      	str	r3, [sp, #148]	; 0x94
  404c3e:	f000 fd75 	bl	40572c <_Balloc>
  404c42:	9b25      	ldr	r3, [sp, #148]	; 0x94
  404c44:	9004      	str	r0, [sp, #16]
  404c46:	6420      	str	r0, [r4, #64]	; 0x40
  404c48:	930a      	str	r3, [sp, #40]	; 0x28
  404c4a:	930f      	str	r3, [sp, #60]	; 0x3c
  404c4c:	e629      	b.n	4048a2 <_dtoa_r+0x772>
  404c4e:	2a00      	cmp	r2, #0
  404c50:	46d0      	mov	r8, sl
  404c52:	f8cd b018 	str.w	fp, [sp, #24]
  404c56:	469a      	mov	sl, r3
  404c58:	dd11      	ble.n	404c7e <_dtoa_r+0xb4e>
  404c5a:	4649      	mov	r1, r9
  404c5c:	2201      	movs	r2, #1
  404c5e:	4620      	mov	r0, r4
  404c60:	f000 ff10 	bl	405a84 <__lshift>
  404c64:	4641      	mov	r1, r8
  404c66:	4681      	mov	r9, r0
  404c68:	f000 ff5e 	bl	405b28 <__mcmp>
  404c6c:	2800      	cmp	r0, #0
  404c6e:	f340 8146 	ble.w	404efe <_dtoa_r+0xdce>
  404c72:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  404c76:	f000 8106 	beq.w	404e86 <_dtoa_r+0xd56>
  404c7a:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  404c7e:	46b3      	mov	fp, r6
  404c80:	f887 a000 	strb.w	sl, [r7]
  404c84:	1c7d      	adds	r5, r7, #1
  404c86:	9e06      	ldr	r6, [sp, #24]
  404c88:	e5d2      	b.n	404830 <_dtoa_r+0x700>
  404c8a:	d104      	bne.n	404c96 <_dtoa_r+0xb66>
  404c8c:	f01a 0f01 	tst.w	sl, #1
  404c90:	d001      	beq.n	404c96 <_dtoa_r+0xb66>
  404c92:	e5bd      	b.n	404810 <_dtoa_r+0x6e0>
  404c94:	4615      	mov	r5, r2
  404c96:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  404c9a:	2b30      	cmp	r3, #48	; 0x30
  404c9c:	f105 32ff 	add.w	r2, r5, #4294967295
  404ca0:	d0f8      	beq.n	404c94 <_dtoa_r+0xb64>
  404ca2:	e5c5      	b.n	404830 <_dtoa_r+0x700>
  404ca4:	9904      	ldr	r1, [sp, #16]
  404ca6:	2230      	movs	r2, #48	; 0x30
  404ca8:	700a      	strb	r2, [r1, #0]
  404caa:	9a02      	ldr	r2, [sp, #8]
  404cac:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  404cb0:	3201      	adds	r2, #1
  404cb2:	9202      	str	r2, [sp, #8]
  404cb4:	f7ff bbfc 	b.w	4044b0 <_dtoa_r+0x380>
  404cb8:	f000 80bb 	beq.w	404e32 <_dtoa_r+0xd02>
  404cbc:	9b02      	ldr	r3, [sp, #8]
  404cbe:	425d      	negs	r5, r3
  404cc0:	4b84      	ldr	r3, [pc, #528]	; (404ed4 <_dtoa_r+0xda4>)
  404cc2:	f005 020f 	and.w	r2, r5, #15
  404cc6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  404cca:	e9d3 2300 	ldrd	r2, r3, [r3]
  404cce:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  404cd2:	f7fd fc8b 	bl	4025ec <__aeabi_dmul>
  404cd6:	112d      	asrs	r5, r5, #4
  404cd8:	4607      	mov	r7, r0
  404cda:	4688      	mov	r8, r1
  404cdc:	f000 812c 	beq.w	404f38 <_dtoa_r+0xe08>
  404ce0:	4e7d      	ldr	r6, [pc, #500]	; (404ed8 <_dtoa_r+0xda8>)
  404ce2:	f04f 0a02 	mov.w	sl, #2
  404ce6:	07eb      	lsls	r3, r5, #31
  404ce8:	d509      	bpl.n	404cfe <_dtoa_r+0xbce>
  404cea:	4638      	mov	r0, r7
  404cec:	4641      	mov	r1, r8
  404cee:	e9d6 2300 	ldrd	r2, r3, [r6]
  404cf2:	f7fd fc7b 	bl	4025ec <__aeabi_dmul>
  404cf6:	f10a 0a01 	add.w	sl, sl, #1
  404cfa:	4607      	mov	r7, r0
  404cfc:	4688      	mov	r8, r1
  404cfe:	106d      	asrs	r5, r5, #1
  404d00:	f106 0608 	add.w	r6, r6, #8
  404d04:	d1ef      	bne.n	404ce6 <_dtoa_r+0xbb6>
  404d06:	e608      	b.n	40491a <_dtoa_r+0x7ea>
  404d08:	6871      	ldr	r1, [r6, #4]
  404d0a:	4620      	mov	r0, r4
  404d0c:	f000 fd0e 	bl	40572c <_Balloc>
  404d10:	6933      	ldr	r3, [r6, #16]
  404d12:	3302      	adds	r3, #2
  404d14:	009a      	lsls	r2, r3, #2
  404d16:	4605      	mov	r5, r0
  404d18:	f106 010c 	add.w	r1, r6, #12
  404d1c:	300c      	adds	r0, #12
  404d1e:	f000 fc5f 	bl	4055e0 <memcpy>
  404d22:	4629      	mov	r1, r5
  404d24:	2201      	movs	r2, #1
  404d26:	4620      	mov	r0, r4
  404d28:	f000 feac 	bl	405a84 <__lshift>
  404d2c:	9006      	str	r0, [sp, #24]
  404d2e:	e4b5      	b.n	40469c <_dtoa_r+0x56c>
  404d30:	2b39      	cmp	r3, #57	; 0x39
  404d32:	f8cd b018 	str.w	fp, [sp, #24]
  404d36:	46d0      	mov	r8, sl
  404d38:	f000 80a5 	beq.w	404e86 <_dtoa_r+0xd56>
  404d3c:	f103 0a01 	add.w	sl, r3, #1
  404d40:	46b3      	mov	fp, r6
  404d42:	f887 a000 	strb.w	sl, [r7]
  404d46:	1c7d      	adds	r5, r7, #1
  404d48:	9e06      	ldr	r6, [sp, #24]
  404d4a:	e571      	b.n	404830 <_dtoa_r+0x700>
  404d4c:	465a      	mov	r2, fp
  404d4e:	46d0      	mov	r8, sl
  404d50:	46b3      	mov	fp, r6
  404d52:	469a      	mov	sl, r3
  404d54:	4616      	mov	r6, r2
  404d56:	e54f      	b.n	4047f8 <_dtoa_r+0x6c8>
  404d58:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404d5a:	495e      	ldr	r1, [pc, #376]	; (404ed4 <_dtoa_r+0xda4>)
  404d5c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  404d60:	462a      	mov	r2, r5
  404d62:	4633      	mov	r3, r6
  404d64:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  404d68:	f7fd fc40 	bl	4025ec <__aeabi_dmul>
  404d6c:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  404d70:	4638      	mov	r0, r7
  404d72:	4641      	mov	r1, r8
  404d74:	f001 fd84 	bl	406880 <__aeabi_d2iz>
  404d78:	4605      	mov	r5, r0
  404d7a:	f7fd f9d3 	bl	402124 <__aeabi_i2d>
  404d7e:	460b      	mov	r3, r1
  404d80:	4602      	mov	r2, r0
  404d82:	4641      	mov	r1, r8
  404d84:	4638      	mov	r0, r7
  404d86:	f7fd f87f 	bl	401e88 <__aeabi_dsub>
  404d8a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404d8c:	460f      	mov	r7, r1
  404d8e:	9904      	ldr	r1, [sp, #16]
  404d90:	3530      	adds	r5, #48	; 0x30
  404d92:	2b01      	cmp	r3, #1
  404d94:	700d      	strb	r5, [r1, #0]
  404d96:	4606      	mov	r6, r0
  404d98:	f101 0501 	add.w	r5, r1, #1
  404d9c:	d026      	beq.n	404dec <_dtoa_r+0xcbc>
  404d9e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404da0:	9a04      	ldr	r2, [sp, #16]
  404da2:	f8df b13c 	ldr.w	fp, [pc, #316]	; 404ee0 <_dtoa_r+0xdb0>
  404da6:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  404daa:	4413      	add	r3, r2
  404dac:	f04f 0a00 	mov.w	sl, #0
  404db0:	4699      	mov	r9, r3
  404db2:	4652      	mov	r2, sl
  404db4:	465b      	mov	r3, fp
  404db6:	4630      	mov	r0, r6
  404db8:	4639      	mov	r1, r7
  404dba:	f7fd fc17 	bl	4025ec <__aeabi_dmul>
  404dbe:	460f      	mov	r7, r1
  404dc0:	4606      	mov	r6, r0
  404dc2:	f001 fd5d 	bl	406880 <__aeabi_d2iz>
  404dc6:	4680      	mov	r8, r0
  404dc8:	f7fd f9ac 	bl	402124 <__aeabi_i2d>
  404dcc:	f108 0830 	add.w	r8, r8, #48	; 0x30
  404dd0:	4602      	mov	r2, r0
  404dd2:	460b      	mov	r3, r1
  404dd4:	4630      	mov	r0, r6
  404dd6:	4639      	mov	r1, r7
  404dd8:	f7fd f856 	bl	401e88 <__aeabi_dsub>
  404ddc:	f805 8b01 	strb.w	r8, [r5], #1
  404de0:	454d      	cmp	r5, r9
  404de2:	4606      	mov	r6, r0
  404de4:	460f      	mov	r7, r1
  404de6:	d1e4      	bne.n	404db2 <_dtoa_r+0xc82>
  404de8:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  404dec:	4b3b      	ldr	r3, [pc, #236]	; (404edc <_dtoa_r+0xdac>)
  404dee:	2200      	movs	r2, #0
  404df0:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  404df4:	f7fd f84a 	bl	401e8c <__adddf3>
  404df8:	4632      	mov	r2, r6
  404dfa:	463b      	mov	r3, r7
  404dfc:	f001 fd02 	bl	406804 <__aeabi_dcmplt>
  404e00:	2800      	cmp	r0, #0
  404e02:	d046      	beq.n	404e92 <_dtoa_r+0xd62>
  404e04:	9b15      	ldr	r3, [sp, #84]	; 0x54
  404e06:	9302      	str	r3, [sp, #8]
  404e08:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  404e0c:	f7ff bb43 	b.w	404496 <_dtoa_r+0x366>
  404e10:	f04f 0800 	mov.w	r8, #0
  404e14:	4646      	mov	r6, r8
  404e16:	e6a9      	b.n	404b6c <_dtoa_r+0xa3c>
  404e18:	9b08      	ldr	r3, [sp, #32]
  404e1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  404e1c:	1a9d      	subs	r5, r3, r2
  404e1e:	2300      	movs	r3, #0
  404e20:	f7ff bb71 	b.w	404506 <_dtoa_r+0x3d6>
  404e24:	9b18      	ldr	r3, [sp, #96]	; 0x60
  404e26:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  404e28:	9d08      	ldr	r5, [sp, #32]
  404e2a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  404e2e:	f7ff bb6a 	b.w	404506 <_dtoa_r+0x3d6>
  404e32:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  404e36:	f04f 0a02 	mov.w	sl, #2
  404e3a:	e56e      	b.n	40491a <_dtoa_r+0x7ea>
  404e3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404e3e:	2b00      	cmp	r3, #0
  404e40:	f43f aeb8 	beq.w	404bb4 <_dtoa_r+0xa84>
  404e44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  404e46:	2b00      	cmp	r3, #0
  404e48:	f77f aede 	ble.w	404c08 <_dtoa_r+0xad8>
  404e4c:	2200      	movs	r2, #0
  404e4e:	4b24      	ldr	r3, [pc, #144]	; (404ee0 <_dtoa_r+0xdb0>)
  404e50:	4638      	mov	r0, r7
  404e52:	4641      	mov	r1, r8
  404e54:	f7fd fbca 	bl	4025ec <__aeabi_dmul>
  404e58:	4607      	mov	r7, r0
  404e5a:	4688      	mov	r8, r1
  404e5c:	f10a 0001 	add.w	r0, sl, #1
  404e60:	f7fd f960 	bl	402124 <__aeabi_i2d>
  404e64:	463a      	mov	r2, r7
  404e66:	4643      	mov	r3, r8
  404e68:	f7fd fbc0 	bl	4025ec <__aeabi_dmul>
  404e6c:	2200      	movs	r2, #0
  404e6e:	4b17      	ldr	r3, [pc, #92]	; (404ecc <_dtoa_r+0xd9c>)
  404e70:	f7fd f80c 	bl	401e8c <__adddf3>
  404e74:	9a02      	ldr	r2, [sp, #8]
  404e76:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  404e78:	9312      	str	r3, [sp, #72]	; 0x48
  404e7a:	3a01      	subs	r2, #1
  404e7c:	4605      	mov	r5, r0
  404e7e:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  404e82:	9215      	str	r2, [sp, #84]	; 0x54
  404e84:	e56a      	b.n	40495c <_dtoa_r+0x82c>
  404e86:	2239      	movs	r2, #57	; 0x39
  404e88:	46b3      	mov	fp, r6
  404e8a:	703a      	strb	r2, [r7, #0]
  404e8c:	9e06      	ldr	r6, [sp, #24]
  404e8e:	1c7d      	adds	r5, r7, #1
  404e90:	e4c0      	b.n	404814 <_dtoa_r+0x6e4>
  404e92:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  404e96:	2000      	movs	r0, #0
  404e98:	4910      	ldr	r1, [pc, #64]	; (404edc <_dtoa_r+0xdac>)
  404e9a:	f7fc fff5 	bl	401e88 <__aeabi_dsub>
  404e9e:	4632      	mov	r2, r6
  404ea0:	463b      	mov	r3, r7
  404ea2:	f001 fccd 	bl	406840 <__aeabi_dcmpgt>
  404ea6:	b908      	cbnz	r0, 404eac <_dtoa_r+0xd7c>
  404ea8:	e6ae      	b.n	404c08 <_dtoa_r+0xad8>
  404eaa:	4615      	mov	r5, r2
  404eac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  404eb0:	2b30      	cmp	r3, #48	; 0x30
  404eb2:	f105 32ff 	add.w	r2, r5, #4294967295
  404eb6:	d0f8      	beq.n	404eaa <_dtoa_r+0xd7a>
  404eb8:	e5d7      	b.n	404a6a <_dtoa_r+0x93a>
  404eba:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  404ebe:	9b15      	ldr	r3, [sp, #84]	; 0x54
  404ec0:	9302      	str	r3, [sp, #8]
  404ec2:	f7ff bae8 	b.w	404496 <_dtoa_r+0x366>
  404ec6:	970c      	str	r7, [sp, #48]	; 0x30
  404ec8:	f7ff bba5 	b.w	404616 <_dtoa_r+0x4e6>
  404ecc:	401c0000 	.word	0x401c0000
  404ed0:	40140000 	.word	0x40140000
  404ed4:	004073f0 	.word	0x004073f0
  404ed8:	004073c8 	.word	0x004073c8
  404edc:	3fe00000 	.word	0x3fe00000
  404ee0:	40240000 	.word	0x40240000
  404ee4:	2b39      	cmp	r3, #57	; 0x39
  404ee6:	f8cd b018 	str.w	fp, [sp, #24]
  404eea:	46d0      	mov	r8, sl
  404eec:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  404ef0:	469a      	mov	sl, r3
  404ef2:	d0c8      	beq.n	404e86 <_dtoa_r+0xd56>
  404ef4:	f1bb 0f00 	cmp.w	fp, #0
  404ef8:	f73f aebf 	bgt.w	404c7a <_dtoa_r+0xb4a>
  404efc:	e6bf      	b.n	404c7e <_dtoa_r+0xb4e>
  404efe:	f47f aebe 	bne.w	404c7e <_dtoa_r+0xb4e>
  404f02:	f01a 0f01 	tst.w	sl, #1
  404f06:	f43f aeba 	beq.w	404c7e <_dtoa_r+0xb4e>
  404f0a:	e6b2      	b.n	404c72 <_dtoa_r+0xb42>
  404f0c:	f04f 0800 	mov.w	r8, #0
  404f10:	4646      	mov	r6, r8
  404f12:	e5e9      	b.n	404ae8 <_dtoa_r+0x9b8>
  404f14:	4631      	mov	r1, r6
  404f16:	2300      	movs	r3, #0
  404f18:	220a      	movs	r2, #10
  404f1a:	4620      	mov	r0, r4
  404f1c:	f000 fc36 	bl	40578c <__multadd>
  404f20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  404f22:	2b00      	cmp	r3, #0
  404f24:	4606      	mov	r6, r0
  404f26:	dd0a      	ble.n	404f3e <_dtoa_r+0xe0e>
  404f28:	930a      	str	r3, [sp, #40]	; 0x28
  404f2a:	f7ff bbaa 	b.w	404682 <_dtoa_r+0x552>
  404f2e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404f30:	2b02      	cmp	r3, #2
  404f32:	dc23      	bgt.n	404f7c <_dtoa_r+0xe4c>
  404f34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  404f36:	e43b      	b.n	4047b0 <_dtoa_r+0x680>
  404f38:	f04f 0a02 	mov.w	sl, #2
  404f3c:	e4ed      	b.n	40491a <_dtoa_r+0x7ea>
  404f3e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404f40:	2b02      	cmp	r3, #2
  404f42:	dc1b      	bgt.n	404f7c <_dtoa_r+0xe4c>
  404f44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  404f46:	e7ef      	b.n	404f28 <_dtoa_r+0xdf8>
  404f48:	2500      	movs	r5, #0
  404f4a:	6465      	str	r5, [r4, #68]	; 0x44
  404f4c:	4629      	mov	r1, r5
  404f4e:	4620      	mov	r0, r4
  404f50:	f000 fbec 	bl	40572c <_Balloc>
  404f54:	f04f 33ff 	mov.w	r3, #4294967295
  404f58:	930a      	str	r3, [sp, #40]	; 0x28
  404f5a:	930f      	str	r3, [sp, #60]	; 0x3c
  404f5c:	2301      	movs	r3, #1
  404f5e:	9004      	str	r0, [sp, #16]
  404f60:	9525      	str	r5, [sp, #148]	; 0x94
  404f62:	6420      	str	r0, [r4, #64]	; 0x40
  404f64:	930b      	str	r3, [sp, #44]	; 0x2c
  404f66:	f7ff b9dd 	b.w	404324 <_dtoa_r+0x1f4>
  404f6a:	2501      	movs	r5, #1
  404f6c:	f7ff b9a5 	b.w	4042ba <_dtoa_r+0x18a>
  404f70:	f43f ab69 	beq.w	404646 <_dtoa_r+0x516>
  404f74:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  404f78:	f7ff bbf9 	b.w	40476e <_dtoa_r+0x63e>
  404f7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  404f7e:	930a      	str	r3, [sp, #40]	; 0x28
  404f80:	e5e5      	b.n	404b4e <_dtoa_r+0xa1e>
  404f82:	bf00      	nop

00404f84 <__libc_fini_array>:
  404f84:	b538      	push	{r3, r4, r5, lr}
  404f86:	4c0a      	ldr	r4, [pc, #40]	; (404fb0 <__libc_fini_array+0x2c>)
  404f88:	4d0a      	ldr	r5, [pc, #40]	; (404fb4 <__libc_fini_array+0x30>)
  404f8a:	1b64      	subs	r4, r4, r5
  404f8c:	10a4      	asrs	r4, r4, #2
  404f8e:	d00a      	beq.n	404fa6 <__libc_fini_array+0x22>
  404f90:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  404f94:	3b01      	subs	r3, #1
  404f96:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  404f9a:	3c01      	subs	r4, #1
  404f9c:	f855 3904 	ldr.w	r3, [r5], #-4
  404fa0:	4798      	blx	r3
  404fa2:	2c00      	cmp	r4, #0
  404fa4:	d1f9      	bne.n	404f9a <__libc_fini_array+0x16>
  404fa6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  404faa:	f002 bb1f 	b.w	4075ec <_fini>
  404fae:	bf00      	nop
  404fb0:	004075fc 	.word	0x004075fc
  404fb4:	004075f8 	.word	0x004075f8

00404fb8 <_localeconv_r>:
  404fb8:	4a04      	ldr	r2, [pc, #16]	; (404fcc <_localeconv_r+0x14>)
  404fba:	4b05      	ldr	r3, [pc, #20]	; (404fd0 <_localeconv_r+0x18>)
  404fbc:	6812      	ldr	r2, [r2, #0]
  404fbe:	6b50      	ldr	r0, [r2, #52]	; 0x34
  404fc0:	2800      	cmp	r0, #0
  404fc2:	bf08      	it	eq
  404fc4:	4618      	moveq	r0, r3
  404fc6:	30f0      	adds	r0, #240	; 0xf0
  404fc8:	4770      	bx	lr
  404fca:	bf00      	nop
  404fcc:	20400020 	.word	0x20400020
  404fd0:	20400864 	.word	0x20400864

00404fd4 <__retarget_lock_acquire_recursive>:
  404fd4:	4770      	bx	lr
  404fd6:	bf00      	nop

00404fd8 <__retarget_lock_release_recursive>:
  404fd8:	4770      	bx	lr
  404fda:	bf00      	nop

00404fdc <_malloc_r>:
  404fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404fe0:	f101 060b 	add.w	r6, r1, #11
  404fe4:	2e16      	cmp	r6, #22
  404fe6:	b083      	sub	sp, #12
  404fe8:	4605      	mov	r5, r0
  404fea:	f240 809e 	bls.w	40512a <_malloc_r+0x14e>
  404fee:	f036 0607 	bics.w	r6, r6, #7
  404ff2:	f100 80bd 	bmi.w	405170 <_malloc_r+0x194>
  404ff6:	42b1      	cmp	r1, r6
  404ff8:	f200 80ba 	bhi.w	405170 <_malloc_r+0x194>
  404ffc:	f000 fb8a 	bl	405714 <__malloc_lock>
  405000:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  405004:	f0c0 8293 	bcc.w	40552e <_malloc_r+0x552>
  405008:	0a73      	lsrs	r3, r6, #9
  40500a:	f000 80b8 	beq.w	40517e <_malloc_r+0x1a2>
  40500e:	2b04      	cmp	r3, #4
  405010:	f200 8179 	bhi.w	405306 <_malloc_r+0x32a>
  405014:	09b3      	lsrs	r3, r6, #6
  405016:	f103 0039 	add.w	r0, r3, #57	; 0x39
  40501a:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  40501e:	00c3      	lsls	r3, r0, #3
  405020:	4fbf      	ldr	r7, [pc, #764]	; (405320 <_malloc_r+0x344>)
  405022:	443b      	add	r3, r7
  405024:	f1a3 0108 	sub.w	r1, r3, #8
  405028:	685c      	ldr	r4, [r3, #4]
  40502a:	42a1      	cmp	r1, r4
  40502c:	d106      	bne.n	40503c <_malloc_r+0x60>
  40502e:	e00c      	b.n	40504a <_malloc_r+0x6e>
  405030:	2a00      	cmp	r2, #0
  405032:	f280 80aa 	bge.w	40518a <_malloc_r+0x1ae>
  405036:	68e4      	ldr	r4, [r4, #12]
  405038:	42a1      	cmp	r1, r4
  40503a:	d006      	beq.n	40504a <_malloc_r+0x6e>
  40503c:	6863      	ldr	r3, [r4, #4]
  40503e:	f023 0303 	bic.w	r3, r3, #3
  405042:	1b9a      	subs	r2, r3, r6
  405044:	2a0f      	cmp	r2, #15
  405046:	ddf3      	ble.n	405030 <_malloc_r+0x54>
  405048:	4670      	mov	r0, lr
  40504a:	693c      	ldr	r4, [r7, #16]
  40504c:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 405334 <_malloc_r+0x358>
  405050:	4574      	cmp	r4, lr
  405052:	f000 81ab 	beq.w	4053ac <_malloc_r+0x3d0>
  405056:	6863      	ldr	r3, [r4, #4]
  405058:	f023 0303 	bic.w	r3, r3, #3
  40505c:	1b9a      	subs	r2, r3, r6
  40505e:	2a0f      	cmp	r2, #15
  405060:	f300 8190 	bgt.w	405384 <_malloc_r+0x3a8>
  405064:	2a00      	cmp	r2, #0
  405066:	f8c7 e014 	str.w	lr, [r7, #20]
  40506a:	f8c7 e010 	str.w	lr, [r7, #16]
  40506e:	f280 809d 	bge.w	4051ac <_malloc_r+0x1d0>
  405072:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  405076:	f080 8161 	bcs.w	40533c <_malloc_r+0x360>
  40507a:	08db      	lsrs	r3, r3, #3
  40507c:	f103 0c01 	add.w	ip, r3, #1
  405080:	1099      	asrs	r1, r3, #2
  405082:	687a      	ldr	r2, [r7, #4]
  405084:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  405088:	f8c4 8008 	str.w	r8, [r4, #8]
  40508c:	2301      	movs	r3, #1
  40508e:	408b      	lsls	r3, r1
  405090:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  405094:	4313      	orrs	r3, r2
  405096:	3908      	subs	r1, #8
  405098:	60e1      	str	r1, [r4, #12]
  40509a:	607b      	str	r3, [r7, #4]
  40509c:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  4050a0:	f8c8 400c 	str.w	r4, [r8, #12]
  4050a4:	1082      	asrs	r2, r0, #2
  4050a6:	2401      	movs	r4, #1
  4050a8:	4094      	lsls	r4, r2
  4050aa:	429c      	cmp	r4, r3
  4050ac:	f200 808b 	bhi.w	4051c6 <_malloc_r+0x1ea>
  4050b0:	421c      	tst	r4, r3
  4050b2:	d106      	bne.n	4050c2 <_malloc_r+0xe6>
  4050b4:	f020 0003 	bic.w	r0, r0, #3
  4050b8:	0064      	lsls	r4, r4, #1
  4050ba:	421c      	tst	r4, r3
  4050bc:	f100 0004 	add.w	r0, r0, #4
  4050c0:	d0fa      	beq.n	4050b8 <_malloc_r+0xdc>
  4050c2:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  4050c6:	46cc      	mov	ip, r9
  4050c8:	4680      	mov	r8, r0
  4050ca:	f8dc 300c 	ldr.w	r3, [ip, #12]
  4050ce:	459c      	cmp	ip, r3
  4050d0:	d107      	bne.n	4050e2 <_malloc_r+0x106>
  4050d2:	e16d      	b.n	4053b0 <_malloc_r+0x3d4>
  4050d4:	2a00      	cmp	r2, #0
  4050d6:	f280 817b 	bge.w	4053d0 <_malloc_r+0x3f4>
  4050da:	68db      	ldr	r3, [r3, #12]
  4050dc:	459c      	cmp	ip, r3
  4050de:	f000 8167 	beq.w	4053b0 <_malloc_r+0x3d4>
  4050e2:	6859      	ldr	r1, [r3, #4]
  4050e4:	f021 0103 	bic.w	r1, r1, #3
  4050e8:	1b8a      	subs	r2, r1, r6
  4050ea:	2a0f      	cmp	r2, #15
  4050ec:	ddf2      	ble.n	4050d4 <_malloc_r+0xf8>
  4050ee:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  4050f2:	f8d3 8008 	ldr.w	r8, [r3, #8]
  4050f6:	9300      	str	r3, [sp, #0]
  4050f8:	199c      	adds	r4, r3, r6
  4050fa:	4628      	mov	r0, r5
  4050fc:	f046 0601 	orr.w	r6, r6, #1
  405100:	f042 0501 	orr.w	r5, r2, #1
  405104:	605e      	str	r6, [r3, #4]
  405106:	f8c8 c00c 	str.w	ip, [r8, #12]
  40510a:	f8cc 8008 	str.w	r8, [ip, #8]
  40510e:	617c      	str	r4, [r7, #20]
  405110:	613c      	str	r4, [r7, #16]
  405112:	f8c4 e00c 	str.w	lr, [r4, #12]
  405116:	f8c4 e008 	str.w	lr, [r4, #8]
  40511a:	6065      	str	r5, [r4, #4]
  40511c:	505a      	str	r2, [r3, r1]
  40511e:	f000 faff 	bl	405720 <__malloc_unlock>
  405122:	9b00      	ldr	r3, [sp, #0]
  405124:	f103 0408 	add.w	r4, r3, #8
  405128:	e01e      	b.n	405168 <_malloc_r+0x18c>
  40512a:	2910      	cmp	r1, #16
  40512c:	d820      	bhi.n	405170 <_malloc_r+0x194>
  40512e:	f000 faf1 	bl	405714 <__malloc_lock>
  405132:	2610      	movs	r6, #16
  405134:	2318      	movs	r3, #24
  405136:	2002      	movs	r0, #2
  405138:	4f79      	ldr	r7, [pc, #484]	; (405320 <_malloc_r+0x344>)
  40513a:	443b      	add	r3, r7
  40513c:	f1a3 0208 	sub.w	r2, r3, #8
  405140:	685c      	ldr	r4, [r3, #4]
  405142:	4294      	cmp	r4, r2
  405144:	f000 813d 	beq.w	4053c2 <_malloc_r+0x3e6>
  405148:	6863      	ldr	r3, [r4, #4]
  40514a:	68e1      	ldr	r1, [r4, #12]
  40514c:	68a6      	ldr	r6, [r4, #8]
  40514e:	f023 0303 	bic.w	r3, r3, #3
  405152:	4423      	add	r3, r4
  405154:	4628      	mov	r0, r5
  405156:	685a      	ldr	r2, [r3, #4]
  405158:	60f1      	str	r1, [r6, #12]
  40515a:	f042 0201 	orr.w	r2, r2, #1
  40515e:	608e      	str	r6, [r1, #8]
  405160:	605a      	str	r2, [r3, #4]
  405162:	f000 fadd 	bl	405720 <__malloc_unlock>
  405166:	3408      	adds	r4, #8
  405168:	4620      	mov	r0, r4
  40516a:	b003      	add	sp, #12
  40516c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405170:	2400      	movs	r4, #0
  405172:	230c      	movs	r3, #12
  405174:	4620      	mov	r0, r4
  405176:	602b      	str	r3, [r5, #0]
  405178:	b003      	add	sp, #12
  40517a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40517e:	2040      	movs	r0, #64	; 0x40
  405180:	f44f 7300 	mov.w	r3, #512	; 0x200
  405184:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  405188:	e74a      	b.n	405020 <_malloc_r+0x44>
  40518a:	4423      	add	r3, r4
  40518c:	68e1      	ldr	r1, [r4, #12]
  40518e:	685a      	ldr	r2, [r3, #4]
  405190:	68a6      	ldr	r6, [r4, #8]
  405192:	f042 0201 	orr.w	r2, r2, #1
  405196:	60f1      	str	r1, [r6, #12]
  405198:	4628      	mov	r0, r5
  40519a:	608e      	str	r6, [r1, #8]
  40519c:	605a      	str	r2, [r3, #4]
  40519e:	f000 fabf 	bl	405720 <__malloc_unlock>
  4051a2:	3408      	adds	r4, #8
  4051a4:	4620      	mov	r0, r4
  4051a6:	b003      	add	sp, #12
  4051a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4051ac:	4423      	add	r3, r4
  4051ae:	4628      	mov	r0, r5
  4051b0:	685a      	ldr	r2, [r3, #4]
  4051b2:	f042 0201 	orr.w	r2, r2, #1
  4051b6:	605a      	str	r2, [r3, #4]
  4051b8:	f000 fab2 	bl	405720 <__malloc_unlock>
  4051bc:	3408      	adds	r4, #8
  4051be:	4620      	mov	r0, r4
  4051c0:	b003      	add	sp, #12
  4051c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4051c6:	68bc      	ldr	r4, [r7, #8]
  4051c8:	6863      	ldr	r3, [r4, #4]
  4051ca:	f023 0803 	bic.w	r8, r3, #3
  4051ce:	45b0      	cmp	r8, r6
  4051d0:	d304      	bcc.n	4051dc <_malloc_r+0x200>
  4051d2:	eba8 0306 	sub.w	r3, r8, r6
  4051d6:	2b0f      	cmp	r3, #15
  4051d8:	f300 8085 	bgt.w	4052e6 <_malloc_r+0x30a>
  4051dc:	f8df 9158 	ldr.w	r9, [pc, #344]	; 405338 <_malloc_r+0x35c>
  4051e0:	4b50      	ldr	r3, [pc, #320]	; (405324 <_malloc_r+0x348>)
  4051e2:	f8d9 2000 	ldr.w	r2, [r9]
  4051e6:	681b      	ldr	r3, [r3, #0]
  4051e8:	3201      	adds	r2, #1
  4051ea:	4433      	add	r3, r6
  4051ec:	eb04 0a08 	add.w	sl, r4, r8
  4051f0:	f000 8155 	beq.w	40549e <_malloc_r+0x4c2>
  4051f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  4051f8:	330f      	adds	r3, #15
  4051fa:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  4051fe:	f02b 0b0f 	bic.w	fp, fp, #15
  405202:	4659      	mov	r1, fp
  405204:	4628      	mov	r0, r5
  405206:	f000 fd8b 	bl	405d20 <_sbrk_r>
  40520a:	1c41      	adds	r1, r0, #1
  40520c:	4602      	mov	r2, r0
  40520e:	f000 80fc 	beq.w	40540a <_malloc_r+0x42e>
  405212:	4582      	cmp	sl, r0
  405214:	f200 80f7 	bhi.w	405406 <_malloc_r+0x42a>
  405218:	4b43      	ldr	r3, [pc, #268]	; (405328 <_malloc_r+0x34c>)
  40521a:	6819      	ldr	r1, [r3, #0]
  40521c:	4459      	add	r1, fp
  40521e:	6019      	str	r1, [r3, #0]
  405220:	f000 814d 	beq.w	4054be <_malloc_r+0x4e2>
  405224:	f8d9 0000 	ldr.w	r0, [r9]
  405228:	3001      	adds	r0, #1
  40522a:	bf1b      	ittet	ne
  40522c:	eba2 0a0a 	subne.w	sl, r2, sl
  405230:	4451      	addne	r1, sl
  405232:	f8c9 2000 	streq.w	r2, [r9]
  405236:	6019      	strne	r1, [r3, #0]
  405238:	f012 0107 	ands.w	r1, r2, #7
  40523c:	f000 8115 	beq.w	40546a <_malloc_r+0x48e>
  405240:	f1c1 0008 	rsb	r0, r1, #8
  405244:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  405248:	4402      	add	r2, r0
  40524a:	3108      	adds	r1, #8
  40524c:	eb02 090b 	add.w	r9, r2, fp
  405250:	f3c9 090b 	ubfx	r9, r9, #0, #12
  405254:	eba1 0909 	sub.w	r9, r1, r9
  405258:	4649      	mov	r1, r9
  40525a:	4628      	mov	r0, r5
  40525c:	9301      	str	r3, [sp, #4]
  40525e:	9200      	str	r2, [sp, #0]
  405260:	f000 fd5e 	bl	405d20 <_sbrk_r>
  405264:	1c43      	adds	r3, r0, #1
  405266:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40526a:	f000 8143 	beq.w	4054f4 <_malloc_r+0x518>
  40526e:	1a80      	subs	r0, r0, r2
  405270:	4448      	add	r0, r9
  405272:	f040 0001 	orr.w	r0, r0, #1
  405276:	6819      	ldr	r1, [r3, #0]
  405278:	60ba      	str	r2, [r7, #8]
  40527a:	4449      	add	r1, r9
  40527c:	42bc      	cmp	r4, r7
  40527e:	6050      	str	r0, [r2, #4]
  405280:	6019      	str	r1, [r3, #0]
  405282:	d017      	beq.n	4052b4 <_malloc_r+0x2d8>
  405284:	f1b8 0f0f 	cmp.w	r8, #15
  405288:	f240 80fb 	bls.w	405482 <_malloc_r+0x4a6>
  40528c:	6860      	ldr	r0, [r4, #4]
  40528e:	f1a8 020c 	sub.w	r2, r8, #12
  405292:	f022 0207 	bic.w	r2, r2, #7
  405296:	eb04 0e02 	add.w	lr, r4, r2
  40529a:	f000 0001 	and.w	r0, r0, #1
  40529e:	f04f 0c05 	mov.w	ip, #5
  4052a2:	4310      	orrs	r0, r2
  4052a4:	2a0f      	cmp	r2, #15
  4052a6:	6060      	str	r0, [r4, #4]
  4052a8:	f8ce c004 	str.w	ip, [lr, #4]
  4052ac:	f8ce c008 	str.w	ip, [lr, #8]
  4052b0:	f200 8117 	bhi.w	4054e2 <_malloc_r+0x506>
  4052b4:	4b1d      	ldr	r3, [pc, #116]	; (40532c <_malloc_r+0x350>)
  4052b6:	68bc      	ldr	r4, [r7, #8]
  4052b8:	681a      	ldr	r2, [r3, #0]
  4052ba:	4291      	cmp	r1, r2
  4052bc:	bf88      	it	hi
  4052be:	6019      	strhi	r1, [r3, #0]
  4052c0:	4b1b      	ldr	r3, [pc, #108]	; (405330 <_malloc_r+0x354>)
  4052c2:	681a      	ldr	r2, [r3, #0]
  4052c4:	4291      	cmp	r1, r2
  4052c6:	6862      	ldr	r2, [r4, #4]
  4052c8:	bf88      	it	hi
  4052ca:	6019      	strhi	r1, [r3, #0]
  4052cc:	f022 0203 	bic.w	r2, r2, #3
  4052d0:	4296      	cmp	r6, r2
  4052d2:	eba2 0306 	sub.w	r3, r2, r6
  4052d6:	d801      	bhi.n	4052dc <_malloc_r+0x300>
  4052d8:	2b0f      	cmp	r3, #15
  4052da:	dc04      	bgt.n	4052e6 <_malloc_r+0x30a>
  4052dc:	4628      	mov	r0, r5
  4052de:	f000 fa1f 	bl	405720 <__malloc_unlock>
  4052e2:	2400      	movs	r4, #0
  4052e4:	e740      	b.n	405168 <_malloc_r+0x18c>
  4052e6:	19a2      	adds	r2, r4, r6
  4052e8:	f043 0301 	orr.w	r3, r3, #1
  4052ec:	f046 0601 	orr.w	r6, r6, #1
  4052f0:	6066      	str	r6, [r4, #4]
  4052f2:	4628      	mov	r0, r5
  4052f4:	60ba      	str	r2, [r7, #8]
  4052f6:	6053      	str	r3, [r2, #4]
  4052f8:	f000 fa12 	bl	405720 <__malloc_unlock>
  4052fc:	3408      	adds	r4, #8
  4052fe:	4620      	mov	r0, r4
  405300:	b003      	add	sp, #12
  405302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405306:	2b14      	cmp	r3, #20
  405308:	d971      	bls.n	4053ee <_malloc_r+0x412>
  40530a:	2b54      	cmp	r3, #84	; 0x54
  40530c:	f200 80a3 	bhi.w	405456 <_malloc_r+0x47a>
  405310:	0b33      	lsrs	r3, r6, #12
  405312:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  405316:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  40531a:	00c3      	lsls	r3, r0, #3
  40531c:	e680      	b.n	405020 <_malloc_r+0x44>
  40531e:	bf00      	nop
  405320:	20400454 	.word	0x20400454
  405324:	20400ca8 	.word	0x20400ca8
  405328:	20400c78 	.word	0x20400c78
  40532c:	20400ca0 	.word	0x20400ca0
  405330:	20400ca4 	.word	0x20400ca4
  405334:	2040045c 	.word	0x2040045c
  405338:	2040085c 	.word	0x2040085c
  40533c:	0a5a      	lsrs	r2, r3, #9
  40533e:	2a04      	cmp	r2, #4
  405340:	d95b      	bls.n	4053fa <_malloc_r+0x41e>
  405342:	2a14      	cmp	r2, #20
  405344:	f200 80ae 	bhi.w	4054a4 <_malloc_r+0x4c8>
  405348:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  40534c:	00c9      	lsls	r1, r1, #3
  40534e:	325b      	adds	r2, #91	; 0x5b
  405350:	eb07 0c01 	add.w	ip, r7, r1
  405354:	5879      	ldr	r1, [r7, r1]
  405356:	f1ac 0c08 	sub.w	ip, ip, #8
  40535a:	458c      	cmp	ip, r1
  40535c:	f000 8088 	beq.w	405470 <_malloc_r+0x494>
  405360:	684a      	ldr	r2, [r1, #4]
  405362:	f022 0203 	bic.w	r2, r2, #3
  405366:	4293      	cmp	r3, r2
  405368:	d273      	bcs.n	405452 <_malloc_r+0x476>
  40536a:	6889      	ldr	r1, [r1, #8]
  40536c:	458c      	cmp	ip, r1
  40536e:	d1f7      	bne.n	405360 <_malloc_r+0x384>
  405370:	f8dc 200c 	ldr.w	r2, [ip, #12]
  405374:	687b      	ldr	r3, [r7, #4]
  405376:	60e2      	str	r2, [r4, #12]
  405378:	f8c4 c008 	str.w	ip, [r4, #8]
  40537c:	6094      	str	r4, [r2, #8]
  40537e:	f8cc 400c 	str.w	r4, [ip, #12]
  405382:	e68f      	b.n	4050a4 <_malloc_r+0xc8>
  405384:	19a1      	adds	r1, r4, r6
  405386:	f046 0c01 	orr.w	ip, r6, #1
  40538a:	f042 0601 	orr.w	r6, r2, #1
  40538e:	f8c4 c004 	str.w	ip, [r4, #4]
  405392:	4628      	mov	r0, r5
  405394:	6179      	str	r1, [r7, #20]
  405396:	6139      	str	r1, [r7, #16]
  405398:	f8c1 e00c 	str.w	lr, [r1, #12]
  40539c:	f8c1 e008 	str.w	lr, [r1, #8]
  4053a0:	604e      	str	r6, [r1, #4]
  4053a2:	50e2      	str	r2, [r4, r3]
  4053a4:	f000 f9bc 	bl	405720 <__malloc_unlock>
  4053a8:	3408      	adds	r4, #8
  4053aa:	e6dd      	b.n	405168 <_malloc_r+0x18c>
  4053ac:	687b      	ldr	r3, [r7, #4]
  4053ae:	e679      	b.n	4050a4 <_malloc_r+0xc8>
  4053b0:	f108 0801 	add.w	r8, r8, #1
  4053b4:	f018 0f03 	tst.w	r8, #3
  4053b8:	f10c 0c08 	add.w	ip, ip, #8
  4053bc:	f47f ae85 	bne.w	4050ca <_malloc_r+0xee>
  4053c0:	e02d      	b.n	40541e <_malloc_r+0x442>
  4053c2:	68dc      	ldr	r4, [r3, #12]
  4053c4:	42a3      	cmp	r3, r4
  4053c6:	bf08      	it	eq
  4053c8:	3002      	addeq	r0, #2
  4053ca:	f43f ae3e 	beq.w	40504a <_malloc_r+0x6e>
  4053ce:	e6bb      	b.n	405148 <_malloc_r+0x16c>
  4053d0:	4419      	add	r1, r3
  4053d2:	461c      	mov	r4, r3
  4053d4:	684a      	ldr	r2, [r1, #4]
  4053d6:	68db      	ldr	r3, [r3, #12]
  4053d8:	f854 6f08 	ldr.w	r6, [r4, #8]!
  4053dc:	f042 0201 	orr.w	r2, r2, #1
  4053e0:	604a      	str	r2, [r1, #4]
  4053e2:	4628      	mov	r0, r5
  4053e4:	60f3      	str	r3, [r6, #12]
  4053e6:	609e      	str	r6, [r3, #8]
  4053e8:	f000 f99a 	bl	405720 <__malloc_unlock>
  4053ec:	e6bc      	b.n	405168 <_malloc_r+0x18c>
  4053ee:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  4053f2:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  4053f6:	00c3      	lsls	r3, r0, #3
  4053f8:	e612      	b.n	405020 <_malloc_r+0x44>
  4053fa:	099a      	lsrs	r2, r3, #6
  4053fc:	f102 0139 	add.w	r1, r2, #57	; 0x39
  405400:	00c9      	lsls	r1, r1, #3
  405402:	3238      	adds	r2, #56	; 0x38
  405404:	e7a4      	b.n	405350 <_malloc_r+0x374>
  405406:	42bc      	cmp	r4, r7
  405408:	d054      	beq.n	4054b4 <_malloc_r+0x4d8>
  40540a:	68bc      	ldr	r4, [r7, #8]
  40540c:	6862      	ldr	r2, [r4, #4]
  40540e:	f022 0203 	bic.w	r2, r2, #3
  405412:	e75d      	b.n	4052d0 <_malloc_r+0x2f4>
  405414:	f859 3908 	ldr.w	r3, [r9], #-8
  405418:	4599      	cmp	r9, r3
  40541a:	f040 8086 	bne.w	40552a <_malloc_r+0x54e>
  40541e:	f010 0f03 	tst.w	r0, #3
  405422:	f100 30ff 	add.w	r0, r0, #4294967295
  405426:	d1f5      	bne.n	405414 <_malloc_r+0x438>
  405428:	687b      	ldr	r3, [r7, #4]
  40542a:	ea23 0304 	bic.w	r3, r3, r4
  40542e:	607b      	str	r3, [r7, #4]
  405430:	0064      	lsls	r4, r4, #1
  405432:	429c      	cmp	r4, r3
  405434:	f63f aec7 	bhi.w	4051c6 <_malloc_r+0x1ea>
  405438:	2c00      	cmp	r4, #0
  40543a:	f43f aec4 	beq.w	4051c6 <_malloc_r+0x1ea>
  40543e:	421c      	tst	r4, r3
  405440:	4640      	mov	r0, r8
  405442:	f47f ae3e 	bne.w	4050c2 <_malloc_r+0xe6>
  405446:	0064      	lsls	r4, r4, #1
  405448:	421c      	tst	r4, r3
  40544a:	f100 0004 	add.w	r0, r0, #4
  40544e:	d0fa      	beq.n	405446 <_malloc_r+0x46a>
  405450:	e637      	b.n	4050c2 <_malloc_r+0xe6>
  405452:	468c      	mov	ip, r1
  405454:	e78c      	b.n	405370 <_malloc_r+0x394>
  405456:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  40545a:	d815      	bhi.n	405488 <_malloc_r+0x4ac>
  40545c:	0bf3      	lsrs	r3, r6, #15
  40545e:	f103 0078 	add.w	r0, r3, #120	; 0x78
  405462:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  405466:	00c3      	lsls	r3, r0, #3
  405468:	e5da      	b.n	405020 <_malloc_r+0x44>
  40546a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40546e:	e6ed      	b.n	40524c <_malloc_r+0x270>
  405470:	687b      	ldr	r3, [r7, #4]
  405472:	1092      	asrs	r2, r2, #2
  405474:	2101      	movs	r1, #1
  405476:	fa01 f202 	lsl.w	r2, r1, r2
  40547a:	4313      	orrs	r3, r2
  40547c:	607b      	str	r3, [r7, #4]
  40547e:	4662      	mov	r2, ip
  405480:	e779      	b.n	405376 <_malloc_r+0x39a>
  405482:	2301      	movs	r3, #1
  405484:	6053      	str	r3, [r2, #4]
  405486:	e729      	b.n	4052dc <_malloc_r+0x300>
  405488:	f240 5254 	movw	r2, #1364	; 0x554
  40548c:	4293      	cmp	r3, r2
  40548e:	d822      	bhi.n	4054d6 <_malloc_r+0x4fa>
  405490:	0cb3      	lsrs	r3, r6, #18
  405492:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  405496:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  40549a:	00c3      	lsls	r3, r0, #3
  40549c:	e5c0      	b.n	405020 <_malloc_r+0x44>
  40549e:	f103 0b10 	add.w	fp, r3, #16
  4054a2:	e6ae      	b.n	405202 <_malloc_r+0x226>
  4054a4:	2a54      	cmp	r2, #84	; 0x54
  4054a6:	d829      	bhi.n	4054fc <_malloc_r+0x520>
  4054a8:	0b1a      	lsrs	r2, r3, #12
  4054aa:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  4054ae:	00c9      	lsls	r1, r1, #3
  4054b0:	326e      	adds	r2, #110	; 0x6e
  4054b2:	e74d      	b.n	405350 <_malloc_r+0x374>
  4054b4:	4b20      	ldr	r3, [pc, #128]	; (405538 <_malloc_r+0x55c>)
  4054b6:	6819      	ldr	r1, [r3, #0]
  4054b8:	4459      	add	r1, fp
  4054ba:	6019      	str	r1, [r3, #0]
  4054bc:	e6b2      	b.n	405224 <_malloc_r+0x248>
  4054be:	f3ca 000b 	ubfx	r0, sl, #0, #12
  4054c2:	2800      	cmp	r0, #0
  4054c4:	f47f aeae 	bne.w	405224 <_malloc_r+0x248>
  4054c8:	eb08 030b 	add.w	r3, r8, fp
  4054cc:	68ba      	ldr	r2, [r7, #8]
  4054ce:	f043 0301 	orr.w	r3, r3, #1
  4054d2:	6053      	str	r3, [r2, #4]
  4054d4:	e6ee      	b.n	4052b4 <_malloc_r+0x2d8>
  4054d6:	207f      	movs	r0, #127	; 0x7f
  4054d8:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  4054dc:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  4054e0:	e59e      	b.n	405020 <_malloc_r+0x44>
  4054e2:	f104 0108 	add.w	r1, r4, #8
  4054e6:	4628      	mov	r0, r5
  4054e8:	9300      	str	r3, [sp, #0]
  4054ea:	f000 fe17 	bl	40611c <_free_r>
  4054ee:	9b00      	ldr	r3, [sp, #0]
  4054f0:	6819      	ldr	r1, [r3, #0]
  4054f2:	e6df      	b.n	4052b4 <_malloc_r+0x2d8>
  4054f4:	2001      	movs	r0, #1
  4054f6:	f04f 0900 	mov.w	r9, #0
  4054fa:	e6bc      	b.n	405276 <_malloc_r+0x29a>
  4054fc:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  405500:	d805      	bhi.n	40550e <_malloc_r+0x532>
  405502:	0bda      	lsrs	r2, r3, #15
  405504:	f102 0178 	add.w	r1, r2, #120	; 0x78
  405508:	00c9      	lsls	r1, r1, #3
  40550a:	3277      	adds	r2, #119	; 0x77
  40550c:	e720      	b.n	405350 <_malloc_r+0x374>
  40550e:	f240 5154 	movw	r1, #1364	; 0x554
  405512:	428a      	cmp	r2, r1
  405514:	d805      	bhi.n	405522 <_malloc_r+0x546>
  405516:	0c9a      	lsrs	r2, r3, #18
  405518:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  40551c:	00c9      	lsls	r1, r1, #3
  40551e:	327c      	adds	r2, #124	; 0x7c
  405520:	e716      	b.n	405350 <_malloc_r+0x374>
  405522:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  405526:	227e      	movs	r2, #126	; 0x7e
  405528:	e712      	b.n	405350 <_malloc_r+0x374>
  40552a:	687b      	ldr	r3, [r7, #4]
  40552c:	e780      	b.n	405430 <_malloc_r+0x454>
  40552e:	08f0      	lsrs	r0, r6, #3
  405530:	f106 0308 	add.w	r3, r6, #8
  405534:	e600      	b.n	405138 <_malloc_r+0x15c>
  405536:	bf00      	nop
  405538:	20400c78 	.word	0x20400c78
  40553c:	00000000 	.word	0x00000000

00405540 <memchr>:
  405540:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  405544:	2a10      	cmp	r2, #16
  405546:	db2b      	blt.n	4055a0 <memchr+0x60>
  405548:	f010 0f07 	tst.w	r0, #7
  40554c:	d008      	beq.n	405560 <memchr+0x20>
  40554e:	f810 3b01 	ldrb.w	r3, [r0], #1
  405552:	3a01      	subs	r2, #1
  405554:	428b      	cmp	r3, r1
  405556:	d02d      	beq.n	4055b4 <memchr+0x74>
  405558:	f010 0f07 	tst.w	r0, #7
  40555c:	b342      	cbz	r2, 4055b0 <memchr+0x70>
  40555e:	d1f6      	bne.n	40554e <memchr+0xe>
  405560:	b4f0      	push	{r4, r5, r6, r7}
  405562:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  405566:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40556a:	f022 0407 	bic.w	r4, r2, #7
  40556e:	f07f 0700 	mvns.w	r7, #0
  405572:	2300      	movs	r3, #0
  405574:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  405578:	3c08      	subs	r4, #8
  40557a:	ea85 0501 	eor.w	r5, r5, r1
  40557e:	ea86 0601 	eor.w	r6, r6, r1
  405582:	fa85 f547 	uadd8	r5, r5, r7
  405586:	faa3 f587 	sel	r5, r3, r7
  40558a:	fa86 f647 	uadd8	r6, r6, r7
  40558e:	faa5 f687 	sel	r6, r5, r7
  405592:	b98e      	cbnz	r6, 4055b8 <memchr+0x78>
  405594:	d1ee      	bne.n	405574 <memchr+0x34>
  405596:	bcf0      	pop	{r4, r5, r6, r7}
  405598:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40559c:	f002 0207 	and.w	r2, r2, #7
  4055a0:	b132      	cbz	r2, 4055b0 <memchr+0x70>
  4055a2:	f810 3b01 	ldrb.w	r3, [r0], #1
  4055a6:	3a01      	subs	r2, #1
  4055a8:	ea83 0301 	eor.w	r3, r3, r1
  4055ac:	b113      	cbz	r3, 4055b4 <memchr+0x74>
  4055ae:	d1f8      	bne.n	4055a2 <memchr+0x62>
  4055b0:	2000      	movs	r0, #0
  4055b2:	4770      	bx	lr
  4055b4:	3801      	subs	r0, #1
  4055b6:	4770      	bx	lr
  4055b8:	2d00      	cmp	r5, #0
  4055ba:	bf06      	itte	eq
  4055bc:	4635      	moveq	r5, r6
  4055be:	3803      	subeq	r0, #3
  4055c0:	3807      	subne	r0, #7
  4055c2:	f015 0f01 	tst.w	r5, #1
  4055c6:	d107      	bne.n	4055d8 <memchr+0x98>
  4055c8:	3001      	adds	r0, #1
  4055ca:	f415 7f80 	tst.w	r5, #256	; 0x100
  4055ce:	bf02      	ittt	eq
  4055d0:	3001      	addeq	r0, #1
  4055d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  4055d6:	3001      	addeq	r0, #1
  4055d8:	bcf0      	pop	{r4, r5, r6, r7}
  4055da:	3801      	subs	r0, #1
  4055dc:	4770      	bx	lr
  4055de:	bf00      	nop

004055e0 <memcpy>:
  4055e0:	4684      	mov	ip, r0
  4055e2:	ea41 0300 	orr.w	r3, r1, r0
  4055e6:	f013 0303 	ands.w	r3, r3, #3
  4055ea:	d16d      	bne.n	4056c8 <memcpy+0xe8>
  4055ec:	3a40      	subs	r2, #64	; 0x40
  4055ee:	d341      	bcc.n	405674 <memcpy+0x94>
  4055f0:	f851 3b04 	ldr.w	r3, [r1], #4
  4055f4:	f840 3b04 	str.w	r3, [r0], #4
  4055f8:	f851 3b04 	ldr.w	r3, [r1], #4
  4055fc:	f840 3b04 	str.w	r3, [r0], #4
  405600:	f851 3b04 	ldr.w	r3, [r1], #4
  405604:	f840 3b04 	str.w	r3, [r0], #4
  405608:	f851 3b04 	ldr.w	r3, [r1], #4
  40560c:	f840 3b04 	str.w	r3, [r0], #4
  405610:	f851 3b04 	ldr.w	r3, [r1], #4
  405614:	f840 3b04 	str.w	r3, [r0], #4
  405618:	f851 3b04 	ldr.w	r3, [r1], #4
  40561c:	f840 3b04 	str.w	r3, [r0], #4
  405620:	f851 3b04 	ldr.w	r3, [r1], #4
  405624:	f840 3b04 	str.w	r3, [r0], #4
  405628:	f851 3b04 	ldr.w	r3, [r1], #4
  40562c:	f840 3b04 	str.w	r3, [r0], #4
  405630:	f851 3b04 	ldr.w	r3, [r1], #4
  405634:	f840 3b04 	str.w	r3, [r0], #4
  405638:	f851 3b04 	ldr.w	r3, [r1], #4
  40563c:	f840 3b04 	str.w	r3, [r0], #4
  405640:	f851 3b04 	ldr.w	r3, [r1], #4
  405644:	f840 3b04 	str.w	r3, [r0], #4
  405648:	f851 3b04 	ldr.w	r3, [r1], #4
  40564c:	f840 3b04 	str.w	r3, [r0], #4
  405650:	f851 3b04 	ldr.w	r3, [r1], #4
  405654:	f840 3b04 	str.w	r3, [r0], #4
  405658:	f851 3b04 	ldr.w	r3, [r1], #4
  40565c:	f840 3b04 	str.w	r3, [r0], #4
  405660:	f851 3b04 	ldr.w	r3, [r1], #4
  405664:	f840 3b04 	str.w	r3, [r0], #4
  405668:	f851 3b04 	ldr.w	r3, [r1], #4
  40566c:	f840 3b04 	str.w	r3, [r0], #4
  405670:	3a40      	subs	r2, #64	; 0x40
  405672:	d2bd      	bcs.n	4055f0 <memcpy+0x10>
  405674:	3230      	adds	r2, #48	; 0x30
  405676:	d311      	bcc.n	40569c <memcpy+0xbc>
  405678:	f851 3b04 	ldr.w	r3, [r1], #4
  40567c:	f840 3b04 	str.w	r3, [r0], #4
  405680:	f851 3b04 	ldr.w	r3, [r1], #4
  405684:	f840 3b04 	str.w	r3, [r0], #4
  405688:	f851 3b04 	ldr.w	r3, [r1], #4
  40568c:	f840 3b04 	str.w	r3, [r0], #4
  405690:	f851 3b04 	ldr.w	r3, [r1], #4
  405694:	f840 3b04 	str.w	r3, [r0], #4
  405698:	3a10      	subs	r2, #16
  40569a:	d2ed      	bcs.n	405678 <memcpy+0x98>
  40569c:	320c      	adds	r2, #12
  40569e:	d305      	bcc.n	4056ac <memcpy+0xcc>
  4056a0:	f851 3b04 	ldr.w	r3, [r1], #4
  4056a4:	f840 3b04 	str.w	r3, [r0], #4
  4056a8:	3a04      	subs	r2, #4
  4056aa:	d2f9      	bcs.n	4056a0 <memcpy+0xc0>
  4056ac:	3204      	adds	r2, #4
  4056ae:	d008      	beq.n	4056c2 <memcpy+0xe2>
  4056b0:	07d2      	lsls	r2, r2, #31
  4056b2:	bf1c      	itt	ne
  4056b4:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4056b8:	f800 3b01 	strbne.w	r3, [r0], #1
  4056bc:	d301      	bcc.n	4056c2 <memcpy+0xe2>
  4056be:	880b      	ldrh	r3, [r1, #0]
  4056c0:	8003      	strh	r3, [r0, #0]
  4056c2:	4660      	mov	r0, ip
  4056c4:	4770      	bx	lr
  4056c6:	bf00      	nop
  4056c8:	2a08      	cmp	r2, #8
  4056ca:	d313      	bcc.n	4056f4 <memcpy+0x114>
  4056cc:	078b      	lsls	r3, r1, #30
  4056ce:	d08d      	beq.n	4055ec <memcpy+0xc>
  4056d0:	f010 0303 	ands.w	r3, r0, #3
  4056d4:	d08a      	beq.n	4055ec <memcpy+0xc>
  4056d6:	f1c3 0304 	rsb	r3, r3, #4
  4056da:	1ad2      	subs	r2, r2, r3
  4056dc:	07db      	lsls	r3, r3, #31
  4056de:	bf1c      	itt	ne
  4056e0:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4056e4:	f800 3b01 	strbne.w	r3, [r0], #1
  4056e8:	d380      	bcc.n	4055ec <memcpy+0xc>
  4056ea:	f831 3b02 	ldrh.w	r3, [r1], #2
  4056ee:	f820 3b02 	strh.w	r3, [r0], #2
  4056f2:	e77b      	b.n	4055ec <memcpy+0xc>
  4056f4:	3a04      	subs	r2, #4
  4056f6:	d3d9      	bcc.n	4056ac <memcpy+0xcc>
  4056f8:	3a01      	subs	r2, #1
  4056fa:	f811 3b01 	ldrb.w	r3, [r1], #1
  4056fe:	f800 3b01 	strb.w	r3, [r0], #1
  405702:	d2f9      	bcs.n	4056f8 <memcpy+0x118>
  405704:	780b      	ldrb	r3, [r1, #0]
  405706:	7003      	strb	r3, [r0, #0]
  405708:	784b      	ldrb	r3, [r1, #1]
  40570a:	7043      	strb	r3, [r0, #1]
  40570c:	788b      	ldrb	r3, [r1, #2]
  40570e:	7083      	strb	r3, [r0, #2]
  405710:	4660      	mov	r0, ip
  405712:	4770      	bx	lr

00405714 <__malloc_lock>:
  405714:	4801      	ldr	r0, [pc, #4]	; (40571c <__malloc_lock+0x8>)
  405716:	f7ff bc5d 	b.w	404fd4 <__retarget_lock_acquire_recursive>
  40571a:	bf00      	nop
  40571c:	20400cbc 	.word	0x20400cbc

00405720 <__malloc_unlock>:
  405720:	4801      	ldr	r0, [pc, #4]	; (405728 <__malloc_unlock+0x8>)
  405722:	f7ff bc59 	b.w	404fd8 <__retarget_lock_release_recursive>
  405726:	bf00      	nop
  405728:	20400cbc 	.word	0x20400cbc

0040572c <_Balloc>:
  40572c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40572e:	b570      	push	{r4, r5, r6, lr}
  405730:	4605      	mov	r5, r0
  405732:	460c      	mov	r4, r1
  405734:	b14b      	cbz	r3, 40574a <_Balloc+0x1e>
  405736:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  40573a:	b180      	cbz	r0, 40575e <_Balloc+0x32>
  40573c:	6802      	ldr	r2, [r0, #0]
  40573e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  405742:	2300      	movs	r3, #0
  405744:	6103      	str	r3, [r0, #16]
  405746:	60c3      	str	r3, [r0, #12]
  405748:	bd70      	pop	{r4, r5, r6, pc}
  40574a:	2221      	movs	r2, #33	; 0x21
  40574c:	2104      	movs	r1, #4
  40574e:	f000 fc65 	bl	40601c <_calloc_r>
  405752:	64e8      	str	r0, [r5, #76]	; 0x4c
  405754:	4603      	mov	r3, r0
  405756:	2800      	cmp	r0, #0
  405758:	d1ed      	bne.n	405736 <_Balloc+0xa>
  40575a:	2000      	movs	r0, #0
  40575c:	bd70      	pop	{r4, r5, r6, pc}
  40575e:	2101      	movs	r1, #1
  405760:	fa01 f604 	lsl.w	r6, r1, r4
  405764:	1d72      	adds	r2, r6, #5
  405766:	4628      	mov	r0, r5
  405768:	0092      	lsls	r2, r2, #2
  40576a:	f000 fc57 	bl	40601c <_calloc_r>
  40576e:	2800      	cmp	r0, #0
  405770:	d0f3      	beq.n	40575a <_Balloc+0x2e>
  405772:	6044      	str	r4, [r0, #4]
  405774:	6086      	str	r6, [r0, #8]
  405776:	e7e4      	b.n	405742 <_Balloc+0x16>

00405778 <_Bfree>:
  405778:	b131      	cbz	r1, 405788 <_Bfree+0x10>
  40577a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40577c:	684a      	ldr	r2, [r1, #4]
  40577e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  405782:	6008      	str	r0, [r1, #0]
  405784:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  405788:	4770      	bx	lr
  40578a:	bf00      	nop

0040578c <__multadd>:
  40578c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40578e:	690c      	ldr	r4, [r1, #16]
  405790:	b083      	sub	sp, #12
  405792:	460d      	mov	r5, r1
  405794:	4606      	mov	r6, r0
  405796:	f101 0e14 	add.w	lr, r1, #20
  40579a:	2700      	movs	r7, #0
  40579c:	f8de 0000 	ldr.w	r0, [lr]
  4057a0:	b281      	uxth	r1, r0
  4057a2:	fb02 3301 	mla	r3, r2, r1, r3
  4057a6:	0c01      	lsrs	r1, r0, #16
  4057a8:	0c18      	lsrs	r0, r3, #16
  4057aa:	fb02 0101 	mla	r1, r2, r1, r0
  4057ae:	b29b      	uxth	r3, r3
  4057b0:	3701      	adds	r7, #1
  4057b2:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  4057b6:	42bc      	cmp	r4, r7
  4057b8:	f84e 3b04 	str.w	r3, [lr], #4
  4057bc:	ea4f 4311 	mov.w	r3, r1, lsr #16
  4057c0:	dcec      	bgt.n	40579c <__multadd+0x10>
  4057c2:	b13b      	cbz	r3, 4057d4 <__multadd+0x48>
  4057c4:	68aa      	ldr	r2, [r5, #8]
  4057c6:	4294      	cmp	r4, r2
  4057c8:	da07      	bge.n	4057da <__multadd+0x4e>
  4057ca:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  4057ce:	3401      	adds	r4, #1
  4057d0:	6153      	str	r3, [r2, #20]
  4057d2:	612c      	str	r4, [r5, #16]
  4057d4:	4628      	mov	r0, r5
  4057d6:	b003      	add	sp, #12
  4057d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4057da:	6869      	ldr	r1, [r5, #4]
  4057dc:	9301      	str	r3, [sp, #4]
  4057de:	3101      	adds	r1, #1
  4057e0:	4630      	mov	r0, r6
  4057e2:	f7ff ffa3 	bl	40572c <_Balloc>
  4057e6:	692a      	ldr	r2, [r5, #16]
  4057e8:	3202      	adds	r2, #2
  4057ea:	f105 010c 	add.w	r1, r5, #12
  4057ee:	4607      	mov	r7, r0
  4057f0:	0092      	lsls	r2, r2, #2
  4057f2:	300c      	adds	r0, #12
  4057f4:	f7ff fef4 	bl	4055e0 <memcpy>
  4057f8:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  4057fa:	6869      	ldr	r1, [r5, #4]
  4057fc:	9b01      	ldr	r3, [sp, #4]
  4057fe:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  405802:	6028      	str	r0, [r5, #0]
  405804:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  405808:	463d      	mov	r5, r7
  40580a:	e7de      	b.n	4057ca <__multadd+0x3e>

0040580c <__hi0bits>:
  40580c:	0c02      	lsrs	r2, r0, #16
  40580e:	0412      	lsls	r2, r2, #16
  405810:	4603      	mov	r3, r0
  405812:	b9b2      	cbnz	r2, 405842 <__hi0bits+0x36>
  405814:	0403      	lsls	r3, r0, #16
  405816:	2010      	movs	r0, #16
  405818:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  40581c:	bf04      	itt	eq
  40581e:	021b      	lsleq	r3, r3, #8
  405820:	3008      	addeq	r0, #8
  405822:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  405826:	bf04      	itt	eq
  405828:	011b      	lsleq	r3, r3, #4
  40582a:	3004      	addeq	r0, #4
  40582c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  405830:	bf04      	itt	eq
  405832:	009b      	lsleq	r3, r3, #2
  405834:	3002      	addeq	r0, #2
  405836:	2b00      	cmp	r3, #0
  405838:	db02      	blt.n	405840 <__hi0bits+0x34>
  40583a:	005b      	lsls	r3, r3, #1
  40583c:	d403      	bmi.n	405846 <__hi0bits+0x3a>
  40583e:	2020      	movs	r0, #32
  405840:	4770      	bx	lr
  405842:	2000      	movs	r0, #0
  405844:	e7e8      	b.n	405818 <__hi0bits+0xc>
  405846:	3001      	adds	r0, #1
  405848:	4770      	bx	lr
  40584a:	bf00      	nop

0040584c <__lo0bits>:
  40584c:	6803      	ldr	r3, [r0, #0]
  40584e:	f013 0207 	ands.w	r2, r3, #7
  405852:	4601      	mov	r1, r0
  405854:	d007      	beq.n	405866 <__lo0bits+0x1a>
  405856:	07da      	lsls	r2, r3, #31
  405858:	d421      	bmi.n	40589e <__lo0bits+0x52>
  40585a:	0798      	lsls	r0, r3, #30
  40585c:	d421      	bmi.n	4058a2 <__lo0bits+0x56>
  40585e:	089b      	lsrs	r3, r3, #2
  405860:	600b      	str	r3, [r1, #0]
  405862:	2002      	movs	r0, #2
  405864:	4770      	bx	lr
  405866:	b298      	uxth	r0, r3
  405868:	b198      	cbz	r0, 405892 <__lo0bits+0x46>
  40586a:	4610      	mov	r0, r2
  40586c:	f013 0fff 	tst.w	r3, #255	; 0xff
  405870:	bf04      	itt	eq
  405872:	0a1b      	lsreq	r3, r3, #8
  405874:	3008      	addeq	r0, #8
  405876:	071a      	lsls	r2, r3, #28
  405878:	bf04      	itt	eq
  40587a:	091b      	lsreq	r3, r3, #4
  40587c:	3004      	addeq	r0, #4
  40587e:	079a      	lsls	r2, r3, #30
  405880:	bf04      	itt	eq
  405882:	089b      	lsreq	r3, r3, #2
  405884:	3002      	addeq	r0, #2
  405886:	07da      	lsls	r2, r3, #31
  405888:	d407      	bmi.n	40589a <__lo0bits+0x4e>
  40588a:	085b      	lsrs	r3, r3, #1
  40588c:	d104      	bne.n	405898 <__lo0bits+0x4c>
  40588e:	2020      	movs	r0, #32
  405890:	4770      	bx	lr
  405892:	0c1b      	lsrs	r3, r3, #16
  405894:	2010      	movs	r0, #16
  405896:	e7e9      	b.n	40586c <__lo0bits+0x20>
  405898:	3001      	adds	r0, #1
  40589a:	600b      	str	r3, [r1, #0]
  40589c:	4770      	bx	lr
  40589e:	2000      	movs	r0, #0
  4058a0:	4770      	bx	lr
  4058a2:	085b      	lsrs	r3, r3, #1
  4058a4:	600b      	str	r3, [r1, #0]
  4058a6:	2001      	movs	r0, #1
  4058a8:	4770      	bx	lr
  4058aa:	bf00      	nop

004058ac <__i2b>:
  4058ac:	b510      	push	{r4, lr}
  4058ae:	460c      	mov	r4, r1
  4058b0:	2101      	movs	r1, #1
  4058b2:	f7ff ff3b 	bl	40572c <_Balloc>
  4058b6:	2201      	movs	r2, #1
  4058b8:	6144      	str	r4, [r0, #20]
  4058ba:	6102      	str	r2, [r0, #16]
  4058bc:	bd10      	pop	{r4, pc}
  4058be:	bf00      	nop

004058c0 <__multiply>:
  4058c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4058c4:	690c      	ldr	r4, [r1, #16]
  4058c6:	6915      	ldr	r5, [r2, #16]
  4058c8:	42ac      	cmp	r4, r5
  4058ca:	b083      	sub	sp, #12
  4058cc:	468b      	mov	fp, r1
  4058ce:	4616      	mov	r6, r2
  4058d0:	da04      	bge.n	4058dc <__multiply+0x1c>
  4058d2:	4622      	mov	r2, r4
  4058d4:	46b3      	mov	fp, r6
  4058d6:	462c      	mov	r4, r5
  4058d8:	460e      	mov	r6, r1
  4058da:	4615      	mov	r5, r2
  4058dc:	f8db 3008 	ldr.w	r3, [fp, #8]
  4058e0:	f8db 1004 	ldr.w	r1, [fp, #4]
  4058e4:	eb04 0805 	add.w	r8, r4, r5
  4058e8:	4598      	cmp	r8, r3
  4058ea:	bfc8      	it	gt
  4058ec:	3101      	addgt	r1, #1
  4058ee:	f7ff ff1d 	bl	40572c <_Balloc>
  4058f2:	f100 0914 	add.w	r9, r0, #20
  4058f6:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  4058fa:	45d1      	cmp	r9, sl
  4058fc:	9000      	str	r0, [sp, #0]
  4058fe:	d205      	bcs.n	40590c <__multiply+0x4c>
  405900:	464b      	mov	r3, r9
  405902:	2100      	movs	r1, #0
  405904:	f843 1b04 	str.w	r1, [r3], #4
  405908:	459a      	cmp	sl, r3
  40590a:	d8fb      	bhi.n	405904 <__multiply+0x44>
  40590c:	f106 0c14 	add.w	ip, r6, #20
  405910:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  405914:	f10b 0b14 	add.w	fp, fp, #20
  405918:	459c      	cmp	ip, r3
  40591a:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  40591e:	d24c      	bcs.n	4059ba <__multiply+0xfa>
  405920:	f8cd a004 	str.w	sl, [sp, #4]
  405924:	469a      	mov	sl, r3
  405926:	f8dc 5000 	ldr.w	r5, [ip]
  40592a:	b2af      	uxth	r7, r5
  40592c:	b1ef      	cbz	r7, 40596a <__multiply+0xaa>
  40592e:	2100      	movs	r1, #0
  405930:	464d      	mov	r5, r9
  405932:	465e      	mov	r6, fp
  405934:	460c      	mov	r4, r1
  405936:	f856 2b04 	ldr.w	r2, [r6], #4
  40593a:	6828      	ldr	r0, [r5, #0]
  40593c:	b293      	uxth	r3, r2
  40593e:	b281      	uxth	r1, r0
  405940:	fb07 1303 	mla	r3, r7, r3, r1
  405944:	0c12      	lsrs	r2, r2, #16
  405946:	0c01      	lsrs	r1, r0, #16
  405948:	4423      	add	r3, r4
  40594a:	fb07 1102 	mla	r1, r7, r2, r1
  40594e:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  405952:	b29b      	uxth	r3, r3
  405954:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  405958:	45b6      	cmp	lr, r6
  40595a:	f845 3b04 	str.w	r3, [r5], #4
  40595e:	ea4f 4411 	mov.w	r4, r1, lsr #16
  405962:	d8e8      	bhi.n	405936 <__multiply+0x76>
  405964:	602c      	str	r4, [r5, #0]
  405966:	f8dc 5000 	ldr.w	r5, [ip]
  40596a:	0c2d      	lsrs	r5, r5, #16
  40596c:	d01d      	beq.n	4059aa <__multiply+0xea>
  40596e:	f8d9 3000 	ldr.w	r3, [r9]
  405972:	4648      	mov	r0, r9
  405974:	461c      	mov	r4, r3
  405976:	4659      	mov	r1, fp
  405978:	2200      	movs	r2, #0
  40597a:	880e      	ldrh	r6, [r1, #0]
  40597c:	0c24      	lsrs	r4, r4, #16
  40597e:	fb05 4406 	mla	r4, r5, r6, r4
  405982:	4422      	add	r2, r4
  405984:	b29b      	uxth	r3, r3
  405986:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40598a:	f840 3b04 	str.w	r3, [r0], #4
  40598e:	f851 3b04 	ldr.w	r3, [r1], #4
  405992:	6804      	ldr	r4, [r0, #0]
  405994:	0c1b      	lsrs	r3, r3, #16
  405996:	b2a6      	uxth	r6, r4
  405998:	fb05 6303 	mla	r3, r5, r3, r6
  40599c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  4059a0:	458e      	cmp	lr, r1
  4059a2:	ea4f 4213 	mov.w	r2, r3, lsr #16
  4059a6:	d8e8      	bhi.n	40597a <__multiply+0xba>
  4059a8:	6003      	str	r3, [r0, #0]
  4059aa:	f10c 0c04 	add.w	ip, ip, #4
  4059ae:	45e2      	cmp	sl, ip
  4059b0:	f109 0904 	add.w	r9, r9, #4
  4059b4:	d8b7      	bhi.n	405926 <__multiply+0x66>
  4059b6:	f8dd a004 	ldr.w	sl, [sp, #4]
  4059ba:	f1b8 0f00 	cmp.w	r8, #0
  4059be:	dd0b      	ble.n	4059d8 <__multiply+0x118>
  4059c0:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  4059c4:	f1aa 0a04 	sub.w	sl, sl, #4
  4059c8:	b11b      	cbz	r3, 4059d2 <__multiply+0x112>
  4059ca:	e005      	b.n	4059d8 <__multiply+0x118>
  4059cc:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  4059d0:	b913      	cbnz	r3, 4059d8 <__multiply+0x118>
  4059d2:	f1b8 0801 	subs.w	r8, r8, #1
  4059d6:	d1f9      	bne.n	4059cc <__multiply+0x10c>
  4059d8:	9800      	ldr	r0, [sp, #0]
  4059da:	f8c0 8010 	str.w	r8, [r0, #16]
  4059de:	b003      	add	sp, #12
  4059e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

004059e4 <__pow5mult>:
  4059e4:	f012 0303 	ands.w	r3, r2, #3
  4059e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4059ec:	4614      	mov	r4, r2
  4059ee:	4607      	mov	r7, r0
  4059f0:	d12e      	bne.n	405a50 <__pow5mult+0x6c>
  4059f2:	460d      	mov	r5, r1
  4059f4:	10a4      	asrs	r4, r4, #2
  4059f6:	d01c      	beq.n	405a32 <__pow5mult+0x4e>
  4059f8:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  4059fa:	b396      	cbz	r6, 405a62 <__pow5mult+0x7e>
  4059fc:	07e3      	lsls	r3, r4, #31
  4059fe:	f04f 0800 	mov.w	r8, #0
  405a02:	d406      	bmi.n	405a12 <__pow5mult+0x2e>
  405a04:	1064      	asrs	r4, r4, #1
  405a06:	d014      	beq.n	405a32 <__pow5mult+0x4e>
  405a08:	6830      	ldr	r0, [r6, #0]
  405a0a:	b1a8      	cbz	r0, 405a38 <__pow5mult+0x54>
  405a0c:	4606      	mov	r6, r0
  405a0e:	07e3      	lsls	r3, r4, #31
  405a10:	d5f8      	bpl.n	405a04 <__pow5mult+0x20>
  405a12:	4632      	mov	r2, r6
  405a14:	4629      	mov	r1, r5
  405a16:	4638      	mov	r0, r7
  405a18:	f7ff ff52 	bl	4058c0 <__multiply>
  405a1c:	b1b5      	cbz	r5, 405a4c <__pow5mult+0x68>
  405a1e:	686a      	ldr	r2, [r5, #4]
  405a20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  405a22:	1064      	asrs	r4, r4, #1
  405a24:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  405a28:	6029      	str	r1, [r5, #0]
  405a2a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  405a2e:	4605      	mov	r5, r0
  405a30:	d1ea      	bne.n	405a08 <__pow5mult+0x24>
  405a32:	4628      	mov	r0, r5
  405a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405a38:	4632      	mov	r2, r6
  405a3a:	4631      	mov	r1, r6
  405a3c:	4638      	mov	r0, r7
  405a3e:	f7ff ff3f 	bl	4058c0 <__multiply>
  405a42:	6030      	str	r0, [r6, #0]
  405a44:	f8c0 8000 	str.w	r8, [r0]
  405a48:	4606      	mov	r6, r0
  405a4a:	e7e0      	b.n	405a0e <__pow5mult+0x2a>
  405a4c:	4605      	mov	r5, r0
  405a4e:	e7d9      	b.n	405a04 <__pow5mult+0x20>
  405a50:	1e5a      	subs	r2, r3, #1
  405a52:	4d0b      	ldr	r5, [pc, #44]	; (405a80 <__pow5mult+0x9c>)
  405a54:	2300      	movs	r3, #0
  405a56:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  405a5a:	f7ff fe97 	bl	40578c <__multadd>
  405a5e:	4605      	mov	r5, r0
  405a60:	e7c8      	b.n	4059f4 <__pow5mult+0x10>
  405a62:	2101      	movs	r1, #1
  405a64:	4638      	mov	r0, r7
  405a66:	f7ff fe61 	bl	40572c <_Balloc>
  405a6a:	f240 2171 	movw	r1, #625	; 0x271
  405a6e:	2201      	movs	r2, #1
  405a70:	2300      	movs	r3, #0
  405a72:	6141      	str	r1, [r0, #20]
  405a74:	6102      	str	r2, [r0, #16]
  405a76:	4606      	mov	r6, r0
  405a78:	64b8      	str	r0, [r7, #72]	; 0x48
  405a7a:	6003      	str	r3, [r0, #0]
  405a7c:	e7be      	b.n	4059fc <__pow5mult+0x18>
  405a7e:	bf00      	nop
  405a80:	004074b8 	.word	0x004074b8

00405a84 <__lshift>:
  405a84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  405a88:	4691      	mov	r9, r2
  405a8a:	690a      	ldr	r2, [r1, #16]
  405a8c:	688b      	ldr	r3, [r1, #8]
  405a8e:	ea4f 1469 	mov.w	r4, r9, asr #5
  405a92:	eb04 0802 	add.w	r8, r4, r2
  405a96:	f108 0501 	add.w	r5, r8, #1
  405a9a:	429d      	cmp	r5, r3
  405a9c:	460e      	mov	r6, r1
  405a9e:	4607      	mov	r7, r0
  405aa0:	6849      	ldr	r1, [r1, #4]
  405aa2:	dd04      	ble.n	405aae <__lshift+0x2a>
  405aa4:	005b      	lsls	r3, r3, #1
  405aa6:	429d      	cmp	r5, r3
  405aa8:	f101 0101 	add.w	r1, r1, #1
  405aac:	dcfa      	bgt.n	405aa4 <__lshift+0x20>
  405aae:	4638      	mov	r0, r7
  405ab0:	f7ff fe3c 	bl	40572c <_Balloc>
  405ab4:	2c00      	cmp	r4, #0
  405ab6:	f100 0314 	add.w	r3, r0, #20
  405aba:	dd06      	ble.n	405aca <__lshift+0x46>
  405abc:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  405ac0:	2100      	movs	r1, #0
  405ac2:	f843 1b04 	str.w	r1, [r3], #4
  405ac6:	429a      	cmp	r2, r3
  405ac8:	d1fb      	bne.n	405ac2 <__lshift+0x3e>
  405aca:	6934      	ldr	r4, [r6, #16]
  405acc:	f106 0114 	add.w	r1, r6, #20
  405ad0:	f019 091f 	ands.w	r9, r9, #31
  405ad4:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  405ad8:	d01d      	beq.n	405b16 <__lshift+0x92>
  405ada:	f1c9 0c20 	rsb	ip, r9, #32
  405ade:	2200      	movs	r2, #0
  405ae0:	680c      	ldr	r4, [r1, #0]
  405ae2:	fa04 f409 	lsl.w	r4, r4, r9
  405ae6:	4314      	orrs	r4, r2
  405ae8:	f843 4b04 	str.w	r4, [r3], #4
  405aec:	f851 2b04 	ldr.w	r2, [r1], #4
  405af0:	458e      	cmp	lr, r1
  405af2:	fa22 f20c 	lsr.w	r2, r2, ip
  405af6:	d8f3      	bhi.n	405ae0 <__lshift+0x5c>
  405af8:	601a      	str	r2, [r3, #0]
  405afa:	b10a      	cbz	r2, 405b00 <__lshift+0x7c>
  405afc:	f108 0502 	add.w	r5, r8, #2
  405b00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  405b02:	6872      	ldr	r2, [r6, #4]
  405b04:	3d01      	subs	r5, #1
  405b06:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  405b0a:	6105      	str	r5, [r0, #16]
  405b0c:	6031      	str	r1, [r6, #0]
  405b0e:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  405b12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405b16:	3b04      	subs	r3, #4
  405b18:	f851 2b04 	ldr.w	r2, [r1], #4
  405b1c:	f843 2f04 	str.w	r2, [r3, #4]!
  405b20:	458e      	cmp	lr, r1
  405b22:	d8f9      	bhi.n	405b18 <__lshift+0x94>
  405b24:	e7ec      	b.n	405b00 <__lshift+0x7c>
  405b26:	bf00      	nop

00405b28 <__mcmp>:
  405b28:	b430      	push	{r4, r5}
  405b2a:	690b      	ldr	r3, [r1, #16]
  405b2c:	4605      	mov	r5, r0
  405b2e:	6900      	ldr	r0, [r0, #16]
  405b30:	1ac0      	subs	r0, r0, r3
  405b32:	d10f      	bne.n	405b54 <__mcmp+0x2c>
  405b34:	009b      	lsls	r3, r3, #2
  405b36:	3514      	adds	r5, #20
  405b38:	3114      	adds	r1, #20
  405b3a:	4419      	add	r1, r3
  405b3c:	442b      	add	r3, r5
  405b3e:	e001      	b.n	405b44 <__mcmp+0x1c>
  405b40:	429d      	cmp	r5, r3
  405b42:	d207      	bcs.n	405b54 <__mcmp+0x2c>
  405b44:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  405b48:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  405b4c:	4294      	cmp	r4, r2
  405b4e:	d0f7      	beq.n	405b40 <__mcmp+0x18>
  405b50:	d302      	bcc.n	405b58 <__mcmp+0x30>
  405b52:	2001      	movs	r0, #1
  405b54:	bc30      	pop	{r4, r5}
  405b56:	4770      	bx	lr
  405b58:	f04f 30ff 	mov.w	r0, #4294967295
  405b5c:	e7fa      	b.n	405b54 <__mcmp+0x2c>
  405b5e:	bf00      	nop

00405b60 <__mdiff>:
  405b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405b64:	690f      	ldr	r7, [r1, #16]
  405b66:	460e      	mov	r6, r1
  405b68:	6911      	ldr	r1, [r2, #16]
  405b6a:	1a7f      	subs	r7, r7, r1
  405b6c:	2f00      	cmp	r7, #0
  405b6e:	4690      	mov	r8, r2
  405b70:	d117      	bne.n	405ba2 <__mdiff+0x42>
  405b72:	0089      	lsls	r1, r1, #2
  405b74:	f106 0514 	add.w	r5, r6, #20
  405b78:	f102 0e14 	add.w	lr, r2, #20
  405b7c:	186b      	adds	r3, r5, r1
  405b7e:	4471      	add	r1, lr
  405b80:	e001      	b.n	405b86 <__mdiff+0x26>
  405b82:	429d      	cmp	r5, r3
  405b84:	d25c      	bcs.n	405c40 <__mdiff+0xe0>
  405b86:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  405b8a:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  405b8e:	42a2      	cmp	r2, r4
  405b90:	d0f7      	beq.n	405b82 <__mdiff+0x22>
  405b92:	d25e      	bcs.n	405c52 <__mdiff+0xf2>
  405b94:	4633      	mov	r3, r6
  405b96:	462c      	mov	r4, r5
  405b98:	4646      	mov	r6, r8
  405b9a:	4675      	mov	r5, lr
  405b9c:	4698      	mov	r8, r3
  405b9e:	2701      	movs	r7, #1
  405ba0:	e005      	b.n	405bae <__mdiff+0x4e>
  405ba2:	db58      	blt.n	405c56 <__mdiff+0xf6>
  405ba4:	f106 0514 	add.w	r5, r6, #20
  405ba8:	f108 0414 	add.w	r4, r8, #20
  405bac:	2700      	movs	r7, #0
  405bae:	6871      	ldr	r1, [r6, #4]
  405bb0:	f7ff fdbc 	bl	40572c <_Balloc>
  405bb4:	f8d8 3010 	ldr.w	r3, [r8, #16]
  405bb8:	6936      	ldr	r6, [r6, #16]
  405bba:	60c7      	str	r7, [r0, #12]
  405bbc:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  405bc0:	46a6      	mov	lr, r4
  405bc2:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  405bc6:	f100 0414 	add.w	r4, r0, #20
  405bca:	2300      	movs	r3, #0
  405bcc:	f85e 1b04 	ldr.w	r1, [lr], #4
  405bd0:	f855 8b04 	ldr.w	r8, [r5], #4
  405bd4:	b28a      	uxth	r2, r1
  405bd6:	fa13 f388 	uxtah	r3, r3, r8
  405bda:	0c09      	lsrs	r1, r1, #16
  405bdc:	1a9a      	subs	r2, r3, r2
  405bde:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  405be2:	eb03 4322 	add.w	r3, r3, r2, asr #16
  405be6:	b292      	uxth	r2, r2
  405be8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  405bec:	45f4      	cmp	ip, lr
  405bee:	f844 2b04 	str.w	r2, [r4], #4
  405bf2:	ea4f 4323 	mov.w	r3, r3, asr #16
  405bf6:	d8e9      	bhi.n	405bcc <__mdiff+0x6c>
  405bf8:	42af      	cmp	r7, r5
  405bfa:	d917      	bls.n	405c2c <__mdiff+0xcc>
  405bfc:	46a4      	mov	ip, r4
  405bfe:	46ae      	mov	lr, r5
  405c00:	f85e 2b04 	ldr.w	r2, [lr], #4
  405c04:	fa13 f382 	uxtah	r3, r3, r2
  405c08:	1419      	asrs	r1, r3, #16
  405c0a:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  405c0e:	b29b      	uxth	r3, r3
  405c10:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  405c14:	4577      	cmp	r7, lr
  405c16:	f84c 2b04 	str.w	r2, [ip], #4
  405c1a:	ea4f 4321 	mov.w	r3, r1, asr #16
  405c1e:	d8ef      	bhi.n	405c00 <__mdiff+0xa0>
  405c20:	43ed      	mvns	r5, r5
  405c22:	442f      	add	r7, r5
  405c24:	f027 0703 	bic.w	r7, r7, #3
  405c28:	3704      	adds	r7, #4
  405c2a:	443c      	add	r4, r7
  405c2c:	3c04      	subs	r4, #4
  405c2e:	b922      	cbnz	r2, 405c3a <__mdiff+0xda>
  405c30:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  405c34:	3e01      	subs	r6, #1
  405c36:	2b00      	cmp	r3, #0
  405c38:	d0fa      	beq.n	405c30 <__mdiff+0xd0>
  405c3a:	6106      	str	r6, [r0, #16]
  405c3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405c40:	2100      	movs	r1, #0
  405c42:	f7ff fd73 	bl	40572c <_Balloc>
  405c46:	2201      	movs	r2, #1
  405c48:	2300      	movs	r3, #0
  405c4a:	6102      	str	r2, [r0, #16]
  405c4c:	6143      	str	r3, [r0, #20]
  405c4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405c52:	4674      	mov	r4, lr
  405c54:	e7ab      	b.n	405bae <__mdiff+0x4e>
  405c56:	4633      	mov	r3, r6
  405c58:	f106 0414 	add.w	r4, r6, #20
  405c5c:	f102 0514 	add.w	r5, r2, #20
  405c60:	4616      	mov	r6, r2
  405c62:	2701      	movs	r7, #1
  405c64:	4698      	mov	r8, r3
  405c66:	e7a2      	b.n	405bae <__mdiff+0x4e>

00405c68 <__d2b>:
  405c68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405c6c:	b082      	sub	sp, #8
  405c6e:	2101      	movs	r1, #1
  405c70:	461c      	mov	r4, r3
  405c72:	f3c3 570a 	ubfx	r7, r3, #20, #11
  405c76:	4615      	mov	r5, r2
  405c78:	9e08      	ldr	r6, [sp, #32]
  405c7a:	f7ff fd57 	bl	40572c <_Balloc>
  405c7e:	f3c4 0413 	ubfx	r4, r4, #0, #20
  405c82:	4680      	mov	r8, r0
  405c84:	b10f      	cbz	r7, 405c8a <__d2b+0x22>
  405c86:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  405c8a:	9401      	str	r4, [sp, #4]
  405c8c:	b31d      	cbz	r5, 405cd6 <__d2b+0x6e>
  405c8e:	a802      	add	r0, sp, #8
  405c90:	f840 5d08 	str.w	r5, [r0, #-8]!
  405c94:	f7ff fdda 	bl	40584c <__lo0bits>
  405c98:	2800      	cmp	r0, #0
  405c9a:	d134      	bne.n	405d06 <__d2b+0x9e>
  405c9c:	e89d 000c 	ldmia.w	sp, {r2, r3}
  405ca0:	f8c8 2014 	str.w	r2, [r8, #20]
  405ca4:	2b00      	cmp	r3, #0
  405ca6:	bf0c      	ite	eq
  405ca8:	2101      	moveq	r1, #1
  405caa:	2102      	movne	r1, #2
  405cac:	f8c8 3018 	str.w	r3, [r8, #24]
  405cb0:	f8c8 1010 	str.w	r1, [r8, #16]
  405cb4:	b9df      	cbnz	r7, 405cee <__d2b+0x86>
  405cb6:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  405cba:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  405cbe:	6030      	str	r0, [r6, #0]
  405cc0:	6918      	ldr	r0, [r3, #16]
  405cc2:	f7ff fda3 	bl	40580c <__hi0bits>
  405cc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405cc8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  405ccc:	6018      	str	r0, [r3, #0]
  405cce:	4640      	mov	r0, r8
  405cd0:	b002      	add	sp, #8
  405cd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405cd6:	a801      	add	r0, sp, #4
  405cd8:	f7ff fdb8 	bl	40584c <__lo0bits>
  405cdc:	9b01      	ldr	r3, [sp, #4]
  405cde:	f8c8 3014 	str.w	r3, [r8, #20]
  405ce2:	2101      	movs	r1, #1
  405ce4:	3020      	adds	r0, #32
  405ce6:	f8c8 1010 	str.w	r1, [r8, #16]
  405cea:	2f00      	cmp	r7, #0
  405cec:	d0e3      	beq.n	405cb6 <__d2b+0x4e>
  405cee:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405cf0:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  405cf4:	4407      	add	r7, r0
  405cf6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  405cfa:	6037      	str	r7, [r6, #0]
  405cfc:	6018      	str	r0, [r3, #0]
  405cfe:	4640      	mov	r0, r8
  405d00:	b002      	add	sp, #8
  405d02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405d06:	e89d 000a 	ldmia.w	sp, {r1, r3}
  405d0a:	f1c0 0220 	rsb	r2, r0, #32
  405d0e:	fa03 f202 	lsl.w	r2, r3, r2
  405d12:	430a      	orrs	r2, r1
  405d14:	40c3      	lsrs	r3, r0
  405d16:	9301      	str	r3, [sp, #4]
  405d18:	f8c8 2014 	str.w	r2, [r8, #20]
  405d1c:	e7c2      	b.n	405ca4 <__d2b+0x3c>
  405d1e:	bf00      	nop

00405d20 <_sbrk_r>:
  405d20:	b538      	push	{r3, r4, r5, lr}
  405d22:	4c07      	ldr	r4, [pc, #28]	; (405d40 <_sbrk_r+0x20>)
  405d24:	2300      	movs	r3, #0
  405d26:	4605      	mov	r5, r0
  405d28:	4608      	mov	r0, r1
  405d2a:	6023      	str	r3, [r4, #0]
  405d2c:	f7fb fce0 	bl	4016f0 <_sbrk>
  405d30:	1c43      	adds	r3, r0, #1
  405d32:	d000      	beq.n	405d36 <_sbrk_r+0x16>
  405d34:	bd38      	pop	{r3, r4, r5, pc}
  405d36:	6823      	ldr	r3, [r4, #0]
  405d38:	2b00      	cmp	r3, #0
  405d3a:	d0fb      	beq.n	405d34 <_sbrk_r+0x14>
  405d3c:	602b      	str	r3, [r5, #0]
  405d3e:	bd38      	pop	{r3, r4, r5, pc}
  405d40:	20400cd0 	.word	0x20400cd0
	...

00405d80 <strlen>:
  405d80:	f890 f000 	pld	[r0]
  405d84:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  405d88:	f020 0107 	bic.w	r1, r0, #7
  405d8c:	f06f 0c00 	mvn.w	ip, #0
  405d90:	f010 0407 	ands.w	r4, r0, #7
  405d94:	f891 f020 	pld	[r1, #32]
  405d98:	f040 8049 	bne.w	405e2e <strlen+0xae>
  405d9c:	f04f 0400 	mov.w	r4, #0
  405da0:	f06f 0007 	mvn.w	r0, #7
  405da4:	e9d1 2300 	ldrd	r2, r3, [r1]
  405da8:	f891 f040 	pld	[r1, #64]	; 0x40
  405dac:	f100 0008 	add.w	r0, r0, #8
  405db0:	fa82 f24c 	uadd8	r2, r2, ip
  405db4:	faa4 f28c 	sel	r2, r4, ip
  405db8:	fa83 f34c 	uadd8	r3, r3, ip
  405dbc:	faa2 f38c 	sel	r3, r2, ip
  405dc0:	bb4b      	cbnz	r3, 405e16 <strlen+0x96>
  405dc2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  405dc6:	fa82 f24c 	uadd8	r2, r2, ip
  405dca:	f100 0008 	add.w	r0, r0, #8
  405dce:	faa4 f28c 	sel	r2, r4, ip
  405dd2:	fa83 f34c 	uadd8	r3, r3, ip
  405dd6:	faa2 f38c 	sel	r3, r2, ip
  405dda:	b9e3      	cbnz	r3, 405e16 <strlen+0x96>
  405ddc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  405de0:	fa82 f24c 	uadd8	r2, r2, ip
  405de4:	f100 0008 	add.w	r0, r0, #8
  405de8:	faa4 f28c 	sel	r2, r4, ip
  405dec:	fa83 f34c 	uadd8	r3, r3, ip
  405df0:	faa2 f38c 	sel	r3, r2, ip
  405df4:	b97b      	cbnz	r3, 405e16 <strlen+0x96>
  405df6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  405dfa:	f101 0120 	add.w	r1, r1, #32
  405dfe:	fa82 f24c 	uadd8	r2, r2, ip
  405e02:	f100 0008 	add.w	r0, r0, #8
  405e06:	faa4 f28c 	sel	r2, r4, ip
  405e0a:	fa83 f34c 	uadd8	r3, r3, ip
  405e0e:	faa2 f38c 	sel	r3, r2, ip
  405e12:	2b00      	cmp	r3, #0
  405e14:	d0c6      	beq.n	405da4 <strlen+0x24>
  405e16:	2a00      	cmp	r2, #0
  405e18:	bf04      	itt	eq
  405e1a:	3004      	addeq	r0, #4
  405e1c:	461a      	moveq	r2, r3
  405e1e:	ba12      	rev	r2, r2
  405e20:	fab2 f282 	clz	r2, r2
  405e24:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  405e28:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  405e2c:	4770      	bx	lr
  405e2e:	e9d1 2300 	ldrd	r2, r3, [r1]
  405e32:	f004 0503 	and.w	r5, r4, #3
  405e36:	f1c4 0000 	rsb	r0, r4, #0
  405e3a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  405e3e:	f014 0f04 	tst.w	r4, #4
  405e42:	f891 f040 	pld	[r1, #64]	; 0x40
  405e46:	fa0c f505 	lsl.w	r5, ip, r5
  405e4a:	ea62 0205 	orn	r2, r2, r5
  405e4e:	bf1c      	itt	ne
  405e50:	ea63 0305 	ornne	r3, r3, r5
  405e54:	4662      	movne	r2, ip
  405e56:	f04f 0400 	mov.w	r4, #0
  405e5a:	e7a9      	b.n	405db0 <strlen+0x30>

00405e5c <__ssprint_r>:
  405e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405e60:	6893      	ldr	r3, [r2, #8]
  405e62:	b083      	sub	sp, #12
  405e64:	4690      	mov	r8, r2
  405e66:	2b00      	cmp	r3, #0
  405e68:	d070      	beq.n	405f4c <__ssprint_r+0xf0>
  405e6a:	4682      	mov	sl, r0
  405e6c:	460c      	mov	r4, r1
  405e6e:	6817      	ldr	r7, [r2, #0]
  405e70:	688d      	ldr	r5, [r1, #8]
  405e72:	6808      	ldr	r0, [r1, #0]
  405e74:	e042      	b.n	405efc <__ssprint_r+0xa0>
  405e76:	89a3      	ldrh	r3, [r4, #12]
  405e78:	f413 6f90 	tst.w	r3, #1152	; 0x480
  405e7c:	d02e      	beq.n	405edc <__ssprint_r+0x80>
  405e7e:	6965      	ldr	r5, [r4, #20]
  405e80:	6921      	ldr	r1, [r4, #16]
  405e82:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  405e86:	eba0 0b01 	sub.w	fp, r0, r1
  405e8a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
  405e8e:	f10b 0001 	add.w	r0, fp, #1
  405e92:	106d      	asrs	r5, r5, #1
  405e94:	4430      	add	r0, r6
  405e96:	42a8      	cmp	r0, r5
  405e98:	462a      	mov	r2, r5
  405e9a:	bf84      	itt	hi
  405e9c:	4605      	movhi	r5, r0
  405e9e:	462a      	movhi	r2, r5
  405ea0:	055b      	lsls	r3, r3, #21
  405ea2:	d538      	bpl.n	405f16 <__ssprint_r+0xba>
  405ea4:	4611      	mov	r1, r2
  405ea6:	4650      	mov	r0, sl
  405ea8:	f7ff f898 	bl	404fdc <_malloc_r>
  405eac:	2800      	cmp	r0, #0
  405eae:	d03c      	beq.n	405f2a <__ssprint_r+0xce>
  405eb0:	465a      	mov	r2, fp
  405eb2:	6921      	ldr	r1, [r4, #16]
  405eb4:	9001      	str	r0, [sp, #4]
  405eb6:	f7ff fb93 	bl	4055e0 <memcpy>
  405eba:	89a2      	ldrh	r2, [r4, #12]
  405ebc:	9b01      	ldr	r3, [sp, #4]
  405ebe:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  405ec2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  405ec6:	81a2      	strh	r2, [r4, #12]
  405ec8:	eba5 020b 	sub.w	r2, r5, fp
  405ecc:	eb03 000b 	add.w	r0, r3, fp
  405ed0:	6165      	str	r5, [r4, #20]
  405ed2:	6123      	str	r3, [r4, #16]
  405ed4:	6020      	str	r0, [r4, #0]
  405ed6:	60a2      	str	r2, [r4, #8]
  405ed8:	4635      	mov	r5, r6
  405eda:	46b3      	mov	fp, r6
  405edc:	465a      	mov	r2, fp
  405ede:	4649      	mov	r1, r9
  405ee0:	f000 fa18 	bl	406314 <memmove>
  405ee4:	f8d8 3008 	ldr.w	r3, [r8, #8]
  405ee8:	68a2      	ldr	r2, [r4, #8]
  405eea:	6820      	ldr	r0, [r4, #0]
  405eec:	1b55      	subs	r5, r2, r5
  405eee:	4458      	add	r0, fp
  405ef0:	1b9e      	subs	r6, r3, r6
  405ef2:	60a5      	str	r5, [r4, #8]
  405ef4:	6020      	str	r0, [r4, #0]
  405ef6:	f8c8 6008 	str.w	r6, [r8, #8]
  405efa:	b33e      	cbz	r6, 405f4c <__ssprint_r+0xf0>
  405efc:	687e      	ldr	r6, [r7, #4]
  405efe:	463b      	mov	r3, r7
  405f00:	3708      	adds	r7, #8
  405f02:	2e00      	cmp	r6, #0
  405f04:	d0fa      	beq.n	405efc <__ssprint_r+0xa0>
  405f06:	42ae      	cmp	r6, r5
  405f08:	f8d3 9000 	ldr.w	r9, [r3]
  405f0c:	46ab      	mov	fp, r5
  405f0e:	d2b2      	bcs.n	405e76 <__ssprint_r+0x1a>
  405f10:	4635      	mov	r5, r6
  405f12:	46b3      	mov	fp, r6
  405f14:	e7e2      	b.n	405edc <__ssprint_r+0x80>
  405f16:	4650      	mov	r0, sl
  405f18:	f000 fa60 	bl	4063dc <_realloc_r>
  405f1c:	4603      	mov	r3, r0
  405f1e:	2800      	cmp	r0, #0
  405f20:	d1d2      	bne.n	405ec8 <__ssprint_r+0x6c>
  405f22:	6921      	ldr	r1, [r4, #16]
  405f24:	4650      	mov	r0, sl
  405f26:	f000 f8f9 	bl	40611c <_free_r>
  405f2a:	230c      	movs	r3, #12
  405f2c:	f8ca 3000 	str.w	r3, [sl]
  405f30:	89a3      	ldrh	r3, [r4, #12]
  405f32:	2200      	movs	r2, #0
  405f34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405f38:	f04f 30ff 	mov.w	r0, #4294967295
  405f3c:	81a3      	strh	r3, [r4, #12]
  405f3e:	f8c8 2008 	str.w	r2, [r8, #8]
  405f42:	f8c8 2004 	str.w	r2, [r8, #4]
  405f46:	b003      	add	sp, #12
  405f48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405f4c:	2000      	movs	r0, #0
  405f4e:	f8c8 0004 	str.w	r0, [r8, #4]
  405f52:	b003      	add	sp, #12
  405f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00405f58 <__register_exitproc>:
  405f58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  405f5c:	4d2c      	ldr	r5, [pc, #176]	; (406010 <__register_exitproc+0xb8>)
  405f5e:	4606      	mov	r6, r0
  405f60:	6828      	ldr	r0, [r5, #0]
  405f62:	4698      	mov	r8, r3
  405f64:	460f      	mov	r7, r1
  405f66:	4691      	mov	r9, r2
  405f68:	f7ff f834 	bl	404fd4 <__retarget_lock_acquire_recursive>
  405f6c:	4b29      	ldr	r3, [pc, #164]	; (406014 <__register_exitproc+0xbc>)
  405f6e:	681c      	ldr	r4, [r3, #0]
  405f70:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  405f74:	2b00      	cmp	r3, #0
  405f76:	d03e      	beq.n	405ff6 <__register_exitproc+0x9e>
  405f78:	685a      	ldr	r2, [r3, #4]
  405f7a:	2a1f      	cmp	r2, #31
  405f7c:	dc1c      	bgt.n	405fb8 <__register_exitproc+0x60>
  405f7e:	f102 0e01 	add.w	lr, r2, #1
  405f82:	b176      	cbz	r6, 405fa2 <__register_exitproc+0x4a>
  405f84:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  405f88:	2401      	movs	r4, #1
  405f8a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  405f8e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  405f92:	4094      	lsls	r4, r2
  405f94:	4320      	orrs	r0, r4
  405f96:	2e02      	cmp	r6, #2
  405f98:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  405f9c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  405fa0:	d023      	beq.n	405fea <__register_exitproc+0x92>
  405fa2:	3202      	adds	r2, #2
  405fa4:	f8c3 e004 	str.w	lr, [r3, #4]
  405fa8:	6828      	ldr	r0, [r5, #0]
  405faa:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  405fae:	f7ff f813 	bl	404fd8 <__retarget_lock_release_recursive>
  405fb2:	2000      	movs	r0, #0
  405fb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405fb8:	4b17      	ldr	r3, [pc, #92]	; (406018 <__register_exitproc+0xc0>)
  405fba:	b30b      	cbz	r3, 406000 <__register_exitproc+0xa8>
  405fbc:	f44f 70c8 	mov.w	r0, #400	; 0x190
  405fc0:	f3af 8000 	nop.w
  405fc4:	4603      	mov	r3, r0
  405fc6:	b1d8      	cbz	r0, 406000 <__register_exitproc+0xa8>
  405fc8:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  405fcc:	6002      	str	r2, [r0, #0]
  405fce:	2100      	movs	r1, #0
  405fd0:	6041      	str	r1, [r0, #4]
  405fd2:	460a      	mov	r2, r1
  405fd4:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  405fd8:	f04f 0e01 	mov.w	lr, #1
  405fdc:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  405fe0:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  405fe4:	2e00      	cmp	r6, #0
  405fe6:	d0dc      	beq.n	405fa2 <__register_exitproc+0x4a>
  405fe8:	e7cc      	b.n	405f84 <__register_exitproc+0x2c>
  405fea:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  405fee:	430c      	orrs	r4, r1
  405ff0:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  405ff4:	e7d5      	b.n	405fa2 <__register_exitproc+0x4a>
  405ff6:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  405ffa:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  405ffe:	e7bb      	b.n	405f78 <__register_exitproc+0x20>
  406000:	6828      	ldr	r0, [r5, #0]
  406002:	f7fe ffe9 	bl	404fd8 <__retarget_lock_release_recursive>
  406006:	f04f 30ff 	mov.w	r0, #4294967295
  40600a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40600e:	bf00      	nop
  406010:	20400450 	.word	0x20400450
  406014:	00407350 	.word	0x00407350
  406018:	00000000 	.word	0x00000000

0040601c <_calloc_r>:
  40601c:	b510      	push	{r4, lr}
  40601e:	fb02 f101 	mul.w	r1, r2, r1
  406022:	f7fe ffdb 	bl	404fdc <_malloc_r>
  406026:	4604      	mov	r4, r0
  406028:	b1d8      	cbz	r0, 406062 <_calloc_r+0x46>
  40602a:	f850 2c04 	ldr.w	r2, [r0, #-4]
  40602e:	f022 0203 	bic.w	r2, r2, #3
  406032:	3a04      	subs	r2, #4
  406034:	2a24      	cmp	r2, #36	; 0x24
  406036:	d818      	bhi.n	40606a <_calloc_r+0x4e>
  406038:	2a13      	cmp	r2, #19
  40603a:	d914      	bls.n	406066 <_calloc_r+0x4a>
  40603c:	2300      	movs	r3, #0
  40603e:	2a1b      	cmp	r2, #27
  406040:	6003      	str	r3, [r0, #0]
  406042:	6043      	str	r3, [r0, #4]
  406044:	d916      	bls.n	406074 <_calloc_r+0x58>
  406046:	2a24      	cmp	r2, #36	; 0x24
  406048:	6083      	str	r3, [r0, #8]
  40604a:	60c3      	str	r3, [r0, #12]
  40604c:	bf11      	iteee	ne
  40604e:	f100 0210 	addne.w	r2, r0, #16
  406052:	6103      	streq	r3, [r0, #16]
  406054:	6143      	streq	r3, [r0, #20]
  406056:	f100 0218 	addeq.w	r2, r0, #24
  40605a:	2300      	movs	r3, #0
  40605c:	6013      	str	r3, [r2, #0]
  40605e:	6053      	str	r3, [r2, #4]
  406060:	6093      	str	r3, [r2, #8]
  406062:	4620      	mov	r0, r4
  406064:	bd10      	pop	{r4, pc}
  406066:	4602      	mov	r2, r0
  406068:	e7f7      	b.n	40605a <_calloc_r+0x3e>
  40606a:	2100      	movs	r1, #0
  40606c:	f7fc fd18 	bl	402aa0 <memset>
  406070:	4620      	mov	r0, r4
  406072:	bd10      	pop	{r4, pc}
  406074:	f100 0208 	add.w	r2, r0, #8
  406078:	e7ef      	b.n	40605a <_calloc_r+0x3e>
  40607a:	bf00      	nop

0040607c <_malloc_trim_r>:
  40607c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40607e:	4f24      	ldr	r7, [pc, #144]	; (406110 <_malloc_trim_r+0x94>)
  406080:	460c      	mov	r4, r1
  406082:	4606      	mov	r6, r0
  406084:	f7ff fb46 	bl	405714 <__malloc_lock>
  406088:	68bb      	ldr	r3, [r7, #8]
  40608a:	685d      	ldr	r5, [r3, #4]
  40608c:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  406090:	310f      	adds	r1, #15
  406092:	f025 0503 	bic.w	r5, r5, #3
  406096:	4429      	add	r1, r5
  406098:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  40609c:	f021 010f 	bic.w	r1, r1, #15
  4060a0:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  4060a4:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  4060a8:	db07      	blt.n	4060ba <_malloc_trim_r+0x3e>
  4060aa:	2100      	movs	r1, #0
  4060ac:	4630      	mov	r0, r6
  4060ae:	f7ff fe37 	bl	405d20 <_sbrk_r>
  4060b2:	68bb      	ldr	r3, [r7, #8]
  4060b4:	442b      	add	r3, r5
  4060b6:	4298      	cmp	r0, r3
  4060b8:	d004      	beq.n	4060c4 <_malloc_trim_r+0x48>
  4060ba:	4630      	mov	r0, r6
  4060bc:	f7ff fb30 	bl	405720 <__malloc_unlock>
  4060c0:	2000      	movs	r0, #0
  4060c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4060c4:	4261      	negs	r1, r4
  4060c6:	4630      	mov	r0, r6
  4060c8:	f7ff fe2a 	bl	405d20 <_sbrk_r>
  4060cc:	3001      	adds	r0, #1
  4060ce:	d00d      	beq.n	4060ec <_malloc_trim_r+0x70>
  4060d0:	4b10      	ldr	r3, [pc, #64]	; (406114 <_malloc_trim_r+0x98>)
  4060d2:	68ba      	ldr	r2, [r7, #8]
  4060d4:	6819      	ldr	r1, [r3, #0]
  4060d6:	1b2d      	subs	r5, r5, r4
  4060d8:	f045 0501 	orr.w	r5, r5, #1
  4060dc:	4630      	mov	r0, r6
  4060de:	1b09      	subs	r1, r1, r4
  4060e0:	6055      	str	r5, [r2, #4]
  4060e2:	6019      	str	r1, [r3, #0]
  4060e4:	f7ff fb1c 	bl	405720 <__malloc_unlock>
  4060e8:	2001      	movs	r0, #1
  4060ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4060ec:	2100      	movs	r1, #0
  4060ee:	4630      	mov	r0, r6
  4060f0:	f7ff fe16 	bl	405d20 <_sbrk_r>
  4060f4:	68ba      	ldr	r2, [r7, #8]
  4060f6:	1a83      	subs	r3, r0, r2
  4060f8:	2b0f      	cmp	r3, #15
  4060fa:	ddde      	ble.n	4060ba <_malloc_trim_r+0x3e>
  4060fc:	4c06      	ldr	r4, [pc, #24]	; (406118 <_malloc_trim_r+0x9c>)
  4060fe:	4905      	ldr	r1, [pc, #20]	; (406114 <_malloc_trim_r+0x98>)
  406100:	6824      	ldr	r4, [r4, #0]
  406102:	f043 0301 	orr.w	r3, r3, #1
  406106:	1b00      	subs	r0, r0, r4
  406108:	6053      	str	r3, [r2, #4]
  40610a:	6008      	str	r0, [r1, #0]
  40610c:	e7d5      	b.n	4060ba <_malloc_trim_r+0x3e>
  40610e:	bf00      	nop
  406110:	20400454 	.word	0x20400454
  406114:	20400c78 	.word	0x20400c78
  406118:	2040085c 	.word	0x2040085c

0040611c <_free_r>:
  40611c:	2900      	cmp	r1, #0
  40611e:	d044      	beq.n	4061aa <_free_r+0x8e>
  406120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406124:	460d      	mov	r5, r1
  406126:	4680      	mov	r8, r0
  406128:	f7ff faf4 	bl	405714 <__malloc_lock>
  40612c:	f855 7c04 	ldr.w	r7, [r5, #-4]
  406130:	4969      	ldr	r1, [pc, #420]	; (4062d8 <_free_r+0x1bc>)
  406132:	f027 0301 	bic.w	r3, r7, #1
  406136:	f1a5 0408 	sub.w	r4, r5, #8
  40613a:	18e2      	adds	r2, r4, r3
  40613c:	688e      	ldr	r6, [r1, #8]
  40613e:	6850      	ldr	r0, [r2, #4]
  406140:	42b2      	cmp	r2, r6
  406142:	f020 0003 	bic.w	r0, r0, #3
  406146:	d05e      	beq.n	406206 <_free_r+0xea>
  406148:	07fe      	lsls	r6, r7, #31
  40614a:	6050      	str	r0, [r2, #4]
  40614c:	d40b      	bmi.n	406166 <_free_r+0x4a>
  40614e:	f855 7c08 	ldr.w	r7, [r5, #-8]
  406152:	1be4      	subs	r4, r4, r7
  406154:	f101 0e08 	add.w	lr, r1, #8
  406158:	68a5      	ldr	r5, [r4, #8]
  40615a:	4575      	cmp	r5, lr
  40615c:	443b      	add	r3, r7
  40615e:	d06d      	beq.n	40623c <_free_r+0x120>
  406160:	68e7      	ldr	r7, [r4, #12]
  406162:	60ef      	str	r7, [r5, #12]
  406164:	60bd      	str	r5, [r7, #8]
  406166:	1815      	adds	r5, r2, r0
  406168:	686d      	ldr	r5, [r5, #4]
  40616a:	07ed      	lsls	r5, r5, #31
  40616c:	d53e      	bpl.n	4061ec <_free_r+0xd0>
  40616e:	f043 0201 	orr.w	r2, r3, #1
  406172:	6062      	str	r2, [r4, #4]
  406174:	50e3      	str	r3, [r4, r3]
  406176:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40617a:	d217      	bcs.n	4061ac <_free_r+0x90>
  40617c:	08db      	lsrs	r3, r3, #3
  40617e:	1c58      	adds	r0, r3, #1
  406180:	109a      	asrs	r2, r3, #2
  406182:	684d      	ldr	r5, [r1, #4]
  406184:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  406188:	60a7      	str	r7, [r4, #8]
  40618a:	2301      	movs	r3, #1
  40618c:	4093      	lsls	r3, r2
  40618e:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  406192:	432b      	orrs	r3, r5
  406194:	3a08      	subs	r2, #8
  406196:	60e2      	str	r2, [r4, #12]
  406198:	604b      	str	r3, [r1, #4]
  40619a:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  40619e:	60fc      	str	r4, [r7, #12]
  4061a0:	4640      	mov	r0, r8
  4061a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4061a6:	f7ff babb 	b.w	405720 <__malloc_unlock>
  4061aa:	4770      	bx	lr
  4061ac:	0a5a      	lsrs	r2, r3, #9
  4061ae:	2a04      	cmp	r2, #4
  4061b0:	d852      	bhi.n	406258 <_free_r+0x13c>
  4061b2:	099a      	lsrs	r2, r3, #6
  4061b4:	f102 0739 	add.w	r7, r2, #57	; 0x39
  4061b8:	00ff      	lsls	r7, r7, #3
  4061ba:	f102 0538 	add.w	r5, r2, #56	; 0x38
  4061be:	19c8      	adds	r0, r1, r7
  4061c0:	59ca      	ldr	r2, [r1, r7]
  4061c2:	3808      	subs	r0, #8
  4061c4:	4290      	cmp	r0, r2
  4061c6:	d04f      	beq.n	406268 <_free_r+0x14c>
  4061c8:	6851      	ldr	r1, [r2, #4]
  4061ca:	f021 0103 	bic.w	r1, r1, #3
  4061ce:	428b      	cmp	r3, r1
  4061d0:	d232      	bcs.n	406238 <_free_r+0x11c>
  4061d2:	6892      	ldr	r2, [r2, #8]
  4061d4:	4290      	cmp	r0, r2
  4061d6:	d1f7      	bne.n	4061c8 <_free_r+0xac>
  4061d8:	68c3      	ldr	r3, [r0, #12]
  4061da:	60a0      	str	r0, [r4, #8]
  4061dc:	60e3      	str	r3, [r4, #12]
  4061de:	609c      	str	r4, [r3, #8]
  4061e0:	60c4      	str	r4, [r0, #12]
  4061e2:	4640      	mov	r0, r8
  4061e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4061e8:	f7ff ba9a 	b.w	405720 <__malloc_unlock>
  4061ec:	6895      	ldr	r5, [r2, #8]
  4061ee:	4f3b      	ldr	r7, [pc, #236]	; (4062dc <_free_r+0x1c0>)
  4061f0:	42bd      	cmp	r5, r7
  4061f2:	4403      	add	r3, r0
  4061f4:	d040      	beq.n	406278 <_free_r+0x15c>
  4061f6:	68d0      	ldr	r0, [r2, #12]
  4061f8:	60e8      	str	r0, [r5, #12]
  4061fa:	f043 0201 	orr.w	r2, r3, #1
  4061fe:	6085      	str	r5, [r0, #8]
  406200:	6062      	str	r2, [r4, #4]
  406202:	50e3      	str	r3, [r4, r3]
  406204:	e7b7      	b.n	406176 <_free_r+0x5a>
  406206:	07ff      	lsls	r7, r7, #31
  406208:	4403      	add	r3, r0
  40620a:	d407      	bmi.n	40621c <_free_r+0x100>
  40620c:	f855 2c08 	ldr.w	r2, [r5, #-8]
  406210:	1aa4      	subs	r4, r4, r2
  406212:	4413      	add	r3, r2
  406214:	68a0      	ldr	r0, [r4, #8]
  406216:	68e2      	ldr	r2, [r4, #12]
  406218:	60c2      	str	r2, [r0, #12]
  40621a:	6090      	str	r0, [r2, #8]
  40621c:	4a30      	ldr	r2, [pc, #192]	; (4062e0 <_free_r+0x1c4>)
  40621e:	6812      	ldr	r2, [r2, #0]
  406220:	f043 0001 	orr.w	r0, r3, #1
  406224:	4293      	cmp	r3, r2
  406226:	6060      	str	r0, [r4, #4]
  406228:	608c      	str	r4, [r1, #8]
  40622a:	d3b9      	bcc.n	4061a0 <_free_r+0x84>
  40622c:	4b2d      	ldr	r3, [pc, #180]	; (4062e4 <_free_r+0x1c8>)
  40622e:	4640      	mov	r0, r8
  406230:	6819      	ldr	r1, [r3, #0]
  406232:	f7ff ff23 	bl	40607c <_malloc_trim_r>
  406236:	e7b3      	b.n	4061a0 <_free_r+0x84>
  406238:	4610      	mov	r0, r2
  40623a:	e7cd      	b.n	4061d8 <_free_r+0xbc>
  40623c:	1811      	adds	r1, r2, r0
  40623e:	6849      	ldr	r1, [r1, #4]
  406240:	07c9      	lsls	r1, r1, #31
  406242:	d444      	bmi.n	4062ce <_free_r+0x1b2>
  406244:	6891      	ldr	r1, [r2, #8]
  406246:	68d2      	ldr	r2, [r2, #12]
  406248:	60ca      	str	r2, [r1, #12]
  40624a:	4403      	add	r3, r0
  40624c:	f043 0001 	orr.w	r0, r3, #1
  406250:	6091      	str	r1, [r2, #8]
  406252:	6060      	str	r0, [r4, #4]
  406254:	50e3      	str	r3, [r4, r3]
  406256:	e7a3      	b.n	4061a0 <_free_r+0x84>
  406258:	2a14      	cmp	r2, #20
  40625a:	d816      	bhi.n	40628a <_free_r+0x16e>
  40625c:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  406260:	00ff      	lsls	r7, r7, #3
  406262:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  406266:	e7aa      	b.n	4061be <_free_r+0xa2>
  406268:	10aa      	asrs	r2, r5, #2
  40626a:	2301      	movs	r3, #1
  40626c:	684d      	ldr	r5, [r1, #4]
  40626e:	4093      	lsls	r3, r2
  406270:	432b      	orrs	r3, r5
  406272:	604b      	str	r3, [r1, #4]
  406274:	4603      	mov	r3, r0
  406276:	e7b0      	b.n	4061da <_free_r+0xbe>
  406278:	f043 0201 	orr.w	r2, r3, #1
  40627c:	614c      	str	r4, [r1, #20]
  40627e:	610c      	str	r4, [r1, #16]
  406280:	60e5      	str	r5, [r4, #12]
  406282:	60a5      	str	r5, [r4, #8]
  406284:	6062      	str	r2, [r4, #4]
  406286:	50e3      	str	r3, [r4, r3]
  406288:	e78a      	b.n	4061a0 <_free_r+0x84>
  40628a:	2a54      	cmp	r2, #84	; 0x54
  40628c:	d806      	bhi.n	40629c <_free_r+0x180>
  40628e:	0b1a      	lsrs	r2, r3, #12
  406290:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  406294:	00ff      	lsls	r7, r7, #3
  406296:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  40629a:	e790      	b.n	4061be <_free_r+0xa2>
  40629c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4062a0:	d806      	bhi.n	4062b0 <_free_r+0x194>
  4062a2:	0bda      	lsrs	r2, r3, #15
  4062a4:	f102 0778 	add.w	r7, r2, #120	; 0x78
  4062a8:	00ff      	lsls	r7, r7, #3
  4062aa:	f102 0577 	add.w	r5, r2, #119	; 0x77
  4062ae:	e786      	b.n	4061be <_free_r+0xa2>
  4062b0:	f240 5054 	movw	r0, #1364	; 0x554
  4062b4:	4282      	cmp	r2, r0
  4062b6:	d806      	bhi.n	4062c6 <_free_r+0x1aa>
  4062b8:	0c9a      	lsrs	r2, r3, #18
  4062ba:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  4062be:	00ff      	lsls	r7, r7, #3
  4062c0:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  4062c4:	e77b      	b.n	4061be <_free_r+0xa2>
  4062c6:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  4062ca:	257e      	movs	r5, #126	; 0x7e
  4062cc:	e777      	b.n	4061be <_free_r+0xa2>
  4062ce:	f043 0101 	orr.w	r1, r3, #1
  4062d2:	6061      	str	r1, [r4, #4]
  4062d4:	6013      	str	r3, [r2, #0]
  4062d6:	e763      	b.n	4061a0 <_free_r+0x84>
  4062d8:	20400454 	.word	0x20400454
  4062dc:	2040045c 	.word	0x2040045c
  4062e0:	20400860 	.word	0x20400860
  4062e4:	20400ca8 	.word	0x20400ca8

004062e8 <__ascii_mbtowc>:
  4062e8:	b082      	sub	sp, #8
  4062ea:	b149      	cbz	r1, 406300 <__ascii_mbtowc+0x18>
  4062ec:	b15a      	cbz	r2, 406306 <__ascii_mbtowc+0x1e>
  4062ee:	b16b      	cbz	r3, 40630c <__ascii_mbtowc+0x24>
  4062f0:	7813      	ldrb	r3, [r2, #0]
  4062f2:	600b      	str	r3, [r1, #0]
  4062f4:	7812      	ldrb	r2, [r2, #0]
  4062f6:	1c10      	adds	r0, r2, #0
  4062f8:	bf18      	it	ne
  4062fa:	2001      	movne	r0, #1
  4062fc:	b002      	add	sp, #8
  4062fe:	4770      	bx	lr
  406300:	a901      	add	r1, sp, #4
  406302:	2a00      	cmp	r2, #0
  406304:	d1f3      	bne.n	4062ee <__ascii_mbtowc+0x6>
  406306:	4610      	mov	r0, r2
  406308:	b002      	add	sp, #8
  40630a:	4770      	bx	lr
  40630c:	f06f 0001 	mvn.w	r0, #1
  406310:	e7f4      	b.n	4062fc <__ascii_mbtowc+0x14>
  406312:	bf00      	nop

00406314 <memmove>:
  406314:	4288      	cmp	r0, r1
  406316:	b5f0      	push	{r4, r5, r6, r7, lr}
  406318:	d90d      	bls.n	406336 <memmove+0x22>
  40631a:	188b      	adds	r3, r1, r2
  40631c:	4298      	cmp	r0, r3
  40631e:	d20a      	bcs.n	406336 <memmove+0x22>
  406320:	1884      	adds	r4, r0, r2
  406322:	2a00      	cmp	r2, #0
  406324:	d051      	beq.n	4063ca <memmove+0xb6>
  406326:	4622      	mov	r2, r4
  406328:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40632c:	f802 4d01 	strb.w	r4, [r2, #-1]!
  406330:	4299      	cmp	r1, r3
  406332:	d1f9      	bne.n	406328 <memmove+0x14>
  406334:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406336:	2a0f      	cmp	r2, #15
  406338:	d948      	bls.n	4063cc <memmove+0xb8>
  40633a:	ea41 0300 	orr.w	r3, r1, r0
  40633e:	079b      	lsls	r3, r3, #30
  406340:	d146      	bne.n	4063d0 <memmove+0xbc>
  406342:	f100 0410 	add.w	r4, r0, #16
  406346:	f101 0310 	add.w	r3, r1, #16
  40634a:	4615      	mov	r5, r2
  40634c:	f853 6c10 	ldr.w	r6, [r3, #-16]
  406350:	f844 6c10 	str.w	r6, [r4, #-16]
  406354:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  406358:	f844 6c0c 	str.w	r6, [r4, #-12]
  40635c:	f853 6c08 	ldr.w	r6, [r3, #-8]
  406360:	f844 6c08 	str.w	r6, [r4, #-8]
  406364:	3d10      	subs	r5, #16
  406366:	f853 6c04 	ldr.w	r6, [r3, #-4]
  40636a:	f844 6c04 	str.w	r6, [r4, #-4]
  40636e:	2d0f      	cmp	r5, #15
  406370:	f103 0310 	add.w	r3, r3, #16
  406374:	f104 0410 	add.w	r4, r4, #16
  406378:	d8e8      	bhi.n	40634c <memmove+0x38>
  40637a:	f1a2 0310 	sub.w	r3, r2, #16
  40637e:	f023 030f 	bic.w	r3, r3, #15
  406382:	f002 0e0f 	and.w	lr, r2, #15
  406386:	3310      	adds	r3, #16
  406388:	f1be 0f03 	cmp.w	lr, #3
  40638c:	4419      	add	r1, r3
  40638e:	4403      	add	r3, r0
  406390:	d921      	bls.n	4063d6 <memmove+0xc2>
  406392:	1f1e      	subs	r6, r3, #4
  406394:	460d      	mov	r5, r1
  406396:	4674      	mov	r4, lr
  406398:	3c04      	subs	r4, #4
  40639a:	f855 7b04 	ldr.w	r7, [r5], #4
  40639e:	f846 7f04 	str.w	r7, [r6, #4]!
  4063a2:	2c03      	cmp	r4, #3
  4063a4:	d8f8      	bhi.n	406398 <memmove+0x84>
  4063a6:	f1ae 0404 	sub.w	r4, lr, #4
  4063aa:	f024 0403 	bic.w	r4, r4, #3
  4063ae:	3404      	adds	r4, #4
  4063b0:	4421      	add	r1, r4
  4063b2:	4423      	add	r3, r4
  4063b4:	f002 0203 	and.w	r2, r2, #3
  4063b8:	b162      	cbz	r2, 4063d4 <memmove+0xc0>
  4063ba:	3b01      	subs	r3, #1
  4063bc:	440a      	add	r2, r1
  4063be:	f811 4b01 	ldrb.w	r4, [r1], #1
  4063c2:	f803 4f01 	strb.w	r4, [r3, #1]!
  4063c6:	428a      	cmp	r2, r1
  4063c8:	d1f9      	bne.n	4063be <memmove+0xaa>
  4063ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4063cc:	4603      	mov	r3, r0
  4063ce:	e7f3      	b.n	4063b8 <memmove+0xa4>
  4063d0:	4603      	mov	r3, r0
  4063d2:	e7f2      	b.n	4063ba <memmove+0xa6>
  4063d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4063d6:	4672      	mov	r2, lr
  4063d8:	e7ee      	b.n	4063b8 <memmove+0xa4>
  4063da:	bf00      	nop

004063dc <_realloc_r>:
  4063dc:	2900      	cmp	r1, #0
  4063de:	f000 8095 	beq.w	40650c <_realloc_r+0x130>
  4063e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4063e6:	460d      	mov	r5, r1
  4063e8:	4616      	mov	r6, r2
  4063ea:	b083      	sub	sp, #12
  4063ec:	4680      	mov	r8, r0
  4063ee:	f106 070b 	add.w	r7, r6, #11
  4063f2:	f7ff f98f 	bl	405714 <__malloc_lock>
  4063f6:	f855 ec04 	ldr.w	lr, [r5, #-4]
  4063fa:	2f16      	cmp	r7, #22
  4063fc:	f02e 0403 	bic.w	r4, lr, #3
  406400:	f1a5 0908 	sub.w	r9, r5, #8
  406404:	d83c      	bhi.n	406480 <_realloc_r+0xa4>
  406406:	2210      	movs	r2, #16
  406408:	4617      	mov	r7, r2
  40640a:	42be      	cmp	r6, r7
  40640c:	d83d      	bhi.n	40648a <_realloc_r+0xae>
  40640e:	4294      	cmp	r4, r2
  406410:	da43      	bge.n	40649a <_realloc_r+0xbe>
  406412:	4bc4      	ldr	r3, [pc, #784]	; (406724 <_realloc_r+0x348>)
  406414:	6899      	ldr	r1, [r3, #8]
  406416:	eb09 0004 	add.w	r0, r9, r4
  40641a:	4288      	cmp	r0, r1
  40641c:	f000 80b4 	beq.w	406588 <_realloc_r+0x1ac>
  406420:	6843      	ldr	r3, [r0, #4]
  406422:	f023 0101 	bic.w	r1, r3, #1
  406426:	4401      	add	r1, r0
  406428:	6849      	ldr	r1, [r1, #4]
  40642a:	07c9      	lsls	r1, r1, #31
  40642c:	d54c      	bpl.n	4064c8 <_realloc_r+0xec>
  40642e:	f01e 0f01 	tst.w	lr, #1
  406432:	f000 809b 	beq.w	40656c <_realloc_r+0x190>
  406436:	4631      	mov	r1, r6
  406438:	4640      	mov	r0, r8
  40643a:	f7fe fdcf 	bl	404fdc <_malloc_r>
  40643e:	4606      	mov	r6, r0
  406440:	2800      	cmp	r0, #0
  406442:	d03a      	beq.n	4064ba <_realloc_r+0xde>
  406444:	f855 3c04 	ldr.w	r3, [r5, #-4]
  406448:	f023 0301 	bic.w	r3, r3, #1
  40644c:	444b      	add	r3, r9
  40644e:	f1a0 0208 	sub.w	r2, r0, #8
  406452:	429a      	cmp	r2, r3
  406454:	f000 8121 	beq.w	40669a <_realloc_r+0x2be>
  406458:	1f22      	subs	r2, r4, #4
  40645a:	2a24      	cmp	r2, #36	; 0x24
  40645c:	f200 8107 	bhi.w	40666e <_realloc_r+0x292>
  406460:	2a13      	cmp	r2, #19
  406462:	f200 80db 	bhi.w	40661c <_realloc_r+0x240>
  406466:	4603      	mov	r3, r0
  406468:	462a      	mov	r2, r5
  40646a:	6811      	ldr	r1, [r2, #0]
  40646c:	6019      	str	r1, [r3, #0]
  40646e:	6851      	ldr	r1, [r2, #4]
  406470:	6059      	str	r1, [r3, #4]
  406472:	6892      	ldr	r2, [r2, #8]
  406474:	609a      	str	r2, [r3, #8]
  406476:	4629      	mov	r1, r5
  406478:	4640      	mov	r0, r8
  40647a:	f7ff fe4f 	bl	40611c <_free_r>
  40647e:	e01c      	b.n	4064ba <_realloc_r+0xde>
  406480:	f027 0707 	bic.w	r7, r7, #7
  406484:	2f00      	cmp	r7, #0
  406486:	463a      	mov	r2, r7
  406488:	dabf      	bge.n	40640a <_realloc_r+0x2e>
  40648a:	2600      	movs	r6, #0
  40648c:	230c      	movs	r3, #12
  40648e:	4630      	mov	r0, r6
  406490:	f8c8 3000 	str.w	r3, [r8]
  406494:	b003      	add	sp, #12
  406496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40649a:	462e      	mov	r6, r5
  40649c:	1be3      	subs	r3, r4, r7
  40649e:	2b0f      	cmp	r3, #15
  4064a0:	d81e      	bhi.n	4064e0 <_realloc_r+0x104>
  4064a2:	f8d9 3004 	ldr.w	r3, [r9, #4]
  4064a6:	f003 0301 	and.w	r3, r3, #1
  4064aa:	4323      	orrs	r3, r4
  4064ac:	444c      	add	r4, r9
  4064ae:	f8c9 3004 	str.w	r3, [r9, #4]
  4064b2:	6863      	ldr	r3, [r4, #4]
  4064b4:	f043 0301 	orr.w	r3, r3, #1
  4064b8:	6063      	str	r3, [r4, #4]
  4064ba:	4640      	mov	r0, r8
  4064bc:	f7ff f930 	bl	405720 <__malloc_unlock>
  4064c0:	4630      	mov	r0, r6
  4064c2:	b003      	add	sp, #12
  4064c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4064c8:	f023 0303 	bic.w	r3, r3, #3
  4064cc:	18e1      	adds	r1, r4, r3
  4064ce:	4291      	cmp	r1, r2
  4064d0:	db1f      	blt.n	406512 <_realloc_r+0x136>
  4064d2:	68c3      	ldr	r3, [r0, #12]
  4064d4:	6882      	ldr	r2, [r0, #8]
  4064d6:	462e      	mov	r6, r5
  4064d8:	60d3      	str	r3, [r2, #12]
  4064da:	460c      	mov	r4, r1
  4064dc:	609a      	str	r2, [r3, #8]
  4064de:	e7dd      	b.n	40649c <_realloc_r+0xc0>
  4064e0:	f8d9 2004 	ldr.w	r2, [r9, #4]
  4064e4:	eb09 0107 	add.w	r1, r9, r7
  4064e8:	f002 0201 	and.w	r2, r2, #1
  4064ec:	444c      	add	r4, r9
  4064ee:	f043 0301 	orr.w	r3, r3, #1
  4064f2:	4317      	orrs	r7, r2
  4064f4:	f8c9 7004 	str.w	r7, [r9, #4]
  4064f8:	604b      	str	r3, [r1, #4]
  4064fa:	6863      	ldr	r3, [r4, #4]
  4064fc:	f043 0301 	orr.w	r3, r3, #1
  406500:	3108      	adds	r1, #8
  406502:	6063      	str	r3, [r4, #4]
  406504:	4640      	mov	r0, r8
  406506:	f7ff fe09 	bl	40611c <_free_r>
  40650a:	e7d6      	b.n	4064ba <_realloc_r+0xde>
  40650c:	4611      	mov	r1, r2
  40650e:	f7fe bd65 	b.w	404fdc <_malloc_r>
  406512:	f01e 0f01 	tst.w	lr, #1
  406516:	d18e      	bne.n	406436 <_realloc_r+0x5a>
  406518:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40651c:	eba9 0a01 	sub.w	sl, r9, r1
  406520:	f8da 1004 	ldr.w	r1, [sl, #4]
  406524:	f021 0103 	bic.w	r1, r1, #3
  406528:	440b      	add	r3, r1
  40652a:	4423      	add	r3, r4
  40652c:	4293      	cmp	r3, r2
  40652e:	db25      	blt.n	40657c <_realloc_r+0x1a0>
  406530:	68c2      	ldr	r2, [r0, #12]
  406532:	6881      	ldr	r1, [r0, #8]
  406534:	4656      	mov	r6, sl
  406536:	60ca      	str	r2, [r1, #12]
  406538:	6091      	str	r1, [r2, #8]
  40653a:	f8da 100c 	ldr.w	r1, [sl, #12]
  40653e:	f856 0f08 	ldr.w	r0, [r6, #8]!
  406542:	1f22      	subs	r2, r4, #4
  406544:	2a24      	cmp	r2, #36	; 0x24
  406546:	60c1      	str	r1, [r0, #12]
  406548:	6088      	str	r0, [r1, #8]
  40654a:	f200 8094 	bhi.w	406676 <_realloc_r+0x29a>
  40654e:	2a13      	cmp	r2, #19
  406550:	d96f      	bls.n	406632 <_realloc_r+0x256>
  406552:	6829      	ldr	r1, [r5, #0]
  406554:	f8ca 1008 	str.w	r1, [sl, #8]
  406558:	6869      	ldr	r1, [r5, #4]
  40655a:	f8ca 100c 	str.w	r1, [sl, #12]
  40655e:	2a1b      	cmp	r2, #27
  406560:	f200 80a2 	bhi.w	4066a8 <_realloc_r+0x2cc>
  406564:	3508      	adds	r5, #8
  406566:	f10a 0210 	add.w	r2, sl, #16
  40656a:	e063      	b.n	406634 <_realloc_r+0x258>
  40656c:	f855 3c08 	ldr.w	r3, [r5, #-8]
  406570:	eba9 0a03 	sub.w	sl, r9, r3
  406574:	f8da 1004 	ldr.w	r1, [sl, #4]
  406578:	f021 0103 	bic.w	r1, r1, #3
  40657c:	1863      	adds	r3, r4, r1
  40657e:	4293      	cmp	r3, r2
  406580:	f6ff af59 	blt.w	406436 <_realloc_r+0x5a>
  406584:	4656      	mov	r6, sl
  406586:	e7d8      	b.n	40653a <_realloc_r+0x15e>
  406588:	6841      	ldr	r1, [r0, #4]
  40658a:	f021 0b03 	bic.w	fp, r1, #3
  40658e:	44a3      	add	fp, r4
  406590:	f107 0010 	add.w	r0, r7, #16
  406594:	4583      	cmp	fp, r0
  406596:	da56      	bge.n	406646 <_realloc_r+0x26a>
  406598:	f01e 0f01 	tst.w	lr, #1
  40659c:	f47f af4b 	bne.w	406436 <_realloc_r+0x5a>
  4065a0:	f855 1c08 	ldr.w	r1, [r5, #-8]
  4065a4:	eba9 0a01 	sub.w	sl, r9, r1
  4065a8:	f8da 1004 	ldr.w	r1, [sl, #4]
  4065ac:	f021 0103 	bic.w	r1, r1, #3
  4065b0:	448b      	add	fp, r1
  4065b2:	4558      	cmp	r0, fp
  4065b4:	dce2      	bgt.n	40657c <_realloc_r+0x1a0>
  4065b6:	4656      	mov	r6, sl
  4065b8:	f8da 100c 	ldr.w	r1, [sl, #12]
  4065bc:	f856 0f08 	ldr.w	r0, [r6, #8]!
  4065c0:	1f22      	subs	r2, r4, #4
  4065c2:	2a24      	cmp	r2, #36	; 0x24
  4065c4:	60c1      	str	r1, [r0, #12]
  4065c6:	6088      	str	r0, [r1, #8]
  4065c8:	f200 808f 	bhi.w	4066ea <_realloc_r+0x30e>
  4065cc:	2a13      	cmp	r2, #19
  4065ce:	f240 808a 	bls.w	4066e6 <_realloc_r+0x30a>
  4065d2:	6829      	ldr	r1, [r5, #0]
  4065d4:	f8ca 1008 	str.w	r1, [sl, #8]
  4065d8:	6869      	ldr	r1, [r5, #4]
  4065da:	f8ca 100c 	str.w	r1, [sl, #12]
  4065de:	2a1b      	cmp	r2, #27
  4065e0:	f200 808a 	bhi.w	4066f8 <_realloc_r+0x31c>
  4065e4:	3508      	adds	r5, #8
  4065e6:	f10a 0210 	add.w	r2, sl, #16
  4065ea:	6829      	ldr	r1, [r5, #0]
  4065ec:	6011      	str	r1, [r2, #0]
  4065ee:	6869      	ldr	r1, [r5, #4]
  4065f0:	6051      	str	r1, [r2, #4]
  4065f2:	68a9      	ldr	r1, [r5, #8]
  4065f4:	6091      	str	r1, [r2, #8]
  4065f6:	eb0a 0107 	add.w	r1, sl, r7
  4065fa:	ebab 0207 	sub.w	r2, fp, r7
  4065fe:	f042 0201 	orr.w	r2, r2, #1
  406602:	6099      	str	r1, [r3, #8]
  406604:	604a      	str	r2, [r1, #4]
  406606:	f8da 3004 	ldr.w	r3, [sl, #4]
  40660a:	f003 0301 	and.w	r3, r3, #1
  40660e:	431f      	orrs	r7, r3
  406610:	4640      	mov	r0, r8
  406612:	f8ca 7004 	str.w	r7, [sl, #4]
  406616:	f7ff f883 	bl	405720 <__malloc_unlock>
  40661a:	e751      	b.n	4064c0 <_realloc_r+0xe4>
  40661c:	682b      	ldr	r3, [r5, #0]
  40661e:	6003      	str	r3, [r0, #0]
  406620:	686b      	ldr	r3, [r5, #4]
  406622:	6043      	str	r3, [r0, #4]
  406624:	2a1b      	cmp	r2, #27
  406626:	d82d      	bhi.n	406684 <_realloc_r+0x2a8>
  406628:	f100 0308 	add.w	r3, r0, #8
  40662c:	f105 0208 	add.w	r2, r5, #8
  406630:	e71b      	b.n	40646a <_realloc_r+0x8e>
  406632:	4632      	mov	r2, r6
  406634:	6829      	ldr	r1, [r5, #0]
  406636:	6011      	str	r1, [r2, #0]
  406638:	6869      	ldr	r1, [r5, #4]
  40663a:	6051      	str	r1, [r2, #4]
  40663c:	68a9      	ldr	r1, [r5, #8]
  40663e:	6091      	str	r1, [r2, #8]
  406640:	461c      	mov	r4, r3
  406642:	46d1      	mov	r9, sl
  406644:	e72a      	b.n	40649c <_realloc_r+0xc0>
  406646:	eb09 0107 	add.w	r1, r9, r7
  40664a:	ebab 0b07 	sub.w	fp, fp, r7
  40664e:	f04b 0201 	orr.w	r2, fp, #1
  406652:	6099      	str	r1, [r3, #8]
  406654:	604a      	str	r2, [r1, #4]
  406656:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40665a:	f003 0301 	and.w	r3, r3, #1
  40665e:	431f      	orrs	r7, r3
  406660:	4640      	mov	r0, r8
  406662:	f845 7c04 	str.w	r7, [r5, #-4]
  406666:	f7ff f85b 	bl	405720 <__malloc_unlock>
  40666a:	462e      	mov	r6, r5
  40666c:	e728      	b.n	4064c0 <_realloc_r+0xe4>
  40666e:	4629      	mov	r1, r5
  406670:	f7ff fe50 	bl	406314 <memmove>
  406674:	e6ff      	b.n	406476 <_realloc_r+0x9a>
  406676:	4629      	mov	r1, r5
  406678:	4630      	mov	r0, r6
  40667a:	461c      	mov	r4, r3
  40667c:	46d1      	mov	r9, sl
  40667e:	f7ff fe49 	bl	406314 <memmove>
  406682:	e70b      	b.n	40649c <_realloc_r+0xc0>
  406684:	68ab      	ldr	r3, [r5, #8]
  406686:	6083      	str	r3, [r0, #8]
  406688:	68eb      	ldr	r3, [r5, #12]
  40668a:	60c3      	str	r3, [r0, #12]
  40668c:	2a24      	cmp	r2, #36	; 0x24
  40668e:	d017      	beq.n	4066c0 <_realloc_r+0x2e4>
  406690:	f100 0310 	add.w	r3, r0, #16
  406694:	f105 0210 	add.w	r2, r5, #16
  406698:	e6e7      	b.n	40646a <_realloc_r+0x8e>
  40669a:	f850 3c04 	ldr.w	r3, [r0, #-4]
  40669e:	f023 0303 	bic.w	r3, r3, #3
  4066a2:	441c      	add	r4, r3
  4066a4:	462e      	mov	r6, r5
  4066a6:	e6f9      	b.n	40649c <_realloc_r+0xc0>
  4066a8:	68a9      	ldr	r1, [r5, #8]
  4066aa:	f8ca 1010 	str.w	r1, [sl, #16]
  4066ae:	68e9      	ldr	r1, [r5, #12]
  4066b0:	f8ca 1014 	str.w	r1, [sl, #20]
  4066b4:	2a24      	cmp	r2, #36	; 0x24
  4066b6:	d00c      	beq.n	4066d2 <_realloc_r+0x2f6>
  4066b8:	3510      	adds	r5, #16
  4066ba:	f10a 0218 	add.w	r2, sl, #24
  4066be:	e7b9      	b.n	406634 <_realloc_r+0x258>
  4066c0:	692b      	ldr	r3, [r5, #16]
  4066c2:	6103      	str	r3, [r0, #16]
  4066c4:	696b      	ldr	r3, [r5, #20]
  4066c6:	6143      	str	r3, [r0, #20]
  4066c8:	f105 0218 	add.w	r2, r5, #24
  4066cc:	f100 0318 	add.w	r3, r0, #24
  4066d0:	e6cb      	b.n	40646a <_realloc_r+0x8e>
  4066d2:	692a      	ldr	r2, [r5, #16]
  4066d4:	f8ca 2018 	str.w	r2, [sl, #24]
  4066d8:	696a      	ldr	r2, [r5, #20]
  4066da:	f8ca 201c 	str.w	r2, [sl, #28]
  4066de:	3518      	adds	r5, #24
  4066e0:	f10a 0220 	add.w	r2, sl, #32
  4066e4:	e7a6      	b.n	406634 <_realloc_r+0x258>
  4066e6:	4632      	mov	r2, r6
  4066e8:	e77f      	b.n	4065ea <_realloc_r+0x20e>
  4066ea:	4629      	mov	r1, r5
  4066ec:	4630      	mov	r0, r6
  4066ee:	9301      	str	r3, [sp, #4]
  4066f0:	f7ff fe10 	bl	406314 <memmove>
  4066f4:	9b01      	ldr	r3, [sp, #4]
  4066f6:	e77e      	b.n	4065f6 <_realloc_r+0x21a>
  4066f8:	68a9      	ldr	r1, [r5, #8]
  4066fa:	f8ca 1010 	str.w	r1, [sl, #16]
  4066fe:	68e9      	ldr	r1, [r5, #12]
  406700:	f8ca 1014 	str.w	r1, [sl, #20]
  406704:	2a24      	cmp	r2, #36	; 0x24
  406706:	d003      	beq.n	406710 <_realloc_r+0x334>
  406708:	3510      	adds	r5, #16
  40670a:	f10a 0218 	add.w	r2, sl, #24
  40670e:	e76c      	b.n	4065ea <_realloc_r+0x20e>
  406710:	692a      	ldr	r2, [r5, #16]
  406712:	f8ca 2018 	str.w	r2, [sl, #24]
  406716:	696a      	ldr	r2, [r5, #20]
  406718:	f8ca 201c 	str.w	r2, [sl, #28]
  40671c:	3518      	adds	r5, #24
  40671e:	f10a 0220 	add.w	r2, sl, #32
  406722:	e762      	b.n	4065ea <_realloc_r+0x20e>
  406724:	20400454 	.word	0x20400454

00406728 <__ascii_wctomb>:
  406728:	b121      	cbz	r1, 406734 <__ascii_wctomb+0xc>
  40672a:	2aff      	cmp	r2, #255	; 0xff
  40672c:	d804      	bhi.n	406738 <__ascii_wctomb+0x10>
  40672e:	700a      	strb	r2, [r1, #0]
  406730:	2001      	movs	r0, #1
  406732:	4770      	bx	lr
  406734:	4608      	mov	r0, r1
  406736:	4770      	bx	lr
  406738:	238a      	movs	r3, #138	; 0x8a
  40673a:	6003      	str	r3, [r0, #0]
  40673c:	f04f 30ff 	mov.w	r0, #4294967295
  406740:	4770      	bx	lr
  406742:	bf00      	nop

00406744 <__gedf2>:
  406744:	f04f 3cff 	mov.w	ip, #4294967295
  406748:	e006      	b.n	406758 <__cmpdf2+0x4>
  40674a:	bf00      	nop

0040674c <__ledf2>:
  40674c:	f04f 0c01 	mov.w	ip, #1
  406750:	e002      	b.n	406758 <__cmpdf2+0x4>
  406752:	bf00      	nop

00406754 <__cmpdf2>:
  406754:	f04f 0c01 	mov.w	ip, #1
  406758:	f84d cd04 	str.w	ip, [sp, #-4]!
  40675c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  406760:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  406764:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  406768:	bf18      	it	ne
  40676a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  40676e:	d01b      	beq.n	4067a8 <__cmpdf2+0x54>
  406770:	b001      	add	sp, #4
  406772:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  406776:	bf0c      	ite	eq
  406778:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  40677c:	ea91 0f03 	teqne	r1, r3
  406780:	bf02      	ittt	eq
  406782:	ea90 0f02 	teqeq	r0, r2
  406786:	2000      	moveq	r0, #0
  406788:	4770      	bxeq	lr
  40678a:	f110 0f00 	cmn.w	r0, #0
  40678e:	ea91 0f03 	teq	r1, r3
  406792:	bf58      	it	pl
  406794:	4299      	cmppl	r1, r3
  406796:	bf08      	it	eq
  406798:	4290      	cmpeq	r0, r2
  40679a:	bf2c      	ite	cs
  40679c:	17d8      	asrcs	r0, r3, #31
  40679e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  4067a2:	f040 0001 	orr.w	r0, r0, #1
  4067a6:	4770      	bx	lr
  4067a8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4067ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4067b0:	d102      	bne.n	4067b8 <__cmpdf2+0x64>
  4067b2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  4067b6:	d107      	bne.n	4067c8 <__cmpdf2+0x74>
  4067b8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4067bc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4067c0:	d1d6      	bne.n	406770 <__cmpdf2+0x1c>
  4067c2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  4067c6:	d0d3      	beq.n	406770 <__cmpdf2+0x1c>
  4067c8:	f85d 0b04 	ldr.w	r0, [sp], #4
  4067cc:	4770      	bx	lr
  4067ce:	bf00      	nop

004067d0 <__aeabi_cdrcmple>:
  4067d0:	4684      	mov	ip, r0
  4067d2:	4610      	mov	r0, r2
  4067d4:	4662      	mov	r2, ip
  4067d6:	468c      	mov	ip, r1
  4067d8:	4619      	mov	r1, r3
  4067da:	4663      	mov	r3, ip
  4067dc:	e000      	b.n	4067e0 <__aeabi_cdcmpeq>
  4067de:	bf00      	nop

004067e0 <__aeabi_cdcmpeq>:
  4067e0:	b501      	push	{r0, lr}
  4067e2:	f7ff ffb7 	bl	406754 <__cmpdf2>
  4067e6:	2800      	cmp	r0, #0
  4067e8:	bf48      	it	mi
  4067ea:	f110 0f00 	cmnmi.w	r0, #0
  4067ee:	bd01      	pop	{r0, pc}

004067f0 <__aeabi_dcmpeq>:
  4067f0:	f84d ed08 	str.w	lr, [sp, #-8]!
  4067f4:	f7ff fff4 	bl	4067e0 <__aeabi_cdcmpeq>
  4067f8:	bf0c      	ite	eq
  4067fa:	2001      	moveq	r0, #1
  4067fc:	2000      	movne	r0, #0
  4067fe:	f85d fb08 	ldr.w	pc, [sp], #8
  406802:	bf00      	nop

00406804 <__aeabi_dcmplt>:
  406804:	f84d ed08 	str.w	lr, [sp, #-8]!
  406808:	f7ff ffea 	bl	4067e0 <__aeabi_cdcmpeq>
  40680c:	bf34      	ite	cc
  40680e:	2001      	movcc	r0, #1
  406810:	2000      	movcs	r0, #0
  406812:	f85d fb08 	ldr.w	pc, [sp], #8
  406816:	bf00      	nop

00406818 <__aeabi_dcmple>:
  406818:	f84d ed08 	str.w	lr, [sp, #-8]!
  40681c:	f7ff ffe0 	bl	4067e0 <__aeabi_cdcmpeq>
  406820:	bf94      	ite	ls
  406822:	2001      	movls	r0, #1
  406824:	2000      	movhi	r0, #0
  406826:	f85d fb08 	ldr.w	pc, [sp], #8
  40682a:	bf00      	nop

0040682c <__aeabi_dcmpge>:
  40682c:	f84d ed08 	str.w	lr, [sp, #-8]!
  406830:	f7ff ffce 	bl	4067d0 <__aeabi_cdrcmple>
  406834:	bf94      	ite	ls
  406836:	2001      	movls	r0, #1
  406838:	2000      	movhi	r0, #0
  40683a:	f85d fb08 	ldr.w	pc, [sp], #8
  40683e:	bf00      	nop

00406840 <__aeabi_dcmpgt>:
  406840:	f84d ed08 	str.w	lr, [sp, #-8]!
  406844:	f7ff ffc4 	bl	4067d0 <__aeabi_cdrcmple>
  406848:	bf34      	ite	cc
  40684a:	2001      	movcc	r0, #1
  40684c:	2000      	movcs	r0, #0
  40684e:	f85d fb08 	ldr.w	pc, [sp], #8
  406852:	bf00      	nop

00406854 <__aeabi_dcmpun>:
  406854:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  406858:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40685c:	d102      	bne.n	406864 <__aeabi_dcmpun+0x10>
  40685e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  406862:	d10a      	bne.n	40687a <__aeabi_dcmpun+0x26>
  406864:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  406868:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40686c:	d102      	bne.n	406874 <__aeabi_dcmpun+0x20>
  40686e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  406872:	d102      	bne.n	40687a <__aeabi_dcmpun+0x26>
  406874:	f04f 0000 	mov.w	r0, #0
  406878:	4770      	bx	lr
  40687a:	f04f 0001 	mov.w	r0, #1
  40687e:	4770      	bx	lr

00406880 <__aeabi_d2iz>:
  406880:	ea4f 0241 	mov.w	r2, r1, lsl #1
  406884:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  406888:	d215      	bcs.n	4068b6 <__aeabi_d2iz+0x36>
  40688a:	d511      	bpl.n	4068b0 <__aeabi_d2iz+0x30>
  40688c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  406890:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  406894:	d912      	bls.n	4068bc <__aeabi_d2iz+0x3c>
  406896:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40689a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40689e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  4068a2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4068a6:	fa23 f002 	lsr.w	r0, r3, r2
  4068aa:	bf18      	it	ne
  4068ac:	4240      	negne	r0, r0
  4068ae:	4770      	bx	lr
  4068b0:	f04f 0000 	mov.w	r0, #0
  4068b4:	4770      	bx	lr
  4068b6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  4068ba:	d105      	bne.n	4068c8 <__aeabi_d2iz+0x48>
  4068bc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  4068c0:	bf08      	it	eq
  4068c2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  4068c6:	4770      	bx	lr
  4068c8:	f04f 0000 	mov.w	r0, #0
  4068cc:	4770      	bx	lr
  4068ce:	bf00      	nop

004068d0 <sysfont_glyphs>:
	...
  4068f0:	0030 0030 0030 0030 0030 0030 0000 0030     0.0.0.0.0.0...0.
  406900:	0030 0000 0000 0000 0000 0000 006c 006c     0...........l.l.
  406910:	006c 006c 0000 0000 0000 0000 0000 0000     l.l.............
	...
  406928:	0000 0028 0028 007c 0028 0028 007c 0028     ..(.(.|.(.(.|.(.
  406938:	0028 0000 0000 0000 0000 0000 0010 003c     (.............<.
  406948:	0040 0020 0010 0008 0004 0078 0010 0000     @. .......x.....
	...
  406960:	0000 007c 00a4 00a8 0050 0028 0054 0094     ..|.....P.(.T...
  406970:	0088 0000 0000 0000 0000 0000 0060 0090     ............`...
  406980:	0090 0090 0060 0094 0088 0088 0070 0000     ....`.......p...
	...
  406998:	0010 0010 0010 0000 0000 0000 0000 0000     ................
	...
  4069b4:	0008 0010 0020 0020 0020 0020 0020 0020     .... . . . . . .
  4069c4:	0010 0008 0000 0000 0000 0000 0020 0010     ............ ...
  4069d4:	0008 0008 0008 0008 0008 0008 0010 0020     .............. .
  4069e4:	0000 0000 0000 0028 0010 007c 0010 0028     ......(...|...(.
	...
  406a0c:	0010 0010 0010 00fe 0010 0010 0010 0000     ................
	...
  406a34:	0010 0030 0020 0000 0000 0000 0000 0000     ..0. ...........
  406a44:	0000 0000 0000 007c 0000 0000 0000 0000     ......|.........
	...
  406a68:	0000 0030 0030 0000 0000 0000 0000 0000     ..0.0...........
  406a78:	0000 0008 0008 0010 0010 0020 0020 0040     .......... . .@.
  406a88:	0040 0000 0000 0000 0000 0000 0000 0078     @.............x.
  406a98:	0084 008c 0094 00a4 00c4 0084 0078 0000     ............x...
	...
  406ab0:	0000 0010 0030 0050 0010 0010 0010 0010     ....0.P.........
  406ac0:	007c 0000 0000 0000 0000 0000 0000 0070     |.............p.
  406ad0:	0088 0008 0010 0020 0040 0080 00f8 0000     ...... .@.......
	...
  406ae8:	0000 0070 0088 0008 0030 0008 0008 0088     ..p.....0.......
  406af8:	0070 0000 0000 0000 0000 0000 0000 0008     p...............
  406b08:	0018 0028 0048 0088 00fc 0008 0008 0000     ..(.H...........
	...
  406b20:	0000 0078 0080 0080 00f0 0008 0008 0008     ..x.............
  406b30:	00f0 0000 0000 0000 0000 0000 0000 0030     ..............0.
  406b40:	0040 0080 00f0 0088 0088 0088 0070 0000     @...........p...
	...
  406b58:	0000 00f8 0008 0010 0010 0020 0020 0040     .......... . .@.
  406b68:	0040 0000 0000 0000 0000 0000 0000 0070     @.............p.
  406b78:	0088 0088 0070 0088 0088 0088 0070 0000     ....p.......p...
	...
  406b90:	0000 0070 0088 0088 0088 0078 0008 0010     ..p.......x.....
  406ba0:	0060 0000 0000 0000 0000 0000 0000 0000     `...............
  406bb0:	0000 0030 0030 0000 0000 0030 0030 0000     ..0.0.....0.0...
	...
  406bcc:	0000 0030 0030 0000 0000 0030 0030 0060     ..0.0.....0.0.`.
  406bdc:	0040 0000 0000 0000 0000 0000 0008 0010     @...............
  406bec:	0020 0040 0020 0010 0008 0000 0000 0000      .@. ...........
	...
  406c08:	007c 0000 007c 0000 0000 0000 0000 0000     |...|...........
	...
  406c20:	0040 0020 0010 0008 0010 0020 0040 0000     @. ....... .@...
	...
  406c38:	0000 0030 0048 0008 0010 0020 0000 0000     ..0.H..... .....
  406c48:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
  406c58:	003c 0042 009a 00aa 00aa 00be 0080 0078     <.B...........x.
	...
  406c70:	0000 0010 0028 0028 0044 007c 0044 0044     ....(.(.D.|.D.D.
  406c80:	0044 0000 0000 0000 0000 0000 0000 00f8     D...............
  406c90:	0084 0084 00f8 0084 0084 0084 00f8 0000     ................
	...
  406ca8:	0000 003c 0040 0080 0080 0080 0080 0040     ..<.@.........@.
  406cb8:	003c 0000 0000 0000 0000 0000 0000 00f0     <...............
  406cc8:	0088 0084 0084 0084 0084 0088 00f0 0000     ................
	...
  406ce0:	0000 00f8 0080 0080 00f0 0080 0080 0080     ................
  406cf0:	00f8 0000 0000 0000 0000 0000 0000 00f8     ................
  406d00:	0080 0080 00f8 0080 0080 0080 0080 0000     ................
	...
  406d18:	0000 003c 0040 0080 0080 009c 0084 0044     ..<.@.........D.
  406d28:	0038 0000 0000 0000 0000 0000 0000 0088     8...............
  406d38:	0088 0088 00f8 0088 0088 0088 0088 0000     ................
	...
  406d50:	0000 00f8 0020 0020 0020 0020 0020 0020     .... . . . . . .
  406d60:	00f8 0000 0000 0000 0000 0000 0000 00f8     ................
  406d70:	0008 0008 0008 0008 0008 0008 00f0 0000     ................
	...
  406d88:	0000 0084 0088 0090 00a0 00d0 0088 0084     ................
  406d98:	0084 0000 0000 0000 0000 0000 0000 0080     ................
  406da8:	0080 0080 0080 0080 0080 0080 00fc 0000     ................
	...
  406dc0:	0000 0084 00cc 00cc 00b4 00b4 0084 0084     ................
  406dd0:	0084 0000 0000 0000 0000 0000 0000 0084     ................
  406de0:	00c4 00c4 00a4 00a4 0094 0094 008c 0000     ................
	...
  406df8:	0000 0078 0084 0084 0084 0084 0084 0084     ..x.............
  406e08:	0078 0000 0000 0000 0000 0000 0000 00f8     x...............
  406e18:	0084 0084 0084 00f8 0080 0080 0080 0000     ................
	...
  406e30:	0000 0078 0084 0084 0084 0084 0084 0084     ..x.............
  406e40:	0078 0020 0018 0000 0000 0000 0000 00f8     x. .............
  406e50:	0084 0084 0084 00f8 0088 0084 0084 0000     ................
	...
  406e68:	0000 007c 0080 0080 0060 0018 0004 0004     ..|.....`.......
  406e78:	00f8 0000 0000 0000 0000 0000 0000 00f8     ................
  406e88:	0020 0020 0020 0020 0020 0020 0020 0000      . . . . . . ...
	...
  406ea0:	0000 0084 0084 0084 0084 0084 0084 0084     ................
  406eb0:	0078 0000 0000 0000 0000 0000 0000 0084     x...............
  406ec0:	0084 0084 0048 0048 0048 0030 0030 0000     ....H.H.H.0.0...
	...
  406ed8:	0000 0088 00a8 00a8 00a8 00a8 00a8 0050     ..............P.
  406ee8:	0050 0000 0000 0000 0000 0000 0000 0088     P...............
  406ef8:	0088 0050 0020 0020 0050 0088 0088 0000     ..P. . .P.......
	...
  406f10:	0000 0088 0088 0088 0050 0050 0020 0020     ........P.P. . .
  406f20:	0020 0000 0000 0000 0000 0000 0000 00fc      ...............
  406f30:	0004 0008 0010 0020 0040 0080 00fc 0000     ...... .@.......
	...
  406f48:	0070 0040 0040 0040 0040 0040 0040 0040     p.@.@.@.@.@.@.@.
  406f58:	0040 0040 0070 0000 0000 0000 0040 0040     @.@.p.......@.@.
  406f68:	0020 0020 0020 0010 0010 0010 0008 0008      . . ...........
	...
  406f80:	0038 0008 0008 0008 0008 0008 0008 0008     8...............
  406f90:	0008 0008 0038 0000 0000 0000 0010 0028     ....8.........(.
  406fa0:	0044 0000 0000 0000 0000 0000 0000 0000     D...............
	...
  406fc8:	0038 0000 0000 0000 0000 0000 0000 0020     8............. .
  406fd8:	0010 0000 0000 0000 0000 0000 0000 0000     ................
	...
  406ff4:	0000 0070 0008 0008 0078 0088 007c 0000     ..p.....x...|...
	...
  40700c:	0080 0080 0080 00f8 0084 0084 0084 0084     ................
  40701c:	00f8 0000 0000 0000 0000 0000 0000 0000     ................
  40702c:	0000 0078 0080 0080 0080 0080 0078 0000     ..x.........x...
	...
  407044:	0004 0004 0004 007c 0084 0084 0084 008c     ......|.........
  407054:	0074 0000 0000 0000 0000 0000 0000 0000     t...............
  407064:	0000 0078 0084 00fc 0080 0080 007c 0000     ..x.........|...
	...
  40707c:	001c 0020 0020 00fc 0020 0020 0020 0020     .. . ... . . . .
  40708c:	00fc 0000 0000 0000 0000 0000 0000 0000     ................
  40709c:	0000 007c 0084 0084 0084 0084 007c 0004     ..|.........|...
  4070ac:	0078 0000 0000 0000 0080 0080 0080 00b8     x...............
  4070bc:	00c4 0084 0084 0084 0084 0000 0000 0000     ................
  4070cc:	0000 0000 0000 0010 0000 0070 0010 0010     ..........p.....
  4070dc:	0010 0010 007c 0000 0000 0000 0000 0000     ....|...........
  4070ec:	0000 0008 0000 0078 0008 0008 0008 0008     ......x.........
  4070fc:	0008 0008 0008 0070 0000 0000 0080 0080     ......p.........
  40710c:	0080 0088 0090 00a0 00d0 0088 0088 0000     ................
	...
  407124:	00e0 0020 0020 0020 0020 0020 0020 0020     .. . . . . . . .
  407134:	00f8 0000 0000 0000 0000 0000 0000 0000     ................
  407144:	0000 00a4 00fc 00a4 00a4 00a4 00a4 0000     ................
	...
  407160:	0000 00b8 00c4 0084 0084 0084 0084 0000     ................
	...
  40717c:	0000 0078 0084 0084 0084 0084 0078 0000     ..x.........x...
	...
  407198:	0000 00b8 00c4 0084 0084 0084 00f8 0080     ................
  4071a8:	0080 0000 0000 0000 0000 0000 0000 007c     ..............|.
  4071b8:	0084 0084 0084 0084 007c 0004 0004 0000     ........|.......
	...
  4071d0:	0000 00d8 0060 0040 0040 0040 00f0 0000     ....`.@.@.@.....
	...
  4071ec:	0000 0078 0080 0040 0030 0008 00f0 0000     ..x...@.0.......
	...
  407208:	0020 00fc 0020 0020 0020 0020 001c 0000      ... . . . .....
	...
  407224:	0000 0088 0088 0088 0088 0088 007c 0000     ............|...
	...
  407240:	0000 0084 0084 0084 0048 0048 0030 0000     ........H.H.0...
	...
  40725c:	0000 0088 00a8 00a8 00a8 00a8 0050 0000     ............P...
	...
  407278:	0000 0088 0050 0020 0020 0050 0088 0000     ....P. . .P.....
	...
  407294:	0000 0084 0084 0048 0048 0030 0010 0020     ......H.H.0... .
  4072a4:	0040 0000 0000 0000 0000 0000 0000 00f8     @...............
  4072b4:	0008 0010 0020 0040 00f8 0000 0000 0000     .... .@.........
  4072c4:	0000 0000 0010 0020 0020 0010 0020 0020     ...... . ... . .
  4072d4:	0010 0020 0020 0010 0000 0000 0000 0000     .. . ...........
  4072e4:	0010 0010 0010 0010 0000 0000 0010 0010     ................
  4072f4:	0010 0010 0000 0000 0000 0000 0020 0010     ............ ...
  407304:	0010 0020 0010 0010 0020 0010 0010 0020     .. ..... ..... .
  407314:	0000 0000 07e6 0000 0004 0000 0006 0000     ................
  407324:	0001 0000 0010 0000 0000 0000 0000 0000     ................
  407334:	3025 6432 253a 3230 3a64 3025 6432 0000     %02d:%02d:%02d..
  407344:	3025 6432 253a 3230 0064 0000               %02d:%02d...

00407350 <_global_impure_ptr>:
  407350:	0028 2040 4e49 0046 6e69 0066 414e 004e     (.@ INF.inf.NAN.
  407360:	616e 006e 3130 3332 3534 3736 3938 4241     nan.0123456789AB
  407370:	4443 4645 0000 0000 3130 3332 3534 3736     CDEF....01234567
  407380:	3938 6261 6463 6665 0000 0000 6e28 6c75     89abcdef....(nul
  407390:	296c 0000 0030 0000                         l)..0...

00407398 <blanks.7223>:
  407398:	2020 2020 2020 2020 2020 2020 2020 2020                     

004073a8 <zeroes.7224>:
  4073a8:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
  4073b8:	6e49 6966 696e 7974 0000 0000 614e 004e     Infinity....NaN.

004073c8 <__mprec_bigtens>:
  4073c8:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
  4073d8:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
  4073e8:	bf3c 7f73 4fdd 7515                         <.s..O.u

004073f0 <__mprec_tens>:
  4073f0:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
  407400:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
  407410:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
  407420:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
  407430:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
  407440:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
  407450:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
  407460:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
  407470:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
  407480:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
  407490:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
  4074a0:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
  4074b0:	9db4 79d9 7843 44ea                         ...yCx.D

004074b8 <p05.6055>:
  4074b8:	0005 0000 0019 0000 007d 0000 0043 0000     ........}...C...
  4074c8:	4f50 4953 0058 0000 002e 0000               POSIX.......

004074d4 <_ctype_>:
  4074d4:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
  4074e4:	2020 2020 2020 2020 2020 2020 2020 2020                     
  4074f4:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
  407504:	0410 0404 0404 0404 0404 1004 1010 1010     ................
  407514:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
  407524:	0101 0101 0101 0101 0101 0101 1010 1010     ................
  407534:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
  407544:	0202 0202 0202 0202 0202 0202 1010 1010     ................
  407554:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

004075d8 <_init>:
  4075d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4075da:	bf00      	nop
  4075dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4075de:	bc08      	pop	{r3}
  4075e0:	469e      	mov	lr, r3
  4075e2:	4770      	bx	lr

004075e4 <__init_array_start>:
  4075e4:	00403fe5 	.word	0x00403fe5

004075e8 <__frame_dummy_init_array_entry>:
  4075e8:	00400165                                e.@.

004075ec <_fini>:
  4075ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4075ee:	bf00      	nop
  4075f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4075f2:	bc08      	pop	{r3}
  4075f4:	469e      	mov	lr, r3
  4075f6:	4770      	bx	lr

004075f8 <__fini_array_start>:
  4075f8:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
	...

2040000c <sysfont>:
2040000c:	0000 0000 68d0 0040 0e0a 7d20               .....h@... }

20400018 <g_interrupt_enabled>:
20400018:	0001 0000                                   ....

2040001c <SystemCoreClock>:
2040001c:	0900 003d                                   ..=.

20400020 <_impure_ptr>:
20400020:	0028 2040 0000 0000                         (.@ ....

20400028 <impure_data>:
20400028:	0000 0000 0314 2040 037c 2040 03e4 2040     ......@ |.@ ..@ 
	...
204000d0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000e0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400450 <__atexit_recursive_mutex>:
20400450:	0cac 2040                                   ..@ 

20400454 <__malloc_av_>:
	...
2040045c:	0454 2040 0454 2040 045c 2040 045c 2040     T.@ T.@ \.@ \.@ 
2040046c:	0464 2040 0464 2040 046c 2040 046c 2040     d.@ d.@ l.@ l.@ 
2040047c:	0474 2040 0474 2040 047c 2040 047c 2040     t.@ t.@ |.@ |.@ 
2040048c:	0484 2040 0484 2040 048c 2040 048c 2040     ..@ ..@ ..@ ..@ 
2040049c:	0494 2040 0494 2040 049c 2040 049c 2040     ..@ ..@ ..@ ..@ 
204004ac:	04a4 2040 04a4 2040 04ac 2040 04ac 2040     ..@ ..@ ..@ ..@ 
204004bc:	04b4 2040 04b4 2040 04bc 2040 04bc 2040     ..@ ..@ ..@ ..@ 
204004cc:	04c4 2040 04c4 2040 04cc 2040 04cc 2040     ..@ ..@ ..@ ..@ 
204004dc:	04d4 2040 04d4 2040 04dc 2040 04dc 2040     ..@ ..@ ..@ ..@ 
204004ec:	04e4 2040 04e4 2040 04ec 2040 04ec 2040     ..@ ..@ ..@ ..@ 
204004fc:	04f4 2040 04f4 2040 04fc 2040 04fc 2040     ..@ ..@ ..@ ..@ 
2040050c:	0504 2040 0504 2040 050c 2040 050c 2040     ..@ ..@ ..@ ..@ 
2040051c:	0514 2040 0514 2040 051c 2040 051c 2040     ..@ ..@ ..@ ..@ 
2040052c:	0524 2040 0524 2040 052c 2040 052c 2040     $.@ $.@ ,.@ ,.@ 
2040053c:	0534 2040 0534 2040 053c 2040 053c 2040     4.@ 4.@ <.@ <.@ 
2040054c:	0544 2040 0544 2040 054c 2040 054c 2040     D.@ D.@ L.@ L.@ 
2040055c:	0554 2040 0554 2040 055c 2040 055c 2040     T.@ T.@ \.@ \.@ 
2040056c:	0564 2040 0564 2040 056c 2040 056c 2040     d.@ d.@ l.@ l.@ 
2040057c:	0574 2040 0574 2040 057c 2040 057c 2040     t.@ t.@ |.@ |.@ 
2040058c:	0584 2040 0584 2040 058c 2040 058c 2040     ..@ ..@ ..@ ..@ 
2040059c:	0594 2040 0594 2040 059c 2040 059c 2040     ..@ ..@ ..@ ..@ 
204005ac:	05a4 2040 05a4 2040 05ac 2040 05ac 2040     ..@ ..@ ..@ ..@ 
204005bc:	05b4 2040 05b4 2040 05bc 2040 05bc 2040     ..@ ..@ ..@ ..@ 
204005cc:	05c4 2040 05c4 2040 05cc 2040 05cc 2040     ..@ ..@ ..@ ..@ 
204005dc:	05d4 2040 05d4 2040 05dc 2040 05dc 2040     ..@ ..@ ..@ ..@ 
204005ec:	05e4 2040 05e4 2040 05ec 2040 05ec 2040     ..@ ..@ ..@ ..@ 
204005fc:	05f4 2040 05f4 2040 05fc 2040 05fc 2040     ..@ ..@ ..@ ..@ 
2040060c:	0604 2040 0604 2040 060c 2040 060c 2040     ..@ ..@ ..@ ..@ 
2040061c:	0614 2040 0614 2040 061c 2040 061c 2040     ..@ ..@ ..@ ..@ 
2040062c:	0624 2040 0624 2040 062c 2040 062c 2040     $.@ $.@ ,.@ ,.@ 
2040063c:	0634 2040 0634 2040 063c 2040 063c 2040     4.@ 4.@ <.@ <.@ 
2040064c:	0644 2040 0644 2040 064c 2040 064c 2040     D.@ D.@ L.@ L.@ 
2040065c:	0654 2040 0654 2040 065c 2040 065c 2040     T.@ T.@ \.@ \.@ 
2040066c:	0664 2040 0664 2040 066c 2040 066c 2040     d.@ d.@ l.@ l.@ 
2040067c:	0674 2040 0674 2040 067c 2040 067c 2040     t.@ t.@ |.@ |.@ 
2040068c:	0684 2040 0684 2040 068c 2040 068c 2040     ..@ ..@ ..@ ..@ 
2040069c:	0694 2040 0694 2040 069c 2040 069c 2040     ..@ ..@ ..@ ..@ 
204006ac:	06a4 2040 06a4 2040 06ac 2040 06ac 2040     ..@ ..@ ..@ ..@ 
204006bc:	06b4 2040 06b4 2040 06bc 2040 06bc 2040     ..@ ..@ ..@ ..@ 
204006cc:	06c4 2040 06c4 2040 06cc 2040 06cc 2040     ..@ ..@ ..@ ..@ 
204006dc:	06d4 2040 06d4 2040 06dc 2040 06dc 2040     ..@ ..@ ..@ ..@ 
204006ec:	06e4 2040 06e4 2040 06ec 2040 06ec 2040     ..@ ..@ ..@ ..@ 
204006fc:	06f4 2040 06f4 2040 06fc 2040 06fc 2040     ..@ ..@ ..@ ..@ 
2040070c:	0704 2040 0704 2040 070c 2040 070c 2040     ..@ ..@ ..@ ..@ 
2040071c:	0714 2040 0714 2040 071c 2040 071c 2040     ..@ ..@ ..@ ..@ 
2040072c:	0724 2040 0724 2040 072c 2040 072c 2040     $.@ $.@ ,.@ ,.@ 
2040073c:	0734 2040 0734 2040 073c 2040 073c 2040     4.@ 4.@ <.@ <.@ 
2040074c:	0744 2040 0744 2040 074c 2040 074c 2040     D.@ D.@ L.@ L.@ 
2040075c:	0754 2040 0754 2040 075c 2040 075c 2040     T.@ T.@ \.@ \.@ 
2040076c:	0764 2040 0764 2040 076c 2040 076c 2040     d.@ d.@ l.@ l.@ 
2040077c:	0774 2040 0774 2040 077c 2040 077c 2040     t.@ t.@ |.@ |.@ 
2040078c:	0784 2040 0784 2040 078c 2040 078c 2040     ..@ ..@ ..@ ..@ 
2040079c:	0794 2040 0794 2040 079c 2040 079c 2040     ..@ ..@ ..@ ..@ 
204007ac:	07a4 2040 07a4 2040 07ac 2040 07ac 2040     ..@ ..@ ..@ ..@ 
204007bc:	07b4 2040 07b4 2040 07bc 2040 07bc 2040     ..@ ..@ ..@ ..@ 
204007cc:	07c4 2040 07c4 2040 07cc 2040 07cc 2040     ..@ ..@ ..@ ..@ 
204007dc:	07d4 2040 07d4 2040 07dc 2040 07dc 2040     ..@ ..@ ..@ ..@ 
204007ec:	07e4 2040 07e4 2040 07ec 2040 07ec 2040     ..@ ..@ ..@ ..@ 
204007fc:	07f4 2040 07f4 2040 07fc 2040 07fc 2040     ..@ ..@ ..@ ..@ 
2040080c:	0804 2040 0804 2040 080c 2040 080c 2040     ..@ ..@ ..@ ..@ 
2040081c:	0814 2040 0814 2040 081c 2040 081c 2040     ..@ ..@ ..@ ..@ 
2040082c:	0824 2040 0824 2040 082c 2040 082c 2040     $.@ $.@ ,.@ ,.@ 
2040083c:	0834 2040 0834 2040 083c 2040 083c 2040     4.@ 4.@ <.@ <.@ 
2040084c:	0844 2040 0844 2040 084c 2040 084c 2040     D.@ D.@ L.@ L.@ 

2040085c <__malloc_sbrk_base>:
2040085c:	ffff ffff                                   ....

20400860 <__malloc_trim_threshold>:
20400860:	0000 0002                                   ....

20400864 <__global_locale>:
20400864:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400884:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008a4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008c4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008e4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400904:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400924:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400944:	6729 0040 62e9 0040 0000 0000 74d4 0040     )g@..b@......t@.
20400954:	74d0 0040 7374 0040 7374 0040 7374 0040     .t@.ts@.ts@.ts@.
20400964:	7374 0040 7374 0040 7374 0040 7374 0040     ts@.ts@.ts@.ts@.
20400974:	7374 0040 7374 0040 ffff ffff ffff ffff     ts@.ts@.........
20400984:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
204009ac:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
